{"ast":null,"code":"import NavigatorHint from './navigator-hint';\nimport { Selection, filterSeriesByType } from '../chart';\nimport { DRAG, DRAG_END, EQUALLY_SPACED_SERIES, ZOOM, ZOOM_END } from '../chart/constants';\nimport { DateCategoryAxis } from '../core';\nimport { addDuration, parseDate, toDate, toTime } from '../date-utils';\nimport { Class, deepExtend, defined, getTemplate, InstanceObserver, last, limitValue, valueOrDefault } from '../common';\nimport { NAVIGATOR_AXIS, NAVIGATOR_PANE, DEFAULT_PANE } from './constants';\nconst ZOOM_ACCELERATION = 3;\nclass Navigator extends Class {\n  constructor(chart) {\n    super();\n    this.chart = chart;\n    const options = this.options = deepExtend({}, this.options, chart.options.navigator);\n    const select = options.select;\n    if (select) {\n      select.from = this.parseDate(select.from);\n      select.to = this.parseDate(select.to);\n    }\n    if (!defined(options.hint.visible)) {\n      options.hint.visible = options.visible;\n    }\n    this.chartObserver = new InstanceObserver(this, {\n      [DRAG]: '_drag',\n      [DRAG_END]: '_dragEnd',\n      [ZOOM]: '_zoom',\n      [ZOOM_END]: '_zoomEnd'\n    });\n    chart.addObserver(this.chartObserver);\n  }\n  parseDate(value) {\n    return parseDate(this.chart.chartService.intl, value);\n  }\n  clean() {\n    if (this.selection) {\n      this.selection.destroy();\n      this.selection = null;\n    }\n    if (this.hint) {\n      this.hint.destroy();\n      this.hint = null;\n    }\n  }\n  destroy() {\n    if (this.chart) {\n      this.chart.removeObserver(this.chartObserver);\n      delete this.chart;\n    }\n    this.clean();\n  }\n  redraw() {\n    this._redrawSelf();\n    this.initSelection();\n  }\n  initSelection() {\n    const {\n      chart,\n      options\n    } = this;\n    const axis = this.mainAxis();\n    const {\n      min,\n      max\n    } = axis.roundedRange();\n    const {\n      from,\n      to,\n      mousewheel\n    } = options.select;\n    const axisClone = clone(axis);\n    if (axis.categoriesCount() === 0) {\n      return;\n    }\n    this.clean();\n\n    // \"Freeze\" the selection axis position until the next redraw\n    axisClone.box = axis.box;\n    this.selection = new Selection(chart, axisClone, {\n      min: min,\n      max: max,\n      from: from || min,\n      to: to || max,\n      mousewheel: valueOrDefault(mousewheel, {\n        zoom: \"left\"\n      }),\n      visible: options.visible\n    }, new InstanceObserver(this, {\n      selectStart: '_selectStart',\n      select: '_select',\n      selectEnd: '_selectEnd'\n    }));\n    if (options.hint.visible) {\n      this.hint = new NavigatorHint(chart.element, chart.chartService, {\n        min: min,\n        max: max,\n        template: getTemplate(options.hint),\n        format: options.hint.format\n      });\n    }\n  }\n  setRange() {\n    const plotArea = this.chart._createPlotArea(true);\n    const axis = plotArea.namedCategoryAxes[NAVIGATOR_AXIS];\n    const {\n      min,\n      max\n    } = axis.roundedRange();\n    const select = this.options.select || {};\n    let from = select.from || min;\n    if (from < min) {\n      from = min;\n    }\n    let to = select.to || max;\n    if (to > max) {\n      to = max;\n    }\n    this.options.select = deepExtend({}, select, {\n      from: from,\n      to: to\n    });\n    this.filterAxes();\n  }\n  _redrawSelf(silent) {\n    const plotArea = this.chart._plotArea;\n    if (plotArea) {\n      plotArea.redraw(last(plotArea.panes), silent);\n    }\n  }\n  redrawSlaves() {\n    const chart = this.chart;\n    const plotArea = chart._plotArea;\n    const slavePanes = plotArea.panes.filter(pane => pane.options.name !== NAVIGATOR_PANE);\n\n    // Update the original series and categoryAxis before partial refresh.\n    plotArea.srcSeries = chart.options.series;\n    plotArea.options.categoryAxis = chart.options.categoryAxis;\n    plotArea.clearSeriesPointsCache();\n    plotArea.redraw(slavePanes);\n  }\n  _drag(e) {\n    const {\n      chart,\n      selection\n    } = this;\n    const coords = chart._eventCoordinates(e.originalEvent);\n    const navigatorAxis = this.mainAxis();\n    const naviRange = navigatorAxis.roundedRange();\n    const inNavigator = navigatorAxis.pane.box.containsPoint(coords);\n    const axis = chart._plotArea.categoryAxis;\n    const range = e.axisRanges[axis.options.name];\n    const select = this.options.select;\n    let duration;\n    if (!range || inNavigator || !selection) {\n      return;\n    }\n    if (select.from && select.to) {\n      duration = toTime(select.to) - toTime(select.from);\n    } else {\n      duration = toTime(selection.options.to) - toTime(selection.options.from);\n    }\n    const from = toDate(limitValue(toTime(range.min), naviRange.min, toTime(naviRange.max) - duration));\n    const to = toDate(limitValue(toTime(from) + duration, toTime(naviRange.min) + duration, naviRange.max));\n    this.options.select = {\n      from: from,\n      to: to\n    };\n    if (this.options.liveDrag) {\n      this.filterAxes();\n      this.redrawSlaves();\n    }\n    selection.set(from, to);\n    this.showHint(from, to);\n  }\n  _dragEnd() {\n    this.filterAxes();\n    this.filter();\n    this.redrawSlaves();\n    if (this.hint) {\n      this.hint.hide();\n    }\n  }\n  readSelection() {\n    const {\n      selection: {\n        options: {\n          from,\n          to\n        }\n      },\n      options: {\n        select\n      }\n    } = this;\n    select.from = from;\n    select.to = to;\n  }\n  filterAxes() {\n    const {\n      options: {\n        select = {}\n      },\n      chart\n    } = this;\n    const allAxes = chart.options.categoryAxis;\n    const {\n      from,\n      to\n    } = select;\n    for (let idx = 0; idx < allAxes.length; idx++) {\n      const axis = allAxes[idx];\n      if (axis.pane !== NAVIGATOR_PANE) {\n        axis.min = from;\n        axis.max = to;\n      }\n    }\n  }\n  filter() {\n    const {\n      chart,\n      options: {\n        select\n      }\n    } = this;\n    if (!chart.requiresHandlers([\"navigatorFilter\"])) {\n      return;\n    }\n    const mainAxis = this.mainAxis();\n    const args = {\n      from: select.from,\n      to: select.to\n    };\n    if (mainAxis.options.type !== 'category') {\n      const axisOptions = new DateCategoryAxis(deepExtend({\n        baseUnit: \"fit\"\n      }, chart.options.categoryAxis[0], {\n        categories: [select.from, select.to]\n      }), chart.chartService).options;\n      args.from = addDuration(axisOptions.min, -axisOptions.baseUnitStep, axisOptions.baseUnit);\n      args.to = addDuration(axisOptions.max, axisOptions.baseUnitStep, axisOptions.baseUnit);\n    }\n    this.chart.trigger(\"navigatorFilter\", args);\n  }\n  _zoom(e) {\n    const {\n      chart: {\n        _plotArea: {\n          categoryAxis: axis\n        }\n      },\n      selection,\n      options: {\n        select,\n        liveDrag\n      }\n    } = this;\n    const mainAxis = this.mainAxis();\n    let delta = e.delta;\n    if (!selection) {\n      return;\n    }\n    const fromIx = mainAxis.categoryIndex(selection.options.from);\n    const toIx = mainAxis.categoryIndex(selection.options.to);\n    const coords = this.chart._eventCoordinates(e.originalEvent);\n    e.originalEvent.preventDefault();\n    if (Math.abs(delta) > 1) {\n      delta *= ZOOM_ACCELERATION;\n    }\n    if (toIx - fromIx > 1) {\n      selection.zoom(delta, coords);\n      this.readSelection();\n    } else {\n      axis.options.min = select.from;\n      select.from = axis.scaleRange(-e.delta * this.chart._mousewheelZoomRate(), coords).min;\n    }\n    if (liveDrag) {\n      this.filterAxes();\n      this.redrawSlaves();\n    }\n    selection.set(select.from, select.to);\n    this.showHint(this.options.select.from, this.options.select.to);\n  }\n  _zoomEnd(e) {\n    this._dragEnd(e);\n  }\n  showHint(from, to) {\n    const plotArea = this.chart._plotArea;\n    if (this.hint) {\n      this.hint.show(from, to, plotArea.backgroundBox());\n    }\n  }\n  _selectStart(e) {\n    return this.chart._selectStart(e);\n  }\n  _select(e) {\n    this.showHint(e.from, e.to);\n    return this.chart._select(e);\n  }\n  _selectEnd(e) {\n    if (this.hint) {\n      this.hint.hide();\n    }\n    this.readSelection();\n    this.filterAxes();\n    this.filter();\n    this.redrawSlaves();\n    return this.chart._selectEnd(e);\n  }\n  mainAxis() {\n    const plotArea = this.chart._plotArea;\n    if (plotArea) {\n      return plotArea.namedCategoryAxes[NAVIGATOR_AXIS];\n    }\n  }\n  select(from, to) {\n    const select = this.options.select;\n    if (from && to) {\n      select.from = this.parseDate(from);\n      select.to = this.parseDate(to);\n      this.filterAxes();\n      this.filter();\n      this.redrawSlaves();\n      this.selection.set(from, to);\n    }\n    return {\n      from: select.from,\n      to: select.to\n    };\n  }\n  static setup(options = {}, themeOptions = {}) {\n    if (options.__navi) {\n      return;\n    }\n    options.__navi = true;\n    const naviOptions = deepExtend({}, themeOptions.navigator, options.navigator);\n    const panes = options.panes = [].concat(options.panes);\n    const paneOptions = deepExtend({}, naviOptions.pane, {\n      name: NAVIGATOR_PANE\n    });\n    if (!naviOptions.visible) {\n      paneOptions.visible = false;\n      paneOptions.height = 0.1;\n    }\n    if (options.navigator.position !== 'top') {\n      panes.push(paneOptions);\n    } else {\n      panes.unshift(paneOptions);\n    }\n    panes.forEach(pane => pane.name = pane.name || DEFAULT_PANE);\n    Navigator.attachAxes(options, naviOptions);\n    Navigator.attachSeries(options, naviOptions, themeOptions);\n  }\n  static attachAxes(options, naviOptions) {\n    const series = naviOptions.series || [];\n    const categoryAxes = options.categoryAxis = [].concat(options.categoryAxis);\n    const valueAxes = options.valueAxis = [].concat(options.valueAxis);\n    const allAxes = categoryAxes.concat(valueAxes);\n    allAxes.forEach(axis => axis.pane = axis.pane || DEFAULT_PANE);\n    const equallySpacedSeries = filterSeriesByType(series, EQUALLY_SPACED_SERIES);\n    const justifyAxis = equallySpacedSeries.length === 0;\n    const base = deepExtend({\n      type: \"date\",\n      pane: NAVIGATOR_PANE,\n      roundToBaseUnit: !justifyAxis,\n      justified: justifyAxis,\n      _collapse: false,\n      majorTicks: {\n        visible: true\n      },\n      tooltip: {\n        visible: false\n      },\n      labels: {\n        step: 1\n      },\n      autoBind: naviOptions.autoBindElements,\n      autoBaseUnitSteps: {\n        minutes: [1],\n        hours: [1, 2],\n        days: [1, 2],\n        weeks: [],\n        months: [1],\n        years: [1]\n      }\n    });\n    const user = naviOptions.categoryAxis;\n    categoryAxes.push(deepExtend({}, base, {\n      maxDateGroups: 200\n    }, user, {\n      name: NAVIGATOR_AXIS,\n      title: null,\n      baseUnit: \"fit\",\n      baseUnitStep: \"auto\",\n      labels: {\n        visible: false\n      },\n      majorTicks: {\n        visible: false\n      }\n    }), deepExtend({}, base, user, {\n      name: NAVIGATOR_AXIS + \"_labels\",\n      maxDateGroups: 20,\n      baseUnitStep: \"auto\",\n      labels: {\n        position: \"\"\n      },\n      plotBands: [],\n      autoBaseUnitSteps: {\n        minutes: []\n      },\n      _overlap: true\n    }), deepExtend({}, base, user, {\n      name: NAVIGATOR_AXIS + \"_ticks\",\n      maxDateGroups: 200,\n      majorTicks: {\n        width: 0.5\n      },\n      plotBands: [],\n      title: null,\n      labels: {\n        visible: false,\n        mirror: true\n      },\n      _overlap: true\n    }));\n    valueAxes.push(deepExtend({\n      name: NAVIGATOR_AXIS,\n      pane: NAVIGATOR_PANE,\n      majorGridLines: {\n        visible: false\n      },\n      visible: false\n    }, naviOptions.valueAxis));\n  }\n  static attachSeries(options, naviOptions, themeOptions) {\n    const series = options.series = options.series || [];\n    const navigatorSeries = [].concat(naviOptions.series || []);\n    const seriesColors = themeOptions.seriesColors;\n    const defaults = naviOptions.seriesDefaults;\n    for (let idx = 0; idx < navigatorSeries.length; idx++) {\n      series.push(deepExtend({\n        color: seriesColors[idx % seriesColors.length],\n        categoryField: naviOptions.dateField,\n        visibleInLegend: false,\n        tooltip: {\n          visible: false\n        }\n      }, defaults, navigatorSeries[idx], {\n        axis: NAVIGATOR_AXIS,\n        categoryAxis: NAVIGATOR_AXIS,\n        autoBind: naviOptions.autoBindElements\n      }));\n    }\n  }\n}\nfunction ClonedObject() {}\nfunction clone(obj) {\n  ClonedObject.prototype = obj;\n  return new ClonedObject();\n}\nexport default Navigator;","map":{"version":3,"names":["NavigatorHint","Selection","filterSeriesByType","DRAG","DRAG_END","EQUALLY_SPACED_SERIES","ZOOM","ZOOM_END","DateCategoryAxis","addDuration","parseDate","toDate","toTime","Class","deepExtend","defined","getTemplate","InstanceObserver","last","limitValue","valueOrDefault","NAVIGATOR_AXIS","NAVIGATOR_PANE","DEFAULT_PANE","ZOOM_ACCELERATION","Navigator","constructor","chart","options","navigator","select","from","to","hint","visible","chartObserver","addObserver","value","chartService","intl","clean","selection","destroy","removeObserver","redraw","_redrawSelf","initSelection","axis","mainAxis","min","max","roundedRange","mousewheel","axisClone","clone","categoriesCount","box","zoom","selectStart","selectEnd","element","template","format","setRange","plotArea","_createPlotArea","namedCategoryAxes","filterAxes","silent","_plotArea","panes","redrawSlaves","slavePanes","filter","pane","name","srcSeries","series","categoryAxis","clearSeriesPointsCache","_drag","e","coords","_eventCoordinates","originalEvent","navigatorAxis","naviRange","inNavigator","containsPoint","range","axisRanges","duration","liveDrag","set","showHint","_dragEnd","hide","readSelection","allAxes","idx","length","requiresHandlers","args","type","axisOptions","baseUnit","categories","baseUnitStep","trigger","_zoom","delta","fromIx","categoryIndex","toIx","preventDefault","Math","abs","scaleRange","_mousewheelZoomRate","_zoomEnd","show","backgroundBox","_selectStart","_select","_selectEnd","setup","themeOptions","__navi","naviOptions","concat","paneOptions","height","position","push","unshift","forEach","attachAxes","attachSeries","categoryAxes","valueAxes","valueAxis","equallySpacedSeries","justifyAxis","base","roundToBaseUnit","justified","_collapse","majorTicks","tooltip","labels","step","autoBind","autoBindElements","autoBaseUnitSteps","minutes","hours","days","weeks","months","years","user","maxDateGroups","title","plotBands","_overlap","width","mirror","majorGridLines","navigatorSeries","seriesColors","defaults","seriesDefaults","color","categoryField","dateField","visibleInLegend","ClonedObject","obj","prototype"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-charts/dist/es2015/stock/navigator.js"],"sourcesContent":["import NavigatorHint from './navigator-hint';\nimport { Selection, filterSeriesByType } from '../chart';\nimport { DRAG, DRAG_END, EQUALLY_SPACED_SERIES, ZOOM, ZOOM_END } from '../chart/constants';\nimport { DateCategoryAxis } from '../core';\nimport { addDuration, parseDate, toDate, toTime } from '../date-utils';\nimport { Class, deepExtend, defined, getTemplate, InstanceObserver, last, limitValue, valueOrDefault } from '../common';\nimport { NAVIGATOR_AXIS, NAVIGATOR_PANE, DEFAULT_PANE } from './constants';\n\nconst ZOOM_ACCELERATION = 3;\n\nclass Navigator extends Class {\n    constructor(chart) {\n        super();\n\n        this.chart = chart;\n        const options = this.options = deepExtend({}, this.options, chart.options.navigator);\n        const select = options.select;\n        if (select) {\n            select.from = this.parseDate(select.from);\n            select.to = this.parseDate(select.to);\n        }\n\n        if (!defined(options.hint.visible)) {\n            options.hint.visible = options.visible;\n        }\n\n        this.chartObserver = new InstanceObserver(this, {\n            [DRAG]: '_drag',\n            [DRAG_END]: '_dragEnd',\n            [ZOOM]: '_zoom',\n            [ZOOM_END]: '_zoomEnd'\n        });\n        chart.addObserver(this.chartObserver);\n    }\n\n    parseDate(value) {\n        return parseDate(this.chart.chartService.intl, value);\n    }\n\n    clean() {\n        if (this.selection) {\n            this.selection.destroy();\n            this.selection = null;\n        }\n\n        if (this.hint) {\n            this.hint.destroy();\n            this.hint = null;\n        }\n    }\n\n    destroy() {\n        if (this.chart) {\n            this.chart.removeObserver(this.chartObserver);\n            delete this.chart;\n        }\n\n        this.clean();\n    }\n\n    redraw() {\n        this._redrawSelf();\n        this.initSelection();\n    }\n\n    initSelection() {\n        const { chart, options } = this;\n        const axis = this.mainAxis();\n        const { min, max } = axis.roundedRange();\n        const { from, to, mousewheel } = options.select;\n        const axisClone = clone(axis);\n\n        if (axis.categoriesCount() === 0) {\n            return;\n        }\n\n        this.clean();\n\n        // \"Freeze\" the selection axis position until the next redraw\n        axisClone.box = axis.box;\n\n        this.selection = new Selection(chart, axisClone, {\n            min: min,\n            max: max,\n            from: from || min,\n            to: to || max,\n            mousewheel: valueOrDefault(mousewheel, { zoom: \"left\" }),\n            visible: options.visible\n        }, new InstanceObserver(this, {\n            selectStart: '_selectStart',\n            select: '_select',\n            selectEnd: '_selectEnd'\n        }));\n\n        if (options.hint.visible) {\n            this.hint = new NavigatorHint(chart.element, chart.chartService, {\n                min: min,\n                max: max,\n                template: getTemplate(options.hint),\n                format: options.hint.format\n            });\n        }\n    }\n\n    setRange() {\n        const plotArea = this.chart._createPlotArea(true);\n        const axis = plotArea.namedCategoryAxes[NAVIGATOR_AXIS];\n\n        const { min, max } = axis.roundedRange();\n\n        const select = this.options.select || {};\n        let from = select.from || min;\n        if (from < min) {\n            from = min;\n        }\n\n        let to = select.to || max;\n        if (to > max) {\n            to = max;\n        }\n\n        this.options.select = deepExtend({}, select, {\n            from: from,\n            to: to\n        });\n\n        this.filterAxes();\n    }\n\n    _redrawSelf(silent) {\n        const plotArea = this.chart._plotArea;\n\n        if (plotArea) {\n            plotArea.redraw(last(plotArea.panes), silent);\n        }\n    }\n\n    redrawSlaves() {\n        const chart = this.chart;\n        const plotArea = chart._plotArea;\n        const slavePanes = plotArea.panes.filter(pane => pane.options.name !== NAVIGATOR_PANE);\n\n        // Update the original series and categoryAxis before partial refresh.\n        plotArea.srcSeries = chart.options.series;\n        plotArea.options.categoryAxis = chart.options.categoryAxis;\n        plotArea.clearSeriesPointsCache();\n\n        plotArea.redraw(slavePanes);\n    }\n\n    _drag(e) {\n        const { chart, selection } = this;\n        const coords = chart._eventCoordinates(e.originalEvent);\n        const navigatorAxis = this.mainAxis();\n        const naviRange = navigatorAxis.roundedRange();\n        const inNavigator = navigatorAxis.pane.box.containsPoint(coords);\n        const axis = chart._plotArea.categoryAxis;\n        const range = e.axisRanges[axis.options.name];\n        const select = this.options.select;\n        let duration;\n\n        if (!range || inNavigator || !selection) {\n            return;\n        }\n\n        if (select.from && select.to) {\n            duration = toTime(select.to) - toTime(select.from);\n        } else {\n            duration = toTime(selection.options.to) - toTime(selection.options.from);\n        }\n\n        const from = toDate(limitValue(\n            toTime(range.min),\n            naviRange.min, toTime(naviRange.max) - duration\n        ));\n\n        const to = toDate(limitValue(\n            toTime(from) + duration,\n            toTime(naviRange.min) + duration, naviRange.max\n        ));\n\n        this.options.select = { from: from, to: to };\n\n        if (this.options.liveDrag) {\n            this.filterAxes();\n            this.redrawSlaves();\n        }\n\n        selection.set(from, to);\n\n        this.showHint(from, to);\n    }\n\n    _dragEnd() {\n        this.filterAxes();\n        this.filter();\n        this.redrawSlaves();\n\n        if (this.hint) {\n            this.hint.hide();\n        }\n    }\n\n    readSelection() {\n        const { selection: { options: { from, to } }, options: { select } } = this;\n\n        select.from = from;\n        select.to = to;\n    }\n\n    filterAxes() {\n        const { options: { select = { } }, chart } = this;\n        const allAxes = chart.options.categoryAxis;\n        const { from, to } = select;\n\n        for (let idx = 0; idx < allAxes.length; idx++) {\n            const axis = allAxes[idx];\n            if (axis.pane !== NAVIGATOR_PANE) {\n                axis.min = from;\n                axis.max = to;\n            }\n        }\n    }\n\n    filter() {\n        const { chart, options: { select } } = this;\n\n        if (!chart.requiresHandlers([ \"navigatorFilter\" ])) {\n            return;\n        }\n\n        const mainAxis = this.mainAxis();\n        const args = {\n            from: select.from,\n            to: select.to\n        };\n\n        if (mainAxis.options.type !== 'category') {\n            const axisOptions = new DateCategoryAxis(deepExtend({\n                baseUnit: \"fit\"\n            }, chart.options.categoryAxis[0], {\n                categories: [ select.from, select.to ]\n            }), chart.chartService).options;\n\n            args.from = addDuration(axisOptions.min, -axisOptions.baseUnitStep, axisOptions.baseUnit);\n            args.to = addDuration(axisOptions.max, axisOptions.baseUnitStep, axisOptions.baseUnit);\n        }\n\n        this.chart.trigger(\"navigatorFilter\", args);\n    }\n\n    _zoom(e) {\n        const { chart: { _plotArea: { categoryAxis: axis } }, selection, options: { select, liveDrag } } = this;\n        const mainAxis = this.mainAxis();\n        let delta = e.delta;\n\n        if (!selection) {\n            return;\n        }\n\n        const fromIx = mainAxis.categoryIndex(selection.options.from);\n        const toIx = mainAxis.categoryIndex(selection.options.to);\n        const coords = this.chart._eventCoordinates(e.originalEvent);\n\n        e.originalEvent.preventDefault();\n\n        if (Math.abs(delta) > 1) {\n            delta *= ZOOM_ACCELERATION;\n        }\n\n        if (toIx - fromIx > 1) {\n            selection.zoom(delta, coords);\n            this.readSelection();\n        } else {\n            axis.options.min = select.from;\n            select.from = axis.scaleRange(-e.delta * this.chart._mousewheelZoomRate(), coords).min;\n        }\n\n        if (liveDrag) {\n            this.filterAxes();\n            this.redrawSlaves();\n        }\n\n        selection.set(select.from, select.to);\n\n        this.showHint(this.options.select.from, this.options.select.to);\n    }\n\n    _zoomEnd(e) {\n        this._dragEnd(e);\n    }\n\n    showHint(from, to) {\n        const plotArea = this.chart._plotArea;\n\n        if (this.hint) {\n            this.hint.show(from, to, plotArea.backgroundBox());\n        }\n    }\n\n    _selectStart(e) {\n        return this.chart._selectStart(e);\n    }\n\n    _select(e) {\n        this.showHint(e.from, e.to);\n\n        return this.chart._select(e);\n    }\n\n    _selectEnd(e) {\n        if (this.hint) {\n            this.hint.hide();\n        }\n\n        this.readSelection();\n        this.filterAxes();\n        this.filter();\n        this.redrawSlaves();\n\n        return this.chart._selectEnd(e);\n    }\n\n    mainAxis() {\n        const plotArea = this.chart._plotArea;\n\n        if (plotArea) {\n            return plotArea.namedCategoryAxes[NAVIGATOR_AXIS];\n        }\n    }\n\n    select(from, to) {\n        const select = this.options.select;\n\n        if (from && to) {\n            select.from = this.parseDate(from);\n            select.to = this.parseDate(to);\n\n            this.filterAxes();\n            this.filter();\n            this.redrawSlaves();\n\n            this.selection.set(from, to);\n        }\n\n        return {\n            from: select.from,\n            to: select.to\n        };\n    }\n\n    static setup(options = {}, themeOptions = {}) {\n        if (options.__navi) {\n            return;\n        }\n        options.__navi = true;\n\n        const naviOptions = deepExtend({}, themeOptions.navigator, options.navigator);\n        const panes = options.panes = [].concat(options.panes);\n        const paneOptions = deepExtend({}, naviOptions.pane, { name: NAVIGATOR_PANE });\n\n        if (!naviOptions.visible) {\n            paneOptions.visible = false;\n            paneOptions.height = 0.1;\n        }\n\n        if (options.navigator.position !== 'top') {\n            panes.push(paneOptions);\n        } else {\n            panes.unshift(paneOptions);\n        }\n\n        panes.forEach(pane => pane.name = pane.name || DEFAULT_PANE);\n\n        Navigator.attachAxes(options, naviOptions);\n        Navigator.attachSeries(options, naviOptions, themeOptions);\n    }\n\n    static attachAxes(options, naviOptions) {\n        const series = naviOptions.series || [];\n        const categoryAxes = options.categoryAxis = [].concat(options.categoryAxis);\n        const valueAxes = options.valueAxis = [].concat(options.valueAxis);\n        const allAxes = categoryAxes.concat(valueAxes);\n        allAxes.forEach(axis => axis.pane = axis.pane || DEFAULT_PANE);\n\n        const equallySpacedSeries = filterSeriesByType(series, EQUALLY_SPACED_SERIES);\n        const justifyAxis = equallySpacedSeries.length === 0;\n\n        const base = deepExtend({\n            type: \"date\",\n            pane: NAVIGATOR_PANE,\n            roundToBaseUnit: !justifyAxis,\n            justified: justifyAxis,\n            _collapse: false,\n            majorTicks: { visible: true },\n            tooltip: { visible: false },\n            labels: { step: 1 },\n            autoBind: naviOptions.autoBindElements,\n            autoBaseUnitSteps: {\n                minutes: [ 1 ],\n                hours: [ 1, 2 ],\n                days: [ 1, 2 ],\n                weeks: [],\n                months: [ 1 ],\n                years: [ 1 ]\n            }\n        });\n        const user = naviOptions.categoryAxis;\n\n        categoryAxes.push(\n            deepExtend({}, base, {\n                maxDateGroups: 200\n            }, user, {\n                name: NAVIGATOR_AXIS,\n                title: null,\n                baseUnit: \"fit\",\n                baseUnitStep: \"auto\",\n                labels: { visible: false },\n                majorTicks: { visible: false }\n            }), deepExtend({}, base, user, {\n                name: NAVIGATOR_AXIS + \"_labels\",\n                maxDateGroups: 20,\n                baseUnitStep: \"auto\",\n                labels: { position: \"\" },\n                plotBands: [],\n                autoBaseUnitSteps: {\n                    minutes: []\n                },\n                _overlap: true\n            }), deepExtend({}, base, user, {\n                name: NAVIGATOR_AXIS + \"_ticks\",\n                maxDateGroups: 200,\n                majorTicks: {\n                    width: 0.5\n                },\n                plotBands: [],\n                title: null,\n                labels: { visible: false, mirror: true },\n                _overlap: true\n            })\n        );\n\n        valueAxes.push(deepExtend({\n            name: NAVIGATOR_AXIS,\n            pane: NAVIGATOR_PANE,\n            majorGridLines: {\n                visible: false\n            },\n            visible: false\n        }, naviOptions.valueAxis));\n    }\n\n    static attachSeries(options, naviOptions, themeOptions) {\n        const series = options.series = options.series || [];\n        const navigatorSeries = [].concat(naviOptions.series || []);\n        const seriesColors = themeOptions.seriesColors;\n        const defaults = naviOptions.seriesDefaults;\n\n        for (let idx = 0; idx < navigatorSeries.length; idx++) {\n            series.push(\n                deepExtend({\n                    color: seriesColors[idx % seriesColors.length],\n                    categoryField: naviOptions.dateField,\n                    visibleInLegend: false,\n                    tooltip: {\n                        visible: false\n                    }\n                }, defaults, navigatorSeries[idx], {\n                    axis: NAVIGATOR_AXIS,\n                    categoryAxis: NAVIGATOR_AXIS,\n                    autoBind: naviOptions.autoBindElements\n                })\n            );\n        }\n    }\n}\n\nfunction ClonedObject() { }\nfunction clone(obj) {\n    ClonedObject.prototype = obj;\n    return new ClonedObject();\n}\n\nexport default Navigator;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}