{"ast":null,"code":"import PathNode from './path-node';\nimport { createPromise } from '../util';\nclass ImageNode extends PathNode {\n  constructor(srcElement, cors) {\n    super(srcElement);\n    this.onLoad = this.onLoad.bind(this);\n    this.onError = this.onError.bind(this);\n    this.loading = createPromise();\n    const img = this.img = new Image();\n    const src = srcElement.src();\n    if (cors && !/^data:/i.test(src)) {\n      img.crossOrigin = cors;\n    }\n    if (src) {\n      img.src = src;\n    }\n    if (img.complete) {\n      this.onLoad();\n    } else {\n      img.onload = this.onLoad;\n      img.onerror = this.onError;\n    }\n  }\n  renderTo(ctx) {\n    if (this.loading.state() === \"resolved\") {\n      ctx.save();\n      this.setTransform(ctx);\n      this.setClip(ctx);\n      this.drawImage(ctx);\n      ctx.restore();\n    }\n  }\n  optionsChange(e) {\n    if (e.field === \"src\") {\n      this.loading = createPromise();\n      this.img.src = this.srcElement.src();\n    } else {\n      super.optionsChange(e);\n    }\n  }\n  onLoad() {\n    this.loading.resolve();\n    this.invalidate();\n  }\n  onError() {\n    this.loading.reject(new Error(\"Unable to load image '\" + this.img.src + \"'. Check for connectivity and verify CORS headers.\"));\n  }\n  drawImage(ctx) {\n    const rect = this.srcElement.rect();\n    const topLeft = rect.topLeft();\n    ctx.drawImage(this.img, topLeft.x, topLeft.y, rect.width(), rect.height());\n  }\n}\nexport default ImageNode;","map":{"version":3,"names":["PathNode","createPromise","ImageNode","constructor","srcElement","cors","onLoad","bind","onError","loading","img","Image","src","test","crossOrigin","complete","onload","onerror","renderTo","ctx","state","save","setTransform","setClip","drawImage","restore","optionsChange","e","field","resolve","invalidate","reject","Error","rect","topLeft","x","y","width","height"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-drawing/dist/es2015/canvas/image-node.js"],"sourcesContent":["import PathNode from './path-node';\nimport { createPromise } from '../util';\n\nclass ImageNode extends PathNode {\n    constructor(srcElement, cors) {\n        super(srcElement);\n\n        this.onLoad = this.onLoad.bind(this);\n        this.onError = this.onError.bind(this);\n\n        this.loading = createPromise();\n\n        const img = this.img = new Image();\n        const src = srcElement.src();\n\n        if (cors && !(/^data:/i.test(src))) {\n            img.crossOrigin = cors;\n        }\n\n        if (src) {\n            img.src = src;\n        }\n\n        if (img.complete) {\n            this.onLoad();\n        } else {\n            img.onload = this.onLoad;\n            img.onerror = this.onError;\n        }\n    }\n\n    renderTo(ctx) {\n        if (this.loading.state() === \"resolved\") {\n            ctx.save();\n\n            this.setTransform(ctx);\n            this.setClip(ctx);\n\n            this.drawImage(ctx);\n\n            ctx.restore();\n        }\n    }\n\n    optionsChange(e) {\n        if (e.field === \"src\") {\n            this.loading = createPromise();\n            this.img.src = this.srcElement.src();\n        } else {\n            super.optionsChange(e);\n        }\n    }\n\n    onLoad() {\n        this.loading.resolve();\n        this.invalidate();\n    }\n\n    onError() {\n        this.loading.reject(new Error(\n            \"Unable to load image '\" + this.img.src +\n            \"'. Check for connectivity and verify CORS headers.\"\n        ));\n    }\n\n    drawImage(ctx) {\n        const rect = this.srcElement.rect();\n        const topLeft = rect.topLeft();\n\n        ctx.drawImage(\n            this.img, topLeft.x, topLeft.y, rect.width(), rect.height()\n        );\n    }\n}\n\nexport default ImageNode;\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,aAAa;AAClC,SAASC,aAAa,QAAQ,SAAS;AAEvC,MAAMC,SAAS,SAASF,QAAQ,CAAC;EAC7BG,WAAWA,CAACC,UAAU,EAAEC,IAAI,EAAE;IAC1B,KAAK,CAACD,UAAU,CAAC;IAEjB,IAAI,CAACE,MAAM,GAAG,IAAI,CAACA,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC;IACpC,IAAI,CAACC,OAAO,GAAG,IAAI,CAACA,OAAO,CAACD,IAAI,CAAC,IAAI,CAAC;IAEtC,IAAI,CAACE,OAAO,GAAGR,aAAa,CAAC,CAAC;IAE9B,MAAMS,GAAG,GAAG,IAAI,CAACA,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;IAClC,MAAMC,GAAG,GAAGR,UAAU,CAACQ,GAAG,CAAC,CAAC;IAE5B,IAAIP,IAAI,IAAI,CAAE,SAAS,CAACQ,IAAI,CAACD,GAAG,CAAE,EAAE;MAChCF,GAAG,CAACI,WAAW,GAAGT,IAAI;IAC1B;IAEA,IAAIO,GAAG,EAAE;MACLF,GAAG,CAACE,GAAG,GAAGA,GAAG;IACjB;IAEA,IAAIF,GAAG,CAACK,QAAQ,EAAE;MACd,IAAI,CAACT,MAAM,CAAC,CAAC;IACjB,CAAC,MAAM;MACHI,GAAG,CAACM,MAAM,GAAG,IAAI,CAACV,MAAM;MACxBI,GAAG,CAACO,OAAO,GAAG,IAAI,CAACT,OAAO;IAC9B;EACJ;EAEAU,QAAQA,CAACC,GAAG,EAAE;IACV,IAAI,IAAI,CAACV,OAAO,CAACW,KAAK,CAAC,CAAC,KAAK,UAAU,EAAE;MACrCD,GAAG,CAACE,IAAI,CAAC,CAAC;MAEV,IAAI,CAACC,YAAY,CAACH,GAAG,CAAC;MACtB,IAAI,CAACI,OAAO,CAACJ,GAAG,CAAC;MAEjB,IAAI,CAACK,SAAS,CAACL,GAAG,CAAC;MAEnBA,GAAG,CAACM,OAAO,CAAC,CAAC;IACjB;EACJ;EAEAC,aAAaA,CAACC,CAAC,EAAE;IACb,IAAIA,CAAC,CAACC,KAAK,KAAK,KAAK,EAAE;MACnB,IAAI,CAACnB,OAAO,GAAGR,aAAa,CAAC,CAAC;MAC9B,IAAI,CAACS,GAAG,CAACE,GAAG,GAAG,IAAI,CAACR,UAAU,CAACQ,GAAG,CAAC,CAAC;IACxC,CAAC,MAAM;MACH,KAAK,CAACc,aAAa,CAACC,CAAC,CAAC;IAC1B;EACJ;EAEArB,MAAMA,CAAA,EAAG;IACL,IAAI,CAACG,OAAO,CAACoB,OAAO,CAAC,CAAC;IACtB,IAAI,CAACC,UAAU,CAAC,CAAC;EACrB;EAEAtB,OAAOA,CAAA,EAAG;IACN,IAAI,CAACC,OAAO,CAACsB,MAAM,CAAC,IAAIC,KAAK,CACzB,wBAAwB,GAAG,IAAI,CAACtB,GAAG,CAACE,GAAG,GACvC,oDACJ,CAAC,CAAC;EACN;EAEAY,SAASA,CAACL,GAAG,EAAE;IACX,MAAMc,IAAI,GAAG,IAAI,CAAC7B,UAAU,CAAC6B,IAAI,CAAC,CAAC;IACnC,MAAMC,OAAO,GAAGD,IAAI,CAACC,OAAO,CAAC,CAAC;IAE9Bf,GAAG,CAACK,SAAS,CACT,IAAI,CAACd,GAAG,EAAEwB,OAAO,CAACC,CAAC,EAAED,OAAO,CAACE,CAAC,EAAEH,IAAI,CAACI,KAAK,CAAC,CAAC,EAAEJ,IAAI,CAACK,MAAM,CAAC,CAC9D,CAAC;EACL;AACJ;AAEA,eAAepC,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}