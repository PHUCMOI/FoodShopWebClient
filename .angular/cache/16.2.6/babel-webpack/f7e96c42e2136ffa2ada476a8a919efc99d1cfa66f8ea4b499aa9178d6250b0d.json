{"ast":null,"code":"import { Encoding } from './encoding';\nimport inArray from '../../common/in-array';\nconst numberRegex = /^\\d+$/;\nconst extend = Object.assign;\nexport class Postnet extends Encoding {\n  initProperties() {\n    super.initProperties();\n    extend(this, {\n      name: \"Postnet\",\n      START: \"2\",\n      VALID_CODE_LENGTHS: [5, 9, 11],\n      DIGIT_SEPARATOR: \"-\",\n      characterMap: [\"22111\", \"11122\", \"11212\", \"11221\", \"12112\", \"12121\", \"12211\", \"21112\", \"21121\", \"21211\"]\n    });\n  }\n  initValue(value, width, height) {\n    this.height = height;\n    this.width = width;\n    this.baseHeight = height / 2;\n    this.value = value.replace(new RegExp(this.DIGIT_SEPARATOR, \"g\"), \"\");\n    this.pattern = [];\n    this.validate(this.value);\n    this.checkSum = 0;\n    this.setBaseUnit();\n  }\n  addData() {\n    const value = this.value;\n    this.addPattern(this.START);\n    for (let i = 0; i < value.length; i++) {\n      this.addCharacter(value.charAt(i));\n    }\n    if (this.options.addCheckSum) {\n      this.addCheckSum();\n    }\n    this.addPattern(this.START);\n    this.pattern.pop();\n  }\n  addCharacter(character) {\n    const pattern = this.characterMap[character];\n    this.checkSum += parseInt(character, 10);\n    this.addPattern(pattern);\n  }\n  addCheckSum() {\n    this.checksum = (10 - this.checkSum % 10) % 10;\n    this.addCharacter(this.checksum);\n  }\n  setBaseUnit() {\n    const startStopLength = 3;\n    this.baseUnit = this.width / ((this.value.length + 1) * 10 + startStopLength + this.quietZoneLength);\n  }\n  validate(value) {\n    if (!numberRegex.test(value)) {\n      this.invalidCharacterError(value.match(/[^0-9]/)[0]);\n    }\n    if (!inArray(value.length, this.VALID_CODE_LENGTHS)) {\n      throw new Error(\"Invalid value length. Valid lengths for the Postnet symbology are \" + this.VALID_CODE_LENGTHS.join(\",\") + \".\");\n    }\n  }\n  addPattern(pattern) {\n    let y1;\n    for (let i = 0; i < pattern.length; i++) {\n      y1 = this.height - this.baseHeight * pattern.charAt(i);\n      this.pattern.push({\n        width: 1,\n        y1: y1,\n        y2: this.height\n      });\n      this.pattern.push(1);\n    }\n  }\n}","map":{"version":3,"names":["Encoding","inArray","numberRegex","extend","Object","assign","Postnet","initProperties","name","START","VALID_CODE_LENGTHS","DIGIT_SEPARATOR","characterMap","initValue","value","width","height","baseHeight","replace","RegExp","pattern","validate","checkSum","setBaseUnit","addData","addPattern","i","length","addCharacter","charAt","options","addCheckSum","pop","character","parseInt","checksum","startStopLength","baseUnit","quietZoneLength","test","invalidCharacterError","match","Error","join","y1","push","y2"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-charts/dist/es2015/barcode/encodings/postnet.js"],"sourcesContent":["import { Encoding } from './encoding';\nimport inArray from '../../common/in-array';\n\nconst numberRegex = /^\\d+$/;\nconst extend = Object.assign;\n\nexport class Postnet extends Encoding {\n    initProperties() {\n        super.initProperties();\n\n        extend(this, {\n            name: \"Postnet\",\n            START: \"2\",\n            VALID_CODE_LENGTHS: [5, 9, 11],\n            DIGIT_SEPARATOR: \"-\",\n            characterMap: [\"22111\", \"11122\", \"11212\", \"11221\", \"12112\", \"12121\", \"12211\", \"21112\", \"21121\", \"21211\"]\n        });\n    }\n\n    initValue(value, width, height) {\n        this.height = height;\n        this.width = width;\n        this.baseHeight = height / 2;\n        this.value = value.replace(new RegExp(this.DIGIT_SEPARATOR, \"g\"), \"\");\n        this.pattern = [];\n        this.validate(this.value);\n        this.checkSum = 0;\n        this.setBaseUnit();\n    }\n\n    addData() {\n        const value = this.value;\n\n        this.addPattern(this.START);\n\n        for (let i = 0; i < value.length; i++) {\n            this.addCharacter(value.charAt(i));\n        }\n\n        if (this.options.addCheckSum) {\n            this.addCheckSum();\n        }\n\n        this.addPattern(this.START);\n        this.pattern.pop();\n    }\n\n    addCharacter(character) {\n        const pattern = this.characterMap[character];\n        this.checkSum += parseInt(character, 10);\n        this.addPattern(pattern);\n    }\n\n    addCheckSum() {\n        this.checksum = (10 - (this.checkSum % 10)) % 10;\n        this.addCharacter(this.checksum);\n    }\n\n    setBaseUnit() {\n        const startStopLength = 3;\n\n        this.baseUnit = this.width / ((this.value.length + 1) * 10 + startStopLength + this.quietZoneLength);\n    }\n\n    validate(value) {\n        if (!numberRegex.test(value)) {\n            this.invalidCharacterError(value.match(/[^0-9]/)[0]);\n        }\n\n        if (!inArray(value.length, this.VALID_CODE_LENGTHS)) {\n            throw new Error(\"Invalid value length. Valid lengths for the Postnet symbology are \" + this.VALID_CODE_LENGTHS.join(\",\") + \".\");\n        }\n    }\n\n    addPattern(pattern) {\n        let y1;\n\n        for (let i = 0; i < pattern.length; i++) {\n            y1 = this.height - this.baseHeight * pattern.charAt(i);\n            this.pattern.push({ width: 1, y1: y1, y2: this.height });\n            this.pattern.push(1);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}