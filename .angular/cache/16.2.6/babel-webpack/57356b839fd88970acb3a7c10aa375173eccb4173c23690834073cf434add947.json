{"ast":null,"code":"import Group from './group';\nimport Size from '../geometry/size';\nimport Rect from '../geometry/rect';\nimport Point from '../geometry/point';\nimport createTransform from '../geometry/transform';\nimport translateToPoint from '../alignment/translate-to-point';\nimport alignStart from '../alignment/align-start';\nimport alignStartReverse from '../alignment/align-start-reverse';\nconst DEFAULT_OPTIONS = {\n  alignContent: \"start\",\n  justifyContent: \"start\",\n  alignItems: \"start\",\n  spacing: 0,\n  orientation: \"horizontal\",\n  lineSpacing: 0,\n  wrap: true,\n  revers: false\n};\nconst forEach = (elements, callback) => {\n  elements.forEach(callback);\n};\nconst forEachReverse = (elements, callback) => {\n  const length = elements.length;\n  for (let idx = length - 1; idx >= 0; idx--) {\n    callback(elements[idx], idx);\n  }\n};\nclass Layout extends Group {\n  constructor(rect, options) {\n    super(Object.assign({}, DEFAULT_OPTIONS, options));\n    this._rect = rect;\n    this._fieldMap = {};\n  }\n  rect(value) {\n    if (value) {\n      this._rect = value;\n      return this;\n    }\n    return this._rect;\n  }\n  _initMap() {\n    const options = this.options;\n    const fieldMap = this._fieldMap;\n    if (options.orientation === \"horizontal\") {\n      fieldMap.sizeField = \"width\";\n      fieldMap.groupsSizeField = \"height\";\n      fieldMap.groupAxis = \"x\";\n      fieldMap.groupsAxis = \"y\";\n    } else {\n      fieldMap.sizeField = \"height\";\n      fieldMap.groupsSizeField = \"width\";\n      fieldMap.groupAxis = \"y\";\n      fieldMap.groupsAxis = \"x\";\n    }\n    if (options.reverse) {\n      this.forEach = forEachReverse;\n      this.justifyAlign = alignStartReverse;\n    } else {\n      this.forEach = forEach;\n      this.justifyAlign = alignStart;\n    }\n  }\n  reflow() {\n    if (!this._rect || this.children.length === 0) {\n      return;\n    }\n    this._initMap();\n    if (this.options.transform) {\n      this.transform(null);\n    }\n    const options = this.options;\n    const rect = this._rect;\n    const {\n      groups,\n      groupsSize\n    } = this._initGroups();\n    const {\n      sizeField,\n      groupsSizeField,\n      groupAxis,\n      groupsAxis\n    } = this._fieldMap;\n    const groupOrigin = new Point();\n    const elementOrigin = new Point();\n    const size = new Size();\n    let groupStart = alignStart(groupsSize, rect, options.alignContent, groupsAxis, groupsSizeField);\n    let elementStart, group, groupBox;\n    const arrangeElements = (bbox, idx) => {\n      const element = group.elements[idx];\n      elementOrigin[groupAxis] = elementStart;\n      elementOrigin[groupsAxis] = alignStart(bbox.size[groupsSizeField], groupBox, options.alignItems, groupsAxis, groupsSizeField);\n      translateToPoint(elementOrigin, bbox, element);\n      elementStart += bbox.size[sizeField] + options.spacing;\n    };\n    for (let groupIdx = 0; groupIdx < groups.length; groupIdx++) {\n      group = groups[groupIdx];\n      groupOrigin[groupAxis] = elementStart = this.justifyAlign(group.size, rect, options.justifyContent, groupAxis, sizeField);\n      groupOrigin[groupsAxis] = groupStart;\n      size[sizeField] = group.size;\n      size[groupsSizeField] = group.lineSize;\n      groupBox = new Rect(groupOrigin, size);\n      this.forEach(group.bboxes, arrangeElements);\n      groupStart += group.lineSize + options.lineSpacing;\n    }\n    if (!options.wrap && group.size > rect.size[sizeField]) {\n      const scale = rect.size[sizeField] / groupBox.size[sizeField];\n      const scaledStart = groupBox.topLeft().scale(scale, scale);\n      const scaledSize = groupBox.size[groupsSizeField] * scale;\n      const newStart = alignStart(scaledSize, rect, options.alignContent, groupsAxis, groupsSizeField);\n      const transform = createTransform();\n      if (groupAxis === \"x\") {\n        transform.translate(rect.origin.x - scaledStart.x, newStart - scaledStart.y);\n      } else {\n        transform.translate(newStart - scaledStart.x, rect.origin.y - scaledStart.y);\n      }\n      transform.scale(scale, scale);\n      this.transform(transform);\n    }\n  }\n  _initGroups() {\n    const {\n      options,\n      children\n    } = this;\n    const {\n      lineSpacing,\n      wrap,\n      spacing\n    } = options;\n    const sizeField = this._fieldMap.sizeField;\n    let group = this._newGroup();\n    const groups = [];\n    const addGroup = function () {\n      groups.push(group);\n      groupsSize += group.lineSize + lineSpacing;\n    };\n    let groupsSize = -lineSpacing;\n    for (let idx = 0; idx < children.length; idx++) {\n      let element = children[idx];\n      let bbox = children[idx].clippedBBox();\n      if (element.visible() && bbox) {\n        if (wrap && group.size + bbox.size[sizeField] + spacing > this._rect.size[sizeField]) {\n          if (group.bboxes.length === 0) {\n            this._addToGroup(group, bbox, element);\n            addGroup();\n            group = this._newGroup();\n          } else {\n            addGroup();\n            group = this._newGroup();\n            this._addToGroup(group, bbox, element);\n          }\n        } else {\n          this._addToGroup(group, bbox, element);\n        }\n      }\n    }\n    if (group.bboxes.length) {\n      addGroup();\n    }\n    return {\n      groups: groups,\n      groupsSize: groupsSize\n    };\n  }\n  _addToGroup(group, bbox, element) {\n    group.size += bbox.size[this._fieldMap.sizeField] + this.options.spacing;\n    group.lineSize = Math.max(bbox.size[this._fieldMap.groupsSizeField], group.lineSize);\n    group.bboxes.push(bbox);\n    group.elements.push(element);\n  }\n  _newGroup() {\n    return {\n      lineSize: 0,\n      size: -this.options.spacing,\n      bboxes: [],\n      elements: []\n    };\n  }\n}\nexport default Layout;","map":{"version":3,"names":["Group","Size","Rect","Point","createTransform","translateToPoint","alignStart","alignStartReverse","DEFAULT_OPTIONS","alignContent","justifyContent","alignItems","spacing","orientation","lineSpacing","wrap","revers","forEach","elements","callback","forEachReverse","length","idx","Layout","constructor","rect","options","Object","assign","_rect","_fieldMap","value","_initMap","fieldMap","sizeField","groupsSizeField","groupAxis","groupsAxis","reverse","justifyAlign","reflow","children","transform","groups","groupsSize","_initGroups","groupOrigin","elementOrigin","size","groupStart","elementStart","group","groupBox","arrangeElements","bbox","element","groupIdx","lineSize","bboxes","scale","scaledStart","topLeft","scaledSize","newStart","translate","origin","x","y","_newGroup","addGroup","push","clippedBBox","visible","_addToGroup","Math","max"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-drawing/dist/es2015/shapes/layout.js"],"sourcesContent":["import Group from './group';\nimport Size from '../geometry/size';\nimport Rect from '../geometry/rect';\nimport Point from '../geometry/point';\nimport createTransform from '../geometry/transform';\nimport translateToPoint from '../alignment/translate-to-point';\nimport alignStart from '../alignment/align-start';\nimport alignStartReverse from '../alignment/align-start-reverse';\n\nconst DEFAULT_OPTIONS = {\n    alignContent: \"start\",\n    justifyContent: \"start\",\n    alignItems: \"start\",\n    spacing: 0,\n    orientation: \"horizontal\",\n    lineSpacing: 0,\n    wrap: true,\n    revers: false\n};\n\nconst forEach = (elements, callback) => {\n    elements.forEach(callback);\n};\n\nconst forEachReverse = (elements, callback) => {\n    const length = elements.length;\n\n    for (let idx = length - 1; idx >= 0; idx--) {\n        callback(elements[idx], idx);\n    }\n};\n\nclass Layout extends Group {\n\n    constructor(rect, options) {\n        super(Object.assign({}, DEFAULT_OPTIONS, options));\n        this._rect = rect;\n        this._fieldMap = {};\n    }\n\n    rect(value) {\n        if (value) {\n            this._rect = value;\n            return this;\n        }\n\n        return this._rect;\n    }\n\n    _initMap() {\n        const options = this.options;\n        const fieldMap = this._fieldMap;\n        if (options.orientation === \"horizontal\") {\n            fieldMap.sizeField = \"width\";\n            fieldMap.groupsSizeField = \"height\";\n            fieldMap.groupAxis = \"x\";\n            fieldMap.groupsAxis = \"y\";\n        } else {\n            fieldMap.sizeField = \"height\";\n            fieldMap.groupsSizeField = \"width\";\n            fieldMap.groupAxis = \"y\";\n            fieldMap.groupsAxis = \"x\";\n        }\n\n        if (options.reverse) {\n            this.forEach = forEachReverse;\n            this.justifyAlign = alignStartReverse;\n        } else {\n            this.forEach = forEach;\n            this.justifyAlign = alignStart;\n        }\n    }\n\n    reflow() {\n        if (!this._rect || this.children.length === 0) {\n            return;\n        }\n        this._initMap();\n\n        if (this.options.transform) {\n            this.transform(null);\n        }\n\n        const options = this.options;\n        const rect = this._rect;\n        const { groups, groupsSize } = this._initGroups();\n        const { sizeField, groupsSizeField, groupAxis, groupsAxis } = this._fieldMap;\n        const groupOrigin = new Point();\n        const elementOrigin = new Point();\n        const size = new Size();\n        let groupStart = alignStart(groupsSize, rect, options.alignContent, groupsAxis, groupsSizeField);\n        let elementStart, group, groupBox;\n\n        const arrangeElements = (bbox, idx) => {\n            const element = group.elements[idx];\n\n            elementOrigin[groupAxis] = elementStart;\n            elementOrigin[groupsAxis] = alignStart(bbox.size[groupsSizeField], groupBox, options.alignItems, groupsAxis, groupsSizeField);\n            translateToPoint(elementOrigin, bbox, element);\n            elementStart += bbox.size[sizeField] + options.spacing;\n        };\n\n        for (let groupIdx = 0; groupIdx < groups.length; groupIdx++) {\n            group = groups[groupIdx];\n            groupOrigin[groupAxis] = elementStart = this.justifyAlign(group.size, rect, options.justifyContent, groupAxis, sizeField);\n            groupOrigin[groupsAxis] = groupStart;\n            size[sizeField] = group.size;\n            size[groupsSizeField] = group.lineSize;\n            groupBox = new Rect(groupOrigin, size);\n            this.forEach(group.bboxes, arrangeElements);\n\n            groupStart += group.lineSize + options.lineSpacing;\n        }\n\n        if (!options.wrap && group.size > rect.size[sizeField]) {\n            const scale = rect.size[sizeField] / groupBox.size[sizeField];\n            const scaledStart = groupBox.topLeft().scale(scale, scale);\n            const scaledSize = groupBox.size[groupsSizeField] * scale;\n            const newStart = alignStart(scaledSize, rect, options.alignContent, groupsAxis, groupsSizeField);\n            const transform = createTransform();\n            if (groupAxis === \"x\") {\n                transform.translate(rect.origin.x - scaledStart.x, newStart - scaledStart.y);\n            } else {\n                transform.translate(newStart - scaledStart.x, rect.origin.y - scaledStart.y);\n            }\n            transform.scale(scale, scale);\n\n            this.transform(transform);\n        }\n    }\n\n    _initGroups() {\n        const { options, children } = this;\n        const { lineSpacing, wrap, spacing } = options;\n        const sizeField = this._fieldMap.sizeField;\n        let group = this._newGroup();\n        const groups = [];\n        const addGroup = function() {\n            groups.push(group);\n            groupsSize += group.lineSize + lineSpacing;\n        };\n        let groupsSize = -lineSpacing;\n\n        for (let idx = 0; idx < children.length; idx++) {\n            let element = children[idx];\n            let bbox = children[idx].clippedBBox();\n            if (element.visible() && bbox) {\n                if (wrap && group.size + bbox.size[sizeField] + spacing > this._rect.size[sizeField]) {\n                    if (group.bboxes.length === 0) {\n                        this._addToGroup(group, bbox, element);\n                        addGroup();\n                        group = this._newGroup();\n                    } else {\n                        addGroup();\n                        group = this._newGroup();\n                        this._addToGroup(group, bbox, element);\n                    }\n                } else {\n                    this._addToGroup(group, bbox, element);\n                }\n            }\n        }\n\n        if (group.bboxes.length) {\n            addGroup();\n        }\n\n        return {\n            groups: groups,\n            groupsSize: groupsSize\n        };\n    }\n\n    _addToGroup(group, bbox, element) {\n        group.size += bbox.size[this._fieldMap.sizeField] + this.options.spacing;\n        group.lineSize = Math.max(bbox.size[this._fieldMap.groupsSizeField], group.lineSize);\n        group.bboxes.push(bbox);\n        group.elements.push(element);\n    }\n\n    _newGroup() {\n        return {\n            lineSize: 0,\n            size: -this.options.spacing,\n            bboxes: [],\n            elements: []\n        };\n    }\n}\n\nexport default Layout;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}