{"ast":null,"code":"import { drawing as draw, geometry as geom } from '@progress/kendo-drawing';\nimport LineSegment from '../line-chart/line-segment';\nimport { append, deepExtend, isFunction, last } from '../../common';\nclass AreaSegment extends LineSegment {\n  constructor(linePoints, currentSeries, seriesIx, prevSegment, stackPoints) {\n    super(linePoints, currentSeries, seriesIx);\n    this.prevSegment = prevSegment;\n    this.stackPoints = stackPoints;\n  }\n  createVisual() {\n    const series = this.series;\n    const defaults = series._defaults;\n    const lineOptions = series.line || {};\n    let color = series.color;\n    if (isFunction(color) && defaults) {\n      color = defaults.color;\n    }\n    this.visual = new draw.Group({\n      zIndex: series.zIndex\n    });\n    this.createFill({\n      fill: {\n        color: color,\n        opacity: series.opacity\n      },\n      stroke: null\n    });\n    if (lineOptions.width > 0 && lineOptions.visible !== false) {\n      this.createStroke({\n        stroke: deepExtend({\n          color: color,\n          opacity: series.opacity,\n          lineCap: \"butt\"\n        }, lineOptions)\n      });\n    }\n  }\n  strokeSegments() {\n    let segments = this._strokeSegments;\n    if (!segments) {\n      segments = this._strokeSegments = this.createStrokeSegments();\n    }\n    return segments;\n  }\n  createStrokeSegments() {\n    return this.segmentsFromPoints(this.points());\n  }\n  stackSegments() {\n    if (this.prevSegment) {\n      return this.prevSegment.createStackSegments(this.stackPoints);\n    }\n    return this.createStackSegments(this.stackPoints);\n  }\n  createStackSegments(stackPoints) {\n    return this.segmentsFromPoints(this.toGeometryPoints(stackPoints)).reverse();\n  }\n  segmentsFromPoints(points) {\n    return points.map(point => new geom.Segment(point));\n  }\n  createStroke(style) {\n    const stroke = new draw.Path(style);\n    stroke.segments.push.apply(stroke.segments, this.strokeSegments());\n    this.visual.append(stroke);\n  }\n  hasStackSegment() {\n    return this.prevSegment || this.stackPoints && this.stackPoints.length;\n  }\n  createFill(style) {\n    const strokeSegments = this.strokeSegments();\n    const fillSegments = strokeSegments.slice(0);\n    const hasStackSegments = this.hasStackSegment();\n    if (hasStackSegments) {\n      const stackSegments = this.stackSegments();\n      append(fillSegments, stackSegments);\n    }\n    const fill = new draw.Path(style);\n    fill.segments.push.apply(fill.segments, fillSegments);\n    if (!hasStackSegments && strokeSegments.length > 1) {\n      this.fillToAxes(fill);\n    }\n    this.visual.append(fill);\n  }\n  fillToAxes(fillPath) {\n    const chart = this.parent;\n    const invertAxes = chart.options.invertAxes;\n    const valueAxis = chart.seriesValueAxis(this.series);\n    const crossingValue = chart.categoryAxisCrossingValue(valueAxis);\n    const endSlot = valueAxis.getSlot(crossingValue, crossingValue, true);\n    const segments = this.strokeSegments();\n    const firstPoint = segments[0].anchor();\n    const lastPoint = last(segments).anchor();\n    let end = invertAxes ? endSlot.x1 : endSlot.y1;\n    if (invertAxes) {\n      fillPath.lineTo(end, lastPoint.y).lineTo(end, firstPoint.y);\n    } else {\n      fillPath.lineTo(lastPoint.x, end).lineTo(firstPoint.x, end);\n    }\n  }\n}\nexport default AreaSegment;","map":{"version":3,"names":["drawing","draw","geometry","geom","LineSegment","append","deepExtend","isFunction","last","AreaSegment","constructor","linePoints","currentSeries","seriesIx","prevSegment","stackPoints","createVisual","series","defaults","_defaults","lineOptions","line","color","visual","Group","zIndex","createFill","fill","opacity","stroke","width","visible","createStroke","lineCap","strokeSegments","segments","_strokeSegments","createStrokeSegments","segmentsFromPoints","points","stackSegments","createStackSegments","toGeometryPoints","reverse","map","point","Segment","style","Path","push","apply","hasStackSegment","length","fillSegments","slice","hasStackSegments","fillToAxes","fillPath","chart","parent","invertAxes","options","valueAxis","seriesValueAxis","crossingValue","categoryAxisCrossingValue","endSlot","getSlot","firstPoint","anchor","lastPoint","end","x1","y1","lineTo","y","x"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-charts/dist/es2015/chart/area-chart/area-segment.js"],"sourcesContent":["import { drawing as draw, geometry as geom } from '@progress/kendo-drawing';\nimport LineSegment from '../line-chart/line-segment';\n\nimport { append, deepExtend, isFunction, last } from '../../common';\n\nclass AreaSegment extends LineSegment {\n    constructor(linePoints, currentSeries, seriesIx, prevSegment, stackPoints) {\n        super(linePoints, currentSeries, seriesIx);\n\n        this.prevSegment = prevSegment;\n        this.stackPoints = stackPoints;\n    }\n\n    createVisual() {\n        const series = this.series;\n        const defaults = series._defaults;\n        const lineOptions = series.line || {};\n        let color = series.color;\n\n        if (isFunction(color) && defaults) {\n            color = defaults.color;\n        }\n\n        this.visual = new draw.Group({\n            zIndex: series.zIndex\n        });\n\n        this.createFill({\n            fill: {\n                color: color,\n                opacity: series.opacity\n            },\n            stroke: null\n        });\n\n        if (lineOptions.width > 0 && lineOptions.visible !== false) {\n            this.createStroke({\n                stroke: deepExtend({\n                    color: color,\n                    opacity: series.opacity,\n                    lineCap: \"butt\"\n                }, lineOptions)\n            });\n        }\n    }\n\n    strokeSegments() {\n        let segments = this._strokeSegments;\n\n        if (!segments) {\n            segments = this._strokeSegments = this.createStrokeSegments();\n        }\n\n        return segments;\n    }\n\n    createStrokeSegments() {\n        return this.segmentsFromPoints(this.points());\n    }\n\n    stackSegments() {\n        if (this.prevSegment) {\n            return this.prevSegment.createStackSegments(this.stackPoints);\n        }\n\n        return this.createStackSegments(this.stackPoints);\n    }\n\n    createStackSegments(stackPoints) {\n        return this.segmentsFromPoints(this.toGeometryPoints(stackPoints)).reverse();\n    }\n\n    segmentsFromPoints(points) {\n        return points.map((point) => new geom.Segment(point));\n    }\n\n    createStroke(style) {\n        const stroke = new draw.Path(style);\n        stroke.segments.push.apply(stroke.segments, this.strokeSegments());\n\n        this.visual.append(stroke);\n    }\n\n    hasStackSegment() {\n        return this.prevSegment || (this.stackPoints && this.stackPoints.length);\n    }\n\n    createFill(style) {\n        const strokeSegments = this.strokeSegments();\n        const fillSegments = strokeSegments.slice(0);\n        const hasStackSegments = this.hasStackSegment();\n\n        if (hasStackSegments) {\n            const stackSegments = this.stackSegments();\n\n            append(fillSegments, stackSegments);\n        }\n\n        const fill = new draw.Path(style);\n        fill.segments.push.apply(fill.segments, fillSegments);\n\n        if (!hasStackSegments && strokeSegments.length > 1) {\n            this.fillToAxes(fill);\n        }\n\n        this.visual.append(fill);\n    }\n\n    fillToAxes(fillPath) {\n        const chart = this.parent;\n        const invertAxes = chart.options.invertAxes;\n        const valueAxis = chart.seriesValueAxis(this.series);\n        const crossingValue = chart.categoryAxisCrossingValue(valueAxis);\n        const endSlot = valueAxis.getSlot(crossingValue, crossingValue, true);\n        const segments = this.strokeSegments();\n        const firstPoint = segments[0].anchor();\n        const lastPoint = last(segments).anchor();\n        let end = invertAxes ? endSlot.x1 : endSlot.y1;\n\n        if (invertAxes) {\n            fillPath.lineTo(end, lastPoint.y)\n                    .lineTo(end, firstPoint.y);\n        } else {\n            fillPath.lineTo(lastPoint.x, end)\n                    .lineTo(firstPoint.x, end);\n        }\n    }\n}\n\nexport default AreaSegment;"],"mappings":"AAAA,SAASA,OAAO,IAAIC,IAAI,EAAEC,QAAQ,IAAIC,IAAI,QAAQ,yBAAyB;AAC3E,OAAOC,WAAW,MAAM,4BAA4B;AAEpD,SAASC,MAAM,EAAEC,UAAU,EAAEC,UAAU,EAAEC,IAAI,QAAQ,cAAc;AAEnE,MAAMC,WAAW,SAASL,WAAW,CAAC;EAClCM,WAAWA,CAACC,UAAU,EAAEC,aAAa,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,WAAW,EAAE;IACvE,KAAK,CAACJ,UAAU,EAAEC,aAAa,EAAEC,QAAQ,CAAC;IAE1C,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,WAAW,GAAGA,WAAW;EAClC;EAEAC,YAAYA,CAAA,EAAG;IACX,MAAMC,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B,MAAMC,QAAQ,GAAGD,MAAM,CAACE,SAAS;IACjC,MAAMC,WAAW,GAAGH,MAAM,CAACI,IAAI,IAAI,CAAC,CAAC;IACrC,IAAIC,KAAK,GAAGL,MAAM,CAACK,KAAK;IAExB,IAAIf,UAAU,CAACe,KAAK,CAAC,IAAIJ,QAAQ,EAAE;MAC/BI,KAAK,GAAGJ,QAAQ,CAACI,KAAK;IAC1B;IAEA,IAAI,CAACC,MAAM,GAAG,IAAItB,IAAI,CAACuB,KAAK,CAAC;MACzBC,MAAM,EAAER,MAAM,CAACQ;IACnB,CAAC,CAAC;IAEF,IAAI,CAACC,UAAU,CAAC;MACZC,IAAI,EAAE;QACFL,KAAK,EAAEA,KAAK;QACZM,OAAO,EAAEX,MAAM,CAACW;MACpB,CAAC;MACDC,MAAM,EAAE;IACZ,CAAC,CAAC;IAEF,IAAIT,WAAW,CAACU,KAAK,GAAG,CAAC,IAAIV,WAAW,CAACW,OAAO,KAAK,KAAK,EAAE;MACxD,IAAI,CAACC,YAAY,CAAC;QACdH,MAAM,EAAEvB,UAAU,CAAC;UACfgB,KAAK,EAAEA,KAAK;UACZM,OAAO,EAAEX,MAAM,CAACW,OAAO;UACvBK,OAAO,EAAE;QACb,CAAC,EAAEb,WAAW;MAClB,CAAC,CAAC;IACN;EACJ;EAEAc,cAAcA,CAAA,EAAG;IACb,IAAIC,QAAQ,GAAG,IAAI,CAACC,eAAe;IAEnC,IAAI,CAACD,QAAQ,EAAE;MACXA,QAAQ,GAAG,IAAI,CAACC,eAAe,GAAG,IAAI,CAACC,oBAAoB,CAAC,CAAC;IACjE;IAEA,OAAOF,QAAQ;EACnB;EAEAE,oBAAoBA,CAAA,EAAG;IACnB,OAAO,IAAI,CAACC,kBAAkB,CAAC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;EACjD;EAEAC,aAAaA,CAAA,EAAG;IACZ,IAAI,IAAI,CAAC1B,WAAW,EAAE;MAClB,OAAO,IAAI,CAACA,WAAW,CAAC2B,mBAAmB,CAAC,IAAI,CAAC1B,WAAW,CAAC;IACjE;IAEA,OAAO,IAAI,CAAC0B,mBAAmB,CAAC,IAAI,CAAC1B,WAAW,CAAC;EACrD;EAEA0B,mBAAmBA,CAAC1B,WAAW,EAAE;IAC7B,OAAO,IAAI,CAACuB,kBAAkB,CAAC,IAAI,CAACI,gBAAgB,CAAC3B,WAAW,CAAC,CAAC,CAAC4B,OAAO,CAAC,CAAC;EAChF;EAEAL,kBAAkBA,CAACC,MAAM,EAAE;IACvB,OAAOA,MAAM,CAACK,GAAG,CAAEC,KAAK,IAAK,IAAI1C,IAAI,CAAC2C,OAAO,CAACD,KAAK,CAAC,CAAC;EACzD;EAEAb,YAAYA,CAACe,KAAK,EAAE;IAChB,MAAMlB,MAAM,GAAG,IAAI5B,IAAI,CAAC+C,IAAI,CAACD,KAAK,CAAC;IACnClB,MAAM,CAACM,QAAQ,CAACc,IAAI,CAACC,KAAK,CAACrB,MAAM,CAACM,QAAQ,EAAE,IAAI,CAACD,cAAc,CAAC,CAAC,CAAC;IAElE,IAAI,CAACX,MAAM,CAAClB,MAAM,CAACwB,MAAM,CAAC;EAC9B;EAEAsB,eAAeA,CAAA,EAAG;IACd,OAAO,IAAI,CAACrC,WAAW,IAAK,IAAI,CAACC,WAAW,IAAI,IAAI,CAACA,WAAW,CAACqC,MAAO;EAC5E;EAEA1B,UAAUA,CAACqB,KAAK,EAAE;IACd,MAAMb,cAAc,GAAG,IAAI,CAACA,cAAc,CAAC,CAAC;IAC5C,MAAMmB,YAAY,GAAGnB,cAAc,CAACoB,KAAK,CAAC,CAAC,CAAC;IAC5C,MAAMC,gBAAgB,GAAG,IAAI,CAACJ,eAAe,CAAC,CAAC;IAE/C,IAAII,gBAAgB,EAAE;MAClB,MAAMf,aAAa,GAAG,IAAI,CAACA,aAAa,CAAC,CAAC;MAE1CnC,MAAM,CAACgD,YAAY,EAAEb,aAAa,CAAC;IACvC;IAEA,MAAMb,IAAI,GAAG,IAAI1B,IAAI,CAAC+C,IAAI,CAACD,KAAK,CAAC;IACjCpB,IAAI,CAACQ,QAAQ,CAACc,IAAI,CAACC,KAAK,CAACvB,IAAI,CAACQ,QAAQ,EAAEkB,YAAY,CAAC;IAErD,IAAI,CAACE,gBAAgB,IAAIrB,cAAc,CAACkB,MAAM,GAAG,CAAC,EAAE;MAChD,IAAI,CAACI,UAAU,CAAC7B,IAAI,CAAC;IACzB;IAEA,IAAI,CAACJ,MAAM,CAAClB,MAAM,CAACsB,IAAI,CAAC;EAC5B;EAEA6B,UAAUA,CAACC,QAAQ,EAAE;IACjB,MAAMC,KAAK,GAAG,IAAI,CAACC,MAAM;IACzB,MAAMC,UAAU,GAAGF,KAAK,CAACG,OAAO,CAACD,UAAU;IAC3C,MAAME,SAAS,GAAGJ,KAAK,CAACK,eAAe,CAAC,IAAI,CAAC9C,MAAM,CAAC;IACpD,MAAM+C,aAAa,GAAGN,KAAK,CAACO,yBAAyB,CAACH,SAAS,CAAC;IAChE,MAAMI,OAAO,GAAGJ,SAAS,CAACK,OAAO,CAACH,aAAa,EAAEA,aAAa,EAAE,IAAI,CAAC;IACrE,MAAM7B,QAAQ,GAAG,IAAI,CAACD,cAAc,CAAC,CAAC;IACtC,MAAMkC,UAAU,GAAGjC,QAAQ,CAAC,CAAC,CAAC,CAACkC,MAAM,CAAC,CAAC;IACvC,MAAMC,SAAS,GAAG9D,IAAI,CAAC2B,QAAQ,CAAC,CAACkC,MAAM,CAAC,CAAC;IACzC,IAAIE,GAAG,GAAGX,UAAU,GAAGM,OAAO,CAACM,EAAE,GAAGN,OAAO,CAACO,EAAE;IAE9C,IAAIb,UAAU,EAAE;MACZH,QAAQ,CAACiB,MAAM,CAACH,GAAG,EAAED,SAAS,CAACK,CAAC,CAAC,CACxBD,MAAM,CAACH,GAAG,EAAEH,UAAU,CAACO,CAAC,CAAC;IACtC,CAAC,MAAM;MACHlB,QAAQ,CAACiB,MAAM,CAACJ,SAAS,CAACM,CAAC,EAAEL,GAAG,CAAC,CACxBG,MAAM,CAACN,UAAU,CAACQ,CAAC,EAAEL,GAAG,CAAC;IACtC;EACJ;AACJ;AAEA,eAAe9D,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}