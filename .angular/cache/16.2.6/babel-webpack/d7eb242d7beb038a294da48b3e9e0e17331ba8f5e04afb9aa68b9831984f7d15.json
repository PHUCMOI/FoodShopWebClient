{"ast":null,"code":"/**\n * @hidden\n */\nexport const ifElse = (predicate, right, left) => value => predicate(value) ? right(value) : left(value);\n/**\n * @hidden\n * Performs the right-to-left function composition. Functions should have a unary.\n */\nexport const compose = (...args) => data => args.reduceRight((acc, curr) => curr(acc), data);\n/**\n * @hidden\n */\nexport const constant = x => () => x;\n/**\n * @hidden\n */\nexport const identity = x => x;","map":{"version":3,"names":["ifElse","predicate","right","left","value","compose","args","data","reduceRight","acc","curr","constant","x","identity"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-data-query/dist/es2015/funcs.js"],"sourcesContent":["/**\n * @hidden\n */\nexport const ifElse = (predicate, right, left) => value => predicate(value) ? right(value) : left(value);\n/**\n * @hidden\n * Performs the right-to-left function composition. Functions should have a unary.\n */\nexport const compose = (...args) => (data) => args.reduceRight((acc, curr) => curr(acc), data);\n/**\n * @hidden\n */\nexport const constant = x => () => x;\n/**\n * @hidden\n */\nexport const identity = x => x;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,MAAMA,MAAM,GAAGA,CAACC,SAAS,EAAEC,KAAK,EAAEC,IAAI,KAAKC,KAAK,IAAIH,SAAS,CAACG,KAAK,CAAC,GAAGF,KAAK,CAACE,KAAK,CAAC,GAAGD,IAAI,CAACC,KAAK,CAAC;AACxG;AACA;AACA;AACA;AACA,OAAO,MAAMC,OAAO,GAAGA,CAAC,GAAGC,IAAI,KAAMC,IAAI,IAAKD,IAAI,CAACE,WAAW,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKA,IAAI,CAACD,GAAG,CAAC,EAAEF,IAAI,CAAC;AAC9F;AACA;AACA;AACA,OAAO,MAAMI,QAAQ,GAAGC,CAAC,IAAI,MAAMA,CAAC;AACpC;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAGD,CAAC,IAAIA,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}