{"ast":null,"code":"import withAccessors from '../mixins/with-accessors';\nimport HasObservers from '../core/has-observers';\nimport { defined, MIN_NUM, MAX_NUM, round } from '../util';\nimport Matrix from './matrix';\nimport toMatrix from './to-matrix';\nclass Point extends withAccessors(HasObservers, [\"x\", \"y\"]) {\n  constructor(x, y) {\n    super();\n    this.x = x || 0;\n    this.y = y || 0;\n  }\n  equals(other) {\n    return other && other.x === this.x && other.y === this.y;\n  }\n  clone() {\n    return new Point(this.x, this.y);\n  }\n  rotate(angle, origin) {\n    const originPoint = Point.create(origin) || Point.ZERO;\n    return this.transform(Matrix.rotate(angle, originPoint.x, originPoint.y));\n  }\n  translate(x, y) {\n    this.x += x;\n    this.y += y;\n    this.geometryChange();\n    return this;\n  }\n  translateWith(point) {\n    return this.translate(point.x, point.y);\n  }\n  move(x, y) {\n    this.x = this.y = 0;\n    return this.translate(x, y);\n  }\n  scale(scaleX, scaleY = scaleX) {\n    this.x *= scaleX;\n    this.y *= scaleY;\n    this.geometryChange();\n    return this;\n  }\n  scaleCopy(scaleX, scaleY) {\n    return this.clone().scale(scaleX, scaleY);\n  }\n  transform(transformation) {\n    const matrix = toMatrix(transformation);\n    const {\n      x,\n      y\n    } = this;\n    this.x = matrix.a * x + matrix.c * y + matrix.e;\n    this.y = matrix.b * x + matrix.d * y + matrix.f;\n    this.geometryChange();\n    return this;\n  }\n  transformCopy(transformation) {\n    const point = this.clone();\n    if (transformation) {\n      point.transform(transformation);\n    }\n    return point;\n  }\n  distanceTo(point) {\n    const dx = this.x - point.x;\n    const dy = this.y - point.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n  round(digits) {\n    this.x = round(this.x, digits);\n    this.y = round(this.y, digits);\n    this.geometryChange();\n    return this;\n  }\n  toArray(digits) {\n    const doRound = defined(digits);\n    const x = doRound ? round(this.x, digits) : this.x;\n    const y = doRound ? round(this.y, digits) : this.y;\n    return [x, y];\n  }\n  toString(digits, separator = \" \") {\n    let {\n      x,\n      y\n    } = this;\n    if (defined(digits)) {\n      x = round(x, digits);\n      y = round(y, digits);\n    }\n    return x + separator + y;\n  }\n  static create(arg0, arg1) {\n    if (defined(arg0)) {\n      if (arg0 instanceof Point) {\n        return arg0;\n      } else if (arguments.length === 1 && arg0.length === 2) {\n        return new Point(arg0[0], arg0[1]);\n      }\n      return new Point(arg0, arg1);\n    }\n  }\n  static min() {\n    let minX = MAX_NUM;\n    let minY = MAX_NUM;\n    for (let i = 0; i < arguments.length; i++) {\n      let point = arguments[i];\n      minX = Math.min(point.x, minX);\n      minY = Math.min(point.y, minY);\n    }\n    return new Point(minX, minY);\n  }\n  static max() {\n    let maxX = MIN_NUM;\n    let maxY = MIN_NUM;\n    for (let i = 0; i < arguments.length; i++) {\n      const point = arguments[i];\n      maxX = Math.max(point.x, maxX);\n      maxY = Math.max(point.y, maxY);\n    }\n    return new Point(maxX, maxY);\n  }\n  static minPoint() {\n    return new Point(MIN_NUM, MIN_NUM);\n  }\n  static maxPoint() {\n    return new Point(MAX_NUM, MAX_NUM);\n  }\n  static get ZERO() {\n    return new Point(0, 0);\n  }\n}\nexport default Point;","map":{"version":3,"names":["withAccessors","HasObservers","defined","MIN_NUM","MAX_NUM","round","Matrix","toMatrix","Point","constructor","x","y","equals","other","clone","rotate","angle","origin","originPoint","create","ZERO","transform","translate","geometryChange","translateWith","point","move","scale","scaleX","scaleY","scaleCopy","transformation","matrix","a","c","e","b","d","f","transformCopy","distanceTo","dx","dy","Math","sqrt","digits","toArray","doRound","toString","separator","arg0","arg1","arguments","length","min","minX","minY","i","max","maxX","maxY","minPoint","maxPoint"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-drawing/dist/es2015/geometry/point.js"],"sourcesContent":["import withAccessors from '../mixins/with-accessors';\nimport HasObservers from '../core/has-observers';\nimport { defined, MIN_NUM, MAX_NUM, round } from '../util';\nimport Matrix from './matrix';\nimport toMatrix from './to-matrix';\n\n\nclass Point extends withAccessors(HasObservers, [ \"x\", \"y\" ]) {\n    constructor(x, y) {\n        super();\n\n        this.x = x || 0;\n        this.y = y || 0;\n    }\n\n    equals(other) {\n        return other && other.x === this.x && other.y === this.y;\n    }\n\n    clone() {\n        return new Point(this.x, this.y);\n    }\n\n    rotate(angle, origin) {\n        const originPoint = Point.create(origin) || Point.ZERO;\n\n        return this.transform(Matrix.rotate(angle, originPoint.x, originPoint.y));\n    }\n\n    translate(x, y) {\n        this.x += x;\n        this.y += y;\n\n        this.geometryChange();\n\n        return this;\n    }\n\n    translateWith(point) {\n        return this.translate(point.x, point.y);\n    }\n\n    move(x, y) {\n        this.x = this.y = 0;\n        return this.translate(x, y);\n    }\n\n    scale(scaleX, scaleY = scaleX) {\n        this.x *= scaleX;\n        this.y *= scaleY;\n\n        this.geometryChange();\n\n        return this;\n    }\n\n    scaleCopy(scaleX, scaleY) {\n        return this.clone().scale(scaleX, scaleY);\n    }\n\n    transform(transformation) {\n        const matrix = toMatrix(transformation);\n        const { x, y } = this;\n\n        this.x = matrix.a * x + matrix.c * y + matrix.e;\n        this.y = matrix.b * x + matrix.d * y + matrix.f;\n\n        this.geometryChange();\n\n        return this;\n    }\n\n    transformCopy(transformation) {\n        const point = this.clone();\n\n        if (transformation) {\n            point.transform(transformation);\n        }\n\n        return point;\n    }\n\n    distanceTo(point) {\n        const dx = this.x - point.x;\n        const dy = this.y - point.y;\n\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    round(digits) {\n        this.x = round(this.x, digits);\n        this.y = round(this.y, digits);\n\n        this.geometryChange();\n\n        return this;\n    }\n\n    toArray(digits) {\n        const doRound = defined(digits);\n        const x = doRound ? round(this.x, digits) : this.x;\n        const y = doRound ? round(this.y, digits) : this.y;\n\n        return [ x, y ];\n    }\n\n    toString(digits, separator = \" \") {\n        let { x, y } = this;\n\n        if (defined(digits)) {\n            x = round(x, digits);\n            y = round(y, digits);\n        }\n\n        return x + separator + y;\n    }\n\n    static create(arg0, arg1) {\n        if (defined(arg0)) {\n            if (arg0 instanceof Point) {\n                return arg0;\n            } else if (arguments.length === 1 && arg0.length === 2) {\n                return new Point(arg0[0], arg0[1]);\n            }\n\n            return new Point(arg0, arg1);\n        }\n    }\n\n    static min() {\n        let minX = MAX_NUM;\n        let minY = MAX_NUM;\n\n        for (let i = 0; i < arguments.length; i++) {\n            let point = arguments[i];\n            minX = Math.min(point.x, minX);\n            minY = Math.min(point.y, minY);\n        }\n\n        return new Point(minX, minY);\n    }\n\n    static max() {\n        let maxX = MIN_NUM;\n        let maxY = MIN_NUM;\n\n        for (let i = 0; i < arguments.length; i++) {\n            const point = arguments[i];\n            maxX = Math.max(point.x, maxX);\n            maxY = Math.max(point.y, maxY);\n        }\n\n        return new Point(maxX, maxY);\n    }\n\n    static minPoint() {\n        return new Point(MIN_NUM, MIN_NUM);\n    }\n\n    static maxPoint() {\n        return new Point(MAX_NUM, MAX_NUM);\n    }\n\n    static get ZERO() {\n        return new Point(0, 0);\n    }\n}\n\nexport default Point;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}