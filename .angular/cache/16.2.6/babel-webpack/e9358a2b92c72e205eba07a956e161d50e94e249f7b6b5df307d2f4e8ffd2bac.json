{"ast":null,"code":"import { ChartElement } from '../../core';\nimport { setDefaultOptions } from '../../common';\nimport { forEach, forEachReverse } from './utils';\nclass RadarClusterLayout extends ChartElement {\n  constructor(options) {\n    super(options);\n    this.forEach = options.rtl ? forEachReverse : forEach;\n  }\n  reflow(sector) {\n    const {\n      options,\n      children\n    } = this;\n    const {\n      gap,\n      spacing\n    } = options;\n    const count = children.length;\n    const slots = count + gap + spacing * (count - 1);\n    const slotAngle = sector.angle / slots;\n    let angle = sector.startAngle + slotAngle * (gap / 2);\n    this.forEach(children, child => {\n      const slotSector = sector.clone();\n      slotSector.startAngle = angle;\n      slotSector.angle = slotAngle;\n      if (child.sector) {\n        slotSector.radius = child.sector.radius;\n      }\n      child.reflow(slotSector);\n      child.sector = slotSector;\n      angle += slotAngle + slotAngle * spacing;\n    });\n  }\n}\nsetDefaultOptions(RadarClusterLayout, {\n  gap: 1,\n  spacing: 0\n});\nexport default RadarClusterLayout;","map":{"version":3,"names":["ChartElement","setDefaultOptions","forEach","forEachReverse","RadarClusterLayout","constructor","options","rtl","reflow","sector","children","gap","spacing","count","length","slots","slotAngle","angle","startAngle","child","slotSector","clone","radius"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-charts/dist/es2015/chart/layout/radar-cluster-layout.js"],"sourcesContent":["import { ChartElement } from '../../core';\n\nimport { setDefaultOptions } from '../../common';\n\nimport { forEach, forEachReverse } from './utils';\n\nclass RadarClusterLayout extends ChartElement {\n    constructor(options) {\n        super(options);\n\n        this.forEach = options.rtl ? forEachReverse : forEach;\n    }\n\n    reflow(sector) {\n        const { options, children } = this;\n        const { gap, spacing } = options;\n        const count = children.length;\n        const slots = count + gap + (spacing * (count - 1));\n        const slotAngle = sector.angle / slots;\n        let angle = sector.startAngle + slotAngle * (gap / 2);\n\n        this.forEach(children, (child) => {\n            const slotSector = sector.clone();\n            slotSector.startAngle = angle;\n            slotSector.angle = slotAngle;\n\n            if (child.sector) {\n                slotSector.radius = child.sector.radius;\n            }\n\n            child.reflow(slotSector);\n            child.sector = slotSector;\n\n            angle += slotAngle + (slotAngle * spacing);\n        });\n    }\n}\n\nsetDefaultOptions(RadarClusterLayout, {\n    gap: 1,\n    spacing: 0\n});\n\nexport default RadarClusterLayout;"],"mappings":"AAAA,SAASA,YAAY,QAAQ,YAAY;AAEzC,SAASC,iBAAiB,QAAQ,cAAc;AAEhD,SAASC,OAAO,EAAEC,cAAc,QAAQ,SAAS;AAEjD,MAAMC,kBAAkB,SAASJ,YAAY,CAAC;EAC1CK,WAAWA,CAACC,OAAO,EAAE;IACjB,KAAK,CAACA,OAAO,CAAC;IAEd,IAAI,CAACJ,OAAO,GAAGI,OAAO,CAACC,GAAG,GAAGJ,cAAc,GAAGD,OAAO;EACzD;EAEAM,MAAMA,CAACC,MAAM,EAAE;IACX,MAAM;MAAEH,OAAO;MAAEI;IAAS,CAAC,GAAG,IAAI;IAClC,MAAM;MAAEC,GAAG;MAAEC;IAAQ,CAAC,GAAGN,OAAO;IAChC,MAAMO,KAAK,GAAGH,QAAQ,CAACI,MAAM;IAC7B,MAAMC,KAAK,GAAGF,KAAK,GAAGF,GAAG,GAAIC,OAAO,IAAIC,KAAK,GAAG,CAAC,CAAE;IACnD,MAAMG,SAAS,GAAGP,MAAM,CAACQ,KAAK,GAAGF,KAAK;IACtC,IAAIE,KAAK,GAAGR,MAAM,CAACS,UAAU,GAAGF,SAAS,IAAIL,GAAG,GAAG,CAAC,CAAC;IAErD,IAAI,CAACT,OAAO,CAACQ,QAAQ,EAAGS,KAAK,IAAK;MAC9B,MAAMC,UAAU,GAAGX,MAAM,CAACY,KAAK,CAAC,CAAC;MACjCD,UAAU,CAACF,UAAU,GAAGD,KAAK;MAC7BG,UAAU,CAACH,KAAK,GAAGD,SAAS;MAE5B,IAAIG,KAAK,CAACV,MAAM,EAAE;QACdW,UAAU,CAACE,MAAM,GAAGH,KAAK,CAACV,MAAM,CAACa,MAAM;MAC3C;MAEAH,KAAK,CAACX,MAAM,CAACY,UAAU,CAAC;MACxBD,KAAK,CAACV,MAAM,GAAGW,UAAU;MAEzBH,KAAK,IAAID,SAAS,GAAIA,SAAS,GAAGJ,OAAQ;IAC9C,CAAC,CAAC;EACN;AACJ;AAEAX,iBAAiB,CAACG,kBAAkB,EAAE;EAClCO,GAAG,EAAE,CAAC;EACNC,OAAO,EAAE;AACb,CAAC,CAAC;AAEF,eAAeR,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}