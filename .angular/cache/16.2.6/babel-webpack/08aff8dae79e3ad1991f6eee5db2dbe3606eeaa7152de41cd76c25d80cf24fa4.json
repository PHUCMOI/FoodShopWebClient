{"ast":null,"code":"import { Encodings } from './encodings/main';\nconst validate = (encoding, size, prefix) => value => {\n  try {\n    encoding.encode(prefix + value, size.width, size.height);\n  } catch (error) {\n    return {\n      valid: false,\n      error\n    };\n  }\n  return {\n    valid: true\n  };\n};\n\n// A default size for encodings, so the validator can check only the value if no size is provided.\nconst fallbackSize = {\n  width: 500,\n  height: 100\n};\nfunction barcodeValidator(type, size = fallbackSize) {\n  if (!type) {\n    throw new Error(`Please specify barcode type to validate.`);\n  }\n  let resolvedType = type.toLowerCase();\n  let prefix = '';\n  if (resolvedType === 'upca') {\n    resolvedType = 'ean13';\n    prefix = '0';\n  } else if (resolvedType === 'upce') {\n    resolvedType = 'ean8';\n    prefix = '0';\n  }\n  if (!Encodings[resolvedType]) {\n    throw new Error(`Encoding '${type}' is not supported.`);\n  }\n  const encoding = new Encodings[resolvedType]();\n  return validate(encoding, size, prefix);\n}\nexport default barcodeValidator;","map":{"version":3,"names":["Encodings","validate","encoding","size","prefix","value","encode","width","height","error","valid","fallbackSize","barcodeValidator","type","Error","resolvedType","toLowerCase"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-charts/dist/es2015/barcode/barcode-validator.js"],"sourcesContent":["import { Encodings } from './encodings/main';\n\nconst validate = (encoding, size, prefix) => (value) => {\n    try {\n        encoding.encode(\n            prefix + value,\n            size.width,\n            size.height\n        );\n    } catch (error) {\n        return {\n            valid: false,\n            error\n        };\n    }\n\n    return {\n        valid: true\n    };\n};\n\n// A default size for encodings, so the validator can check only the value if no size is provided.\nconst fallbackSize = { width: 500, height: 100 };\n\nfunction barcodeValidator(type, size = fallbackSize) {\n    if (!type) {\n        throw new Error(`Please specify barcode type to validate.`);\n    }\n\n    let resolvedType = type.toLowerCase();\n    let prefix = '';\n    if (resolvedType === 'upca') {\n        resolvedType = 'ean13';\n        prefix = '0';\n    } else if (resolvedType === 'upce') {\n        resolvedType = 'ean8';\n        prefix = '0';\n    }\n\n    if (!Encodings[resolvedType]) {\n        throw new Error(`Encoding '${type}' is not supported.`);\n    }\n\n    const encoding = new Encodings[resolvedType]();\n    return validate(encoding, size, prefix);\n}\n\nexport default barcodeValidator;\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,kBAAkB;AAE5C,MAAMC,QAAQ,GAAGA,CAACC,QAAQ,EAAEC,IAAI,EAAEC,MAAM,KAAMC,KAAK,IAAK;EACpD,IAAI;IACAH,QAAQ,CAACI,MAAM,CACXF,MAAM,GAAGC,KAAK,EACdF,IAAI,CAACI,KAAK,EACVJ,IAAI,CAACK,MACT,CAAC;EACL,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,OAAO;MACHC,KAAK,EAAE,KAAK;MACZD;IACJ,CAAC;EACL;EAEA,OAAO;IACHC,KAAK,EAAE;EACX,CAAC;AACL,CAAC;;AAED;AACA,MAAMC,YAAY,GAAG;EAAEJ,KAAK,EAAE,GAAG;EAAEC,MAAM,EAAE;AAAI,CAAC;AAEhD,SAASI,gBAAgBA,CAACC,IAAI,EAAEV,IAAI,GAAGQ,YAAY,EAAE;EACjD,IAAI,CAACE,IAAI,EAAE;IACP,MAAM,IAAIC,KAAK,CAAE,0CAAyC,CAAC;EAC/D;EAEA,IAAIC,YAAY,GAAGF,IAAI,CAACG,WAAW,CAAC,CAAC;EACrC,IAAIZ,MAAM,GAAG,EAAE;EACf,IAAIW,YAAY,KAAK,MAAM,EAAE;IACzBA,YAAY,GAAG,OAAO;IACtBX,MAAM,GAAG,GAAG;EAChB,CAAC,MAAM,IAAIW,YAAY,KAAK,MAAM,EAAE;IAChCA,YAAY,GAAG,MAAM;IACrBX,MAAM,GAAG,GAAG;EAChB;EAEA,IAAI,CAACJ,SAAS,CAACe,YAAY,CAAC,EAAE;IAC1B,MAAM,IAAID,KAAK,CAAE,aAAYD,IAAK,qBAAoB,CAAC;EAC3D;EAEA,MAAMX,QAAQ,GAAG,IAAIF,SAAS,CAACe,YAAY,CAAC,CAAC,CAAC;EAC9C,OAAOd,QAAQ,CAACC,QAAQ,EAAEC,IAAI,EAAEC,MAAM,CAAC;AAC3C;AAEA,eAAeQ,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}