{"ast":null,"code":"import { NgForOf, NgStyle, NgIf } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, Input, EventEmitter, ElementRef, Renderer2, ChangeDetectorRef, NgZone, Inject, Output, HostBinding, NgModule } from '@angular/core';\nimport { Subject, debounceTime, takeUntil, timer, switchMap } from 'rxjs';\nfunction GridsterComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 3);\n  }\n  if (rf & 2) {\n    const i_r3 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", ctx_r0.gridRenderer.getGridColumnStyle(i_r3));\n  }\n}\nfunction GridsterComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 4);\n  }\n  if (rf & 2) {\n    const i_r5 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", ctx_r1.gridRenderer.getGridRowStyle(i_r5));\n  }\n}\nconst _c0 = [\"*\"];\nfunction GridsterItemComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_1_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.resize.dragStartDelay($event));\n    })(\"touchstart\", function GridsterItemComponent_div_1_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.resize.dragStartDelay($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GridsterItemComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_2_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.resize.dragStartDelay($event));\n    })(\"touchstart\", function GridsterItemComponent_div_2_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.resize.dragStartDelay($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GridsterItemComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_3_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.resize.dragStartDelay($event));\n    })(\"touchstart\", function GridsterItemComponent_div_3_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.resize.dragStartDelay($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GridsterItemComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_4_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.resize.dragStartDelay($event));\n    })(\"touchstart\", function GridsterItemComponent_div_4_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r19.resize.dragStartDelay($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GridsterItemComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_5_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r20.resize.dragStartDelay($event));\n    })(\"touchstart\", function GridsterItemComponent_div_5_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r22.resize.dragStartDelay($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GridsterItemComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_6_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r23.resize.dragStartDelay($event));\n    })(\"touchstart\", function GridsterItemComponent_div_6_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r25 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r25.resize.dragStartDelay($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GridsterItemComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r27 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_7_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r26.resize.dragStartDelay($event));\n    })(\"touchstart\", function GridsterItemComponent_div_7_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r28 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r28.resize.dragStartDelay($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GridsterItemComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r30 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_8_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r30);\n      const ctx_r29 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r29.resize.dragStartDelay($event));\n    })(\"touchstart\", function GridsterItemComponent_div_8_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r30);\n      const ctx_r31 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r31.resize.dragStartDelay($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nvar GridType;\n(function (GridType) {\n  GridType[\"Fit\"] = \"fit\";\n  GridType[\"ScrollVertical\"] = \"scrollVertical\";\n  GridType[\"ScrollHorizontal\"] = \"scrollHorizontal\";\n  GridType[\"Fixed\"] = \"fixed\";\n  GridType[\"VerticalFixed\"] = \"verticalFixed\";\n  GridType[\"HorizontalFixed\"] = \"horizontalFixed\";\n})(GridType || (GridType = {}));\nvar DisplayGrid;\n(function (DisplayGrid) {\n  DisplayGrid[\"Always\"] = \"always\";\n  DisplayGrid[\"OnDragAndResize\"] = \"onDrag&Resize\";\n  DisplayGrid[\"None\"] = \"none\";\n})(DisplayGrid || (DisplayGrid = {}));\nvar CompactType;\n(function (CompactType) {\n  CompactType[\"None\"] = \"none\";\n  CompactType[\"CompactUp\"] = \"compactUp\";\n  CompactType[\"CompactLeft\"] = \"compactLeft\";\n  CompactType[\"CompactUpAndLeft\"] = \"compactUp&Left\";\n  CompactType[\"CompactLeftAndUp\"] = \"compactLeft&Up\";\n  CompactType[\"CompactRight\"] = \"compactRight\";\n  CompactType[\"CompactUpAndRight\"] = \"compactUp&Right\";\n  CompactType[\"CompactRightAndUp\"] = \"compactRight&Up\";\n  CompactType[\"CompactDown\"] = \"compactDown\";\n  CompactType[\"CompactDownAndLeft\"] = \"compactDown&Left\";\n  CompactType[\"CompactLeftAndDown\"] = \"compactLeft&Down\";\n  CompactType[\"CompactDownAndRight\"] = \"compactDown&Right\";\n  CompactType[\"CompactRightAndDown\"] = \"compactRight&Down\";\n})(CompactType || (CompactType = {}));\nvar DirTypes;\n(function (DirTypes) {\n  DirTypes[\"LTR\"] = \"ltr\";\n  DirTypes[\"RTL\"] = \"rtl\";\n})(DirTypes || (DirTypes = {}));\nclass GridsterCompact {\n  constructor(gridster) {\n    this.gridster = gridster;\n  }\n  destroy() {\n    this.gridster = null;\n  }\n  checkCompact() {\n    if (this.gridster.$options.compactType !== CompactType.None) {\n      if (this.gridster.$options.compactType === CompactType.CompactUp) {\n        this.checkCompactMovement('y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n        this.checkCompactMovement('x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n        this.checkCompactMovement('y', -1);\n        this.checkCompactMovement('x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n        this.checkCompactMovement('x', -1);\n        this.checkCompactMovement('y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactRight) {\n        this.checkCompactMovement('x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\n        this.checkCompactMovement('y', -1);\n        this.checkCompactMovement('x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactRightAndUp) {\n        this.checkCompactMovement('x', 1);\n        this.checkCompactMovement('y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDown) {\n        this.checkCompactMovement('y', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDownAndLeft) {\n        this.checkCompactMovement('y', 1);\n        this.checkCompactMovement('x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDownAndRight) {\n        this.checkCompactMovement('y', 1);\n        this.checkCompactMovement('x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndDown) {\n        this.checkCompactMovement('x', -1);\n        this.checkCompactMovement('y', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactRightAndDown) {\n        this.checkCompactMovement('x', 1);\n        this.checkCompactMovement('y', 1);\n      }\n    }\n  }\n  checkCompactItem(item) {\n    if (this.gridster.$options.compactType !== CompactType.None) {\n      if (this.gridster.$options.compactType === CompactType.CompactUp) {\n        this.moveTillCollision(item, 'y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n        this.moveTillCollision(item, 'x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n        this.moveTillCollision(item, 'y', -1);\n        this.moveTillCollision(item, 'x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n        this.moveTillCollision(item, 'x', -1);\n        this.moveTillCollision(item, 'y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\n        this.moveTillCollision(item, 'y', -1);\n        this.moveTillCollision(item, 'x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDown) {\n        this.moveTillCollision(item, 'y', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDownAndLeft) {\n        this.moveTillCollision(item, 'y', 1);\n        this.moveTillCollision(item, 'x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndDown) {\n        this.moveTillCollision(item, 'x', -1);\n        this.moveTillCollision(item, 'y', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDownAndRight) {\n        this.moveTillCollision(item, 'y', 1);\n        this.moveTillCollision(item, 'x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactRightAndDown) {\n        this.moveTillCollision(item, 'x', 1);\n        this.moveTillCollision(item, 'y', 1);\n      }\n    }\n  }\n  checkCompactMovement(direction, delta) {\n    let widgetMoved = false;\n    this.gridster.grid.forEach(widget => {\n      if (widget.$item.compactEnabled !== false) {\n        const moved = this.moveTillCollision(widget.$item, direction, delta);\n        if (moved) {\n          widgetMoved = true;\n          widget.item[direction] = widget.$item[direction];\n          widget.itemChanged();\n        }\n      }\n    });\n    if (widgetMoved) {\n      this.checkCompact();\n    }\n  }\n  moveTillCollision(item, direction, delta) {\n    item[direction] += delta;\n    if (this.gridster.checkCollision(item)) {\n      item[direction] -= delta;\n      return false;\n    } else {\n      this.moveTillCollision(item, direction, delta);\n      return true;\n    }\n  }\n}\nconst GridsterConfigService = {\n  gridType: GridType.Fit,\n  scale: 1,\n  // 'scrollVertical' will fit on width and height of the items will be the same as the width\n  // 'scrollHorizontal' will fit on height and width of the items will be the same as the height\n  // 'fixed' will set the rows and columns dimensions based on fixedColWidth and fixedRowHeight options\n  // 'verticalFixed' will set the rows to fixedRowHeight and columns width will fit the space available\n  // 'horizontalFixed' will set the columns to fixedColWidth and rows height will fit the space available\n  fixedColWidth: 250,\n  fixedRowHeight: 250,\n  keepFixedHeightInMobile: false,\n  keepFixedWidthInMobile: false,\n  setGridSize: false,\n  compactType: CompactType.None,\n  mobileBreakpoint: 640,\n  useBodyForBreakpoint: false,\n  allowMultiLayer: false,\n  defaultLayerIndex: 0,\n  maxLayerIndex: 2,\n  baseLayerIndex: 1,\n  minCols: 1,\n  maxCols: 100,\n  minRows: 1,\n  maxRows: 100,\n  defaultItemCols: 1,\n  defaultItemRows: 1,\n  maxItemCols: 50,\n  maxItemRows: 50,\n  minItemCols: 1,\n  minItemRows: 1,\n  minItemArea: 1,\n  maxItemArea: 2500,\n  addEmptyRowsCount: 0,\n  rowHeightRatio: 1,\n  margin: 10,\n  outerMargin: true,\n  outerMarginTop: null,\n  outerMarginRight: null,\n  outerMarginBottom: null,\n  outerMarginLeft: null,\n  useTransformPositioning: true,\n  scrollSensitivity: 10,\n  scrollSpeed: 20,\n  initCallback: undefined,\n  destroyCallback: undefined,\n  gridSizeChangedCallback: undefined,\n  itemChangeCallback: undefined,\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemResizeCallback: undefined,\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemInitCallback: undefined,\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemRemovedCallback: undefined,\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemValidateCallback: undefined,\n  // Arguments: gridsterItem\n  enableEmptyCellClick: false,\n  enableEmptyCellContextMenu: false,\n  enableEmptyCellDrop: false,\n  enableEmptyCellDrag: false,\n  enableOccupiedCellDrop: false,\n  emptyCellClickCallback: undefined,\n  emptyCellContextMenuCallback: undefined,\n  emptyCellDropCallback: undefined,\n  emptyCellDragCallback: undefined,\n  emptyCellDragMaxCols: 50,\n  emptyCellDragMaxRows: 50,\n  // Arguments: event, gridsterItem{x, y, rows: defaultItemRows, cols: defaultItemCols}\n  ignoreMarginInRow: false,\n  draggable: {\n    delayStart: 0,\n    enabled: false,\n    ignoreContentClass: 'gridster-item-content',\n    ignoreContent: false,\n    dragHandleClass: 'drag-handler',\n    stop: undefined,\n    start: undefined,\n    // Arguments: item, gridsterItem, event\n    dropOverItems: false,\n    dropOverItemsCallback: undefined // callback on drop over another item\n    // Arguments: source, target, gridComponent\n  },\n\n  resizable: {\n    delayStart: 0,\n    enabled: false,\n    handles: {\n      s: true,\n      e: true,\n      n: true,\n      w: true,\n      se: true,\n      ne: true,\n      sw: true,\n      nw: true\n    },\n    stop: undefined,\n    start: undefined // callback when resizing an item starts.\n    // Arguments: item, gridsterItem, event\n  },\n\n  swap: true,\n  swapWhileDragging: false,\n  pushItems: false,\n  disablePushOnDrag: false,\n  disablePushOnResize: false,\n  pushDirections: {\n    north: true,\n    east: true,\n    south: true,\n    west: true\n  },\n  pushResizeItems: false,\n  displayGrid: DisplayGrid.OnDragAndResize,\n  disableWindowResize: false,\n  disableWarnings: false,\n  scrollToNewItems: false,\n  disableScrollHorizontal: false,\n  disableScrollVertical: false,\n  enableBoundaryControl: false,\n  disableAutoPositionOnConflict: false,\n  dirType: DirTypes.LTR // page direction, rtl=right to left ltr= left to right, if you use rtl language set dirType to rtl\n};\n\nclass GridsterUtils {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static merge(obj1, obj2, properties) {\n    for (const p in obj2) {\n      if (obj2[p] !== void 0 && properties.hasOwnProperty(p)) {\n        if (typeof obj2[p] === 'object') {\n          // create an empty object for the property if obj1 does not already have one.\n          if (!(p in obj1)) {\n            obj1[p] = {};\n          }\n          obj1[p] = GridsterUtils.merge(obj1[p], obj2[p], properties[p]);\n        } else {\n          obj1[p] = obj2[p];\n        }\n      }\n    }\n    return obj1;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static checkTouchEvent(e) {\n    if (e.clientX === undefined && e.touches) {\n      if (e.touches && e.touches.length) {\n        e.clientX = e.touches[0].clientX;\n        e.clientY = e.touches[0].clientY;\n      } else if (e.changedTouches && e.changedTouches.length) {\n        e.clientX = e.changedTouches[0].clientX;\n        e.clientY = e.changedTouches[0].clientY;\n      }\n    }\n  }\n  static checkContentClassForEvent(gridster, e) {\n    if (gridster.$options.draggable.ignoreContent) {\n      if (!GridsterUtils.checkDragHandleClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass, gridster.$options.draggable.ignoreContentClass)) {\n        return true;\n      }\n    } else {\n      if (GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  static checkContentClassForEmptyCellClickEvent(gridster, e) {\n    return GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass) || GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass);\n  }\n  static checkDragHandleClass(target, current, dragHandleClass, ignoreContentClass) {\n    if (!target || target === current) {\n      return false;\n    }\n    if (target.hasAttribute('class')) {\n      const classnames = target.getAttribute('class').split(' ');\n      if (classnames.indexOf(dragHandleClass) > -1) {\n        return true;\n      }\n      if (classnames.indexOf(ignoreContentClass) > -1) {\n        return false;\n      }\n    }\n    return GridsterUtils.checkDragHandleClass(target.parentNode, current, dragHandleClass, ignoreContentClass);\n  }\n  static checkContentClass(target, current, contentClass) {\n    if (!target || target === current) {\n      return false;\n    }\n    if (target.hasAttribute('class') && target.getAttribute('class').split(' ').indexOf(contentClass) > -1) {\n      return true;\n    } else {\n      return GridsterUtils.checkContentClass(target.parentNode, current, contentClass);\n    }\n  }\n  static compareItems(a, b) {\n    if (a.y > b.y) {\n      return -1;\n    } else if (a.y < b.y) {\n      return 1;\n    } else if (a.x > b.x) {\n      return -1;\n    } else {\n      return 1;\n    }\n  }\n}\nclass GridsterEmptyCell {\n  constructor(gridster) {\n    this.gridster = gridster;\n    this.emptyCellClickCb = e => {\n      if (!this.gridster || this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n        return;\n      }\n      const item = this.getValidItemFromEvent(e);\n      if (!item) {\n        return;\n      }\n      if (this.gridster.options.emptyCellClickCallback) {\n        this.gridster.options.emptyCellClickCallback(e, item);\n      }\n      this.gridster.cdRef.markForCheck();\n    };\n    this.emptyCellContextMenuCb = e => {\n      if (this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n        return;\n      }\n      e.preventDefault();\n      e.stopPropagation();\n      const item = this.getValidItemFromEvent(e);\n      if (!item) {\n        return;\n      }\n      if (this.gridster.options.emptyCellContextMenuCallback) {\n        this.gridster.options.emptyCellContextMenuCallback(e, item);\n      }\n      this.gridster.cdRef.markForCheck();\n    };\n    this.emptyCellDragDrop = e => {\n      const item = this.getValidItemFromEvent(e);\n      if (!item) {\n        return;\n      }\n      if (this.gridster.options.emptyCellDropCallback) {\n        this.gridster.options.emptyCellDropCallback(e, item);\n      }\n      this.gridster.cdRef.markForCheck();\n    };\n    this.emptyCellDragOver = e => {\n      e.preventDefault();\n      e.stopPropagation();\n      const item = this.getValidItemFromEvent(e);\n      if (item) {\n        if (e.dataTransfer) {\n          e.dataTransfer.dropEffect = 'move';\n        }\n        this.gridster.movingItem = item;\n      } else {\n        if (e.dataTransfer) {\n          e.dataTransfer.dropEffect = 'none';\n        }\n        this.gridster.movingItem = null;\n      }\n      this.gridster.previewStyle();\n    };\n    this.emptyCellMouseDown = e => {\n      if (GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n        return;\n      }\n      e.preventDefault();\n      e.stopPropagation();\n      const item = this.getValidItemFromEvent(e);\n      const leftMouseButtonCode = 1;\n      if (!item || e.buttons !== leftMouseButtonCode && !(e instanceof TouchEvent)) {\n        return;\n      }\n      this.initialItem = item;\n      this.gridster.movingItem = item;\n      this.gridster.previewStyle();\n      this.gridster.zone.runOutsideAngular(() => {\n        this.removeWindowMousemoveListenerFn = this.gridster.renderer.listen('window', 'mousemove', this.emptyCellMouseMove);\n        this.removeWindowTouchmoveListenerFn = this.gridster.renderer.listen('window', 'touchmove', this.emptyCellMouseMove);\n      });\n      this.removeWindowMouseupListenerFn = this.gridster.renderer.listen('window', 'mouseup', this.emptyCellMouseUp);\n      this.removeWindowTouchendListenerFn = this.gridster.renderer.listen('window', 'touchend', this.emptyCellMouseUp);\n    };\n    this.emptyCellMouseMove = e => {\n      e.preventDefault();\n      e.stopPropagation();\n      const item = this.getValidItemFromEvent(e, this.initialItem);\n      if (!item) {\n        return;\n      }\n      this.gridster.movingItem = item;\n      this.gridster.previewStyle();\n    };\n    this.emptyCellMouseUp = e => {\n      this.removeWindowMousemoveListenerFn();\n      this.removeWindowTouchmoveListenerFn();\n      this.removeWindowMouseupListenerFn();\n      this.removeWindowTouchendListenerFn();\n      const item = this.getValidItemFromEvent(e, this.initialItem);\n      if (item) {\n        this.gridster.movingItem = item;\n      }\n      if (this.gridster.options.emptyCellDragCallback && this.gridster.movingItem) {\n        this.gridster.options.emptyCellDragCallback(e, this.gridster.movingItem);\n      }\n      setTimeout(() => {\n        this.initialItem = null;\n        if (this.gridster) {\n          this.gridster.movingItem = null;\n          this.gridster.previewStyle();\n        }\n      });\n      this.gridster.cdRef.markForCheck();\n    };\n  }\n  destroy() {\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle();\n    }\n    this.gridster.movingItem = null;\n    this.initialItem = this.gridster = null;\n    if (this.removeDocumentDragendListenerFn) {\n      this.removeDocumentDragendListenerFn();\n      this.removeDocumentDragendListenerFn = null;\n    }\n  }\n  updateOptions() {\n    if (this.gridster.$options.enableEmptyCellClick && !this.removeEmptyCellClickListenerFn && this.gridster.options.emptyCellClickCallback) {\n      this.removeEmptyCellClickListenerFn = this.gridster.renderer.listen(this.gridster.el, 'click', this.emptyCellClickCb);\n      this.removeEmptyCellTouchendListenerFn = this.gridster.renderer.listen(this.gridster.el, 'touchend', this.emptyCellClickCb);\n    } else if (!this.gridster.$options.enableEmptyCellClick && this.removeEmptyCellClickListenerFn && this.removeEmptyCellTouchendListenerFn) {\n      this.removeEmptyCellClickListenerFn();\n      this.removeEmptyCellTouchendListenerFn();\n      this.removeEmptyCellClickListenerFn = null;\n      this.removeEmptyCellTouchendListenerFn = null;\n    }\n    if (this.gridster.$options.enableEmptyCellContextMenu && !this.removeEmptyCellContextMenuListenerFn && this.gridster.options.emptyCellContextMenuCallback) {\n      this.removeEmptyCellContextMenuListenerFn = this.gridster.renderer.listen(this.gridster.el, 'contextmenu', this.emptyCellContextMenuCb);\n    } else if (!this.gridster.$options.enableEmptyCellContextMenu && this.removeEmptyCellContextMenuListenerFn) {\n      this.removeEmptyCellContextMenuListenerFn();\n      this.removeEmptyCellContextMenuListenerFn = null;\n    }\n    if (this.gridster.$options.enableEmptyCellDrop && !this.removeEmptyCellDropListenerFn && this.gridster.options.emptyCellDropCallback) {\n      this.removeEmptyCellDropListenerFn = this.gridster.renderer.listen(this.gridster.el, 'drop', this.emptyCellDragDrop);\n      this.gridster.zone.runOutsideAngular(() => {\n        this.removeEmptyCellDragoverListenerFn = this.gridster.renderer.listen(this.gridster.el, 'dragover', this.emptyCellDragOver);\n      });\n      this.removeDocumentDragendListenerFn = this.gridster.renderer.listen('document', 'dragend', () => {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle();\n      });\n    } else if (!this.gridster.$options.enableEmptyCellDrop && this.removeEmptyCellDropListenerFn && this.removeEmptyCellDragoverListenerFn && this.removeDocumentDragendListenerFn) {\n      this.removeEmptyCellDropListenerFn();\n      this.removeEmptyCellDragoverListenerFn();\n      this.removeDocumentDragendListenerFn();\n      this.removeEmptyCellDragoverListenerFn = null;\n      this.removeEmptyCellDropListenerFn = null;\n      this.removeDocumentDragendListenerFn = null;\n    }\n    if (this.gridster.$options.enableEmptyCellDrag && !this.removeEmptyCellMousedownListenerFn && this.gridster.options.emptyCellDragCallback) {\n      this.removeEmptyCellMousedownListenerFn = this.gridster.renderer.listen(this.gridster.el, 'mousedown', this.emptyCellMouseDown);\n      this.removeEmptyCellTouchstartListenerFn = this.gridster.renderer.listen(this.gridster.el, 'touchstart', this.emptyCellMouseDown);\n    } else if (!this.gridster.$options.enableEmptyCellDrag && this.removeEmptyCellMousedownListenerFn && this.removeEmptyCellTouchstartListenerFn) {\n      this.removeEmptyCellMousedownListenerFn();\n      this.removeEmptyCellTouchstartListenerFn();\n      this.removeEmptyCellMousedownListenerFn = null;\n      this.removeEmptyCellTouchstartListenerFn = null;\n    }\n  }\n  getPixelsX(e, rect) {\n    const scale = this.gridster.options.scale;\n    if (scale) {\n      return (e.clientX - rect.left) / scale + this.gridster.el.scrollLeft - this.gridster.gridRenderer.getLeftMargin();\n    }\n    return e.clientX + this.gridster.el.scrollLeft - rect.left - this.gridster.gridRenderer.getLeftMargin();\n  }\n  getPixelsY(e, rect) {\n    const scale = this.gridster.options.scale;\n    if (scale) {\n      return (e.clientY - rect.top) / scale + this.gridster.el.scrollTop - this.gridster.gridRenderer.getTopMargin();\n    }\n    return e.clientY + this.gridster.el.scrollTop - rect.top - this.gridster.gridRenderer.getTopMargin();\n  }\n  getValidItemFromEvent(e, oldItem) {\n    e.preventDefault();\n    e.stopPropagation();\n    GridsterUtils.checkTouchEvent(e);\n    const rect = this.gridster.el.getBoundingClientRect();\n    const x = this.getPixelsX(e, rect);\n    const y = this.getPixelsY(e, rect);\n    const item = {\n      x: this.gridster.pixelsToPositionX(x, Math.floor, true),\n      y: this.gridster.pixelsToPositionY(y, Math.floor, true),\n      cols: this.gridster.$options.defaultItemCols,\n      rows: this.gridster.$options.defaultItemRows\n    };\n    if (oldItem) {\n      item.cols = Math.min(Math.abs(oldItem.x - item.x) + 1, this.gridster.$options.emptyCellDragMaxCols);\n      item.rows = Math.min(Math.abs(oldItem.y - item.y) + 1, this.gridster.$options.emptyCellDragMaxRows);\n      if (oldItem.x < item.x) {\n        item.x = oldItem.x;\n      } else if (oldItem.x - item.x > this.gridster.$options.emptyCellDragMaxCols - 1) {\n        item.x = this.gridster.movingItem ? this.gridster.movingItem.x : 0;\n      }\n      if (oldItem.y < item.y) {\n        item.y = oldItem.y;\n      } else if (oldItem.y - item.y > this.gridster.$options.emptyCellDragMaxRows - 1) {\n        item.y = this.gridster.movingItem ? this.gridster.movingItem.y : 0;\n      }\n    }\n    if (!this.gridster.$options.enableOccupiedCellDrop && this.gridster.checkCollision(item)) {\n      return;\n    }\n    return item;\n  }\n}\nclass GridsterRenderer {\n  constructor(gridster) {\n    this.gridster = gridster;\n    /**\n     * Caches the last grid column styles.\n     * This improves the grid responsiveness by caching and reusing the last style object instead of creating a new one.\n     */\n    this.lastGridColumnStyles = {};\n    /**\n     * Caches the last grid column styles.\n     * This improves the grid responsiveness by caching and reusing the last style object instead of creating a new one.\n     */\n    this.lastGridRowStyles = {};\n  }\n  destroy() {\n    this.gridster = null;\n  }\n  updateItem(el, item, renderer) {\n    if (this.gridster.mobile) {\n      this.clearCellPosition(renderer, el);\n      if (this.gridster.$options.keepFixedHeightInMobile) {\n        renderer.setStyle(el, 'height', (item.rows - 1) * this.gridster.$options.margin + item.rows * this.gridster.$options.fixedRowHeight + 'px');\n      } else {\n        renderer.setStyle(el, 'height', item.rows * this.gridster.curWidth / item.cols + 'px');\n      }\n      if (this.gridster.$options.keepFixedWidthInMobile) {\n        renderer.setStyle(el, 'width', this.gridster.$options.fixedColWidth + 'px');\n      } else {\n        renderer.setStyle(el, 'width', '');\n      }\n      renderer.setStyle(el, 'margin-bottom', this.gridster.$options.margin + 'px');\n      renderer.setStyle(el, DirTypes.LTR ? 'margin-right' : 'margin-left', '');\n    } else {\n      const x = Math.round(this.gridster.curColWidth * item.x);\n      const y = Math.round(this.gridster.curRowHeight * item.y);\n      const width = this.gridster.curColWidth * item.cols - this.gridster.$options.margin;\n      const height = this.gridster.curRowHeight * item.rows - this.gridster.$options.margin;\n      // set the cell style\n      this.setCellPosition(renderer, el, x, y);\n      renderer.setStyle(el, 'width', width + 'px');\n      renderer.setStyle(el, 'height', height + 'px');\n      let marginBottom = null;\n      let marginRight = null;\n      if (this.gridster.$options.outerMargin) {\n        if (this.gridster.rows === item.rows + item.y) {\n          if (this.gridster.$options.outerMarginBottom !== null) {\n            marginBottom = this.gridster.$options.outerMarginBottom + 'px';\n          } else {\n            marginBottom = this.gridster.$options.margin + 'px';\n          }\n        }\n        if (this.gridster.columns === item.cols + item.x) {\n          if (this.gridster.$options.outerMarginBottom !== null) {\n            marginRight = this.gridster.$options.outerMarginRight + 'px';\n          } else {\n            marginRight = this.gridster.$options.margin + 'px';\n          }\n        }\n      }\n      renderer.setStyle(el, 'margin-bottom', marginBottom);\n      renderer.setStyle(el, DirTypes.LTR ? 'margin-right' : 'margin-left', marginRight);\n    }\n  }\n  updateGridster() {\n    let addClass = '';\n    let removeClass1 = '';\n    let removeClass2 = '';\n    let removeClass3 = '';\n    if (this.gridster.$options.gridType === GridType.Fit) {\n      addClass = GridType.Fit;\n      removeClass1 = GridType.ScrollVertical;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.ScrollVertical) {\n      this.gridster.curRowHeight = this.gridster.curColWidth * this.gridster.$options.rowHeightRatio;\n      addClass = GridType.ScrollVertical;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.ScrollHorizontal) {\n      const widthRatio = this.gridster.$options.rowHeightRatio;\n      const calWidthRatio = widthRatio >= 1 ? widthRatio : widthRatio + 1;\n      this.gridster.curColWidth = this.gridster.curRowHeight * calWidthRatio;\n      addClass = GridType.ScrollHorizontal;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.Fixed) {\n      this.gridster.curColWidth = this.gridster.$options.fixedColWidth + (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight + (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.Fixed;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.ScrollHorizontal;\n    } else if (this.gridster.$options.gridType === GridType.VerticalFixed) {\n      this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight + (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.ScrollVertical;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.HorizontalFixed) {\n      this.gridster.curColWidth = this.gridster.$options.fixedColWidth + (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.ScrollHorizontal;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.Fixed;\n    }\n    if (this.gridster.mobile || this.gridster.$options.setGridSize && this.gridster.$options.gridType !== GridType.Fit) {\n      this.gridster.renderer.removeClass(this.gridster.el, addClass);\n    } else {\n      this.gridster.renderer.addClass(this.gridster.el, addClass);\n    }\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass1);\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass2);\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass3);\n  }\n  getGridColumnStyle(i) {\n    // generates the new style\n    const newPos = {\n      left: this.gridster.curColWidth * i,\n      width: this.gridster.curColWidth - this.gridster.$options.margin,\n      height: this.gridster.gridRows.length * this.gridster.curRowHeight - this.gridster.$options.margin,\n      style: {}\n    };\n    newPos.style = {\n      ...this.getLeftPosition(newPos.left),\n      width: newPos.width + 'px',\n      height: newPos.height + 'px'\n    };\n    // use the last cached style if it has same values as the generated one\n    const last = this.lastGridColumnStyles[i];\n    if (last && last.left === newPos.left && last.width === newPos.width && last.height === newPos.height) {\n      return last.style;\n    }\n    // cache and set new style\n    this.lastGridColumnStyles[i] = newPos;\n    return newPos.style;\n  }\n  getGridRowStyle(i) {\n    // generates the new style\n    const newPos = {\n      top: this.gridster.curRowHeight * i,\n      width: this.gridster.gridColumns.length * this.gridster.curColWidth + this.gridster.$options.margin,\n      height: this.gridster.curRowHeight - this.gridster.$options.margin,\n      style: {}\n    };\n    newPos.style = {\n      ...this.getTopPosition(newPos.top),\n      width: newPos.width + 'px',\n      height: newPos.height + 'px'\n    };\n    // use the last cached style if it has same values as the generated one\n    const last = this.lastGridRowStyles[i];\n    if (last && last.top === newPos.top && last.width === newPos.width && last.height === newPos.height) {\n      return last.style;\n    }\n    // cache and set new style\n    this.lastGridRowStyles[i] = newPos;\n    return newPos.style;\n  }\n  getLeftPosition(d) {\n    const dPosition = this.gridster.$options.dirType === DirTypes.RTL ? -d : d;\n    if (this.gridster.$options.useTransformPositioning) {\n      return {\n        transform: 'translateX(' + dPosition + 'px)'\n      };\n    } else {\n      return {\n        left: this.getLeftMargin() + dPosition + 'px'\n      };\n    }\n  }\n  getTopPosition(d) {\n    if (this.gridster.$options.useTransformPositioning) {\n      return {\n        transform: 'translateY(' + d + 'px)'\n      };\n    } else {\n      return {\n        top: this.getTopMargin() + d + 'px'\n      };\n    }\n  }\n  clearCellPosition(renderer, el) {\n    if (this.gridster.$options.useTransformPositioning) {\n      renderer.setStyle(el, 'transform', '');\n    } else {\n      renderer.setStyle(el, 'top', '');\n      renderer.setStyle(el, 'left', '');\n    }\n  }\n  setCellPosition(renderer, el, x, y) {\n    const xPosition = this.gridster.$options.dirType === DirTypes.RTL ? -x : x;\n    if (this.gridster.$options.useTransformPositioning) {\n      const transform = 'translate3d(' + xPosition + 'px, ' + y + 'px, 0)';\n      renderer.setStyle(el, 'transform', transform);\n    } else {\n      renderer.setStyle(el, 'left', this.getLeftMargin() + xPosition + 'px');\n      renderer.setStyle(el, 'top', this.getTopMargin() + y + 'px');\n    }\n  }\n  getLeftMargin() {\n    if (this.gridster.$options.outerMargin) {\n      if (this.gridster.$options.outerMarginLeft !== null) {\n        return this.gridster.$options.outerMarginLeft;\n      } else {\n        return this.gridster.$options.margin;\n      }\n    } else {\n      return 0;\n    }\n  }\n  getTopMargin() {\n    if (this.gridster.$options.outerMargin) {\n      if (this.gridster.$options.outerMarginTop !== null) {\n        return this.gridster.$options.outerMarginTop;\n      } else {\n        return this.gridster.$options.margin;\n      }\n    } else {\n      return 0;\n    }\n  }\n}\nclass GridsterPreviewComponent {\n  constructor(el, renderer) {\n    this.renderer = renderer;\n    this.el = el.nativeElement;\n  }\n  ngOnInit() {\n    this.sub = this.previewStyle$.subscribe(options => this.previewStyle(options));\n  }\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n  previewStyle(item) {\n    if (item) {\n      this.renderer.setStyle(this.el, 'display', 'block');\n      this.gridRenderer.updateItem(this.el, item, this.renderer);\n    } else {\n      this.renderer.setStyle(this.el, 'display', '');\n    }\n  }\n  static #_ = this.ɵfac = function GridsterPreviewComponent_Factory(t) {\n    return new (t || GridsterPreviewComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: GridsterPreviewComponent,\n    selectors: [[\"gridster-preview\"]],\n    inputs: {\n      previewStyle$: \"previewStyle$\",\n      gridRenderer: \"gridRenderer\"\n    },\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 0,\n    vars: 0,\n    template: function GridsterPreviewComponent_Template(rf, ctx) {},\n    styles: [\"gridster-preview{position:absolute;display:none;background:rgba(0,0,0,.15)}\\n\"],\n    encapsulation: 2\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GridsterPreviewComponent, [{\n    type: Component,\n    args: [{\n      selector: 'gridster-preview',\n      template: '',\n      encapsulation: ViewEncapsulation.None,\n      standalone: true,\n      styles: [\"gridster-preview{position:absolute;display:none;background:rgba(0,0,0,.15)}\\n\"]\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }, {\n    type: i0.Renderer2\n  }], {\n    previewStyle$: [{\n      type: Input\n    }],\n    gridRenderer: [{\n      type: Input\n    }]\n  });\n})();\nclass GridsterComponent {\n  constructor(el, renderer, cdRef, zone) {\n    this.renderer = renderer;\n    this.cdRef = cdRef;\n    this.zone = zone;\n    this.columns = 0;\n    this.rows = 0;\n    this.gridColumns = [];\n    this.gridRows = [];\n    this.previewStyle$ = new EventEmitter();\n    this.calculateLayout$ = new Subject();\n    this.resize$ = new Subject();\n    this.destroy$ = new Subject();\n    this.optionsChanged = () => {\n      this.setOptions();\n      let widgetsIndex = this.grid.length - 1;\n      let widget;\n      for (; widgetsIndex >= 0; widgetsIndex--) {\n        widget = this.grid[widgetsIndex];\n        widget.updateOptions();\n      }\n      this.calculateLayout();\n    };\n    this.onResize = () => {\n      if (this.el.clientWidth) {\n        if (this.options.setGridSize) {\n          // reset width/height so the size is recalculated afterwards\n          this.renderer.setStyle(this.el, 'width', '');\n          this.renderer.setStyle(this.el, 'height', '');\n        }\n        this.setGridSize();\n        this.calculateLayout();\n      }\n    };\n    this.getNextPossiblePosition = (newItem, startingFrom = {}) => {\n      if (newItem.cols === -1) {\n        newItem.cols = this.$options.defaultItemCols;\n      }\n      if (newItem.rows === -1) {\n        newItem.rows = this.$options.defaultItemRows;\n      }\n      this.setGridDimensions();\n      let rowsIndex = startingFrom.y || 0;\n      let colsIndex;\n      for (; rowsIndex < this.rows; rowsIndex++) {\n        newItem.y = rowsIndex;\n        colsIndex = startingFrom.x || 0;\n        for (; colsIndex < this.columns; colsIndex++) {\n          newItem.x = colsIndex;\n          if (!this.checkCollision(newItem)) {\n            return true;\n          }\n        }\n      }\n      const canAddToRows = this.$options.maxRows >= this.rows + newItem.rows;\n      const canAddToColumns = this.$options.maxCols >= this.columns + newItem.cols;\n      const addToRows = this.rows <= this.columns && canAddToRows;\n      if (!addToRows && canAddToColumns) {\n        newItem.x = this.columns;\n        newItem.y = 0;\n        return true;\n      } else if (canAddToRows) {\n        newItem.y = this.rows;\n        newItem.x = 0;\n        return true;\n      }\n      return false;\n    };\n    this.getFirstPossiblePosition = item => {\n      const tmpItem = Object.assign({}, item);\n      this.getNextPossiblePosition(tmpItem);\n      return tmpItem;\n    };\n    this.getLastPossiblePosition = item => {\n      let farthestItem = {\n        y: 0,\n        x: 0\n      };\n      farthestItem = this.grid.reduce((prev, curr) => {\n        const currCoords = {\n          y: curr.$item.y + curr.$item.rows - 1,\n          x: curr.$item.x + curr.$item.cols - 1\n        };\n        if (GridsterUtils.compareItems(prev, currCoords) === 1) {\n          return currCoords;\n        } else {\n          return prev;\n        }\n      }, farthestItem);\n      const tmpItem = Object.assign({}, item);\n      this.getNextPossiblePosition(tmpItem, farthestItem);\n      return tmpItem;\n    };\n    this.el = el.nativeElement;\n    this.$options = JSON.parse(JSON.stringify(GridsterConfigService));\n    this.mobile = false;\n    this.curWidth = 0;\n    this.curHeight = 0;\n    this.grid = [];\n    this.curColWidth = 0;\n    this.curRowHeight = 0;\n    this.dragInProgress = false;\n    this.emptyCell = new GridsterEmptyCell(this);\n    this.compact = new GridsterCompact(this);\n    this.gridRenderer = new GridsterRenderer(this);\n  }\n  // ------ Function for swapWhileDragging option\n  // identical to checkCollision() except that here we add boundaries.\n  static checkCollisionTwoItemsForSwaping(item, item2) {\n    // if the cols or rows of the items are 1 , doesnt make any sense to set a boundary. Only if the item is bigger we set a boundary\n    const horizontalBoundaryItem1 = item.cols === 1 ? 0 : 1;\n    const horizontalBoundaryItem2 = item2.cols === 1 ? 0 : 1;\n    const verticalBoundaryItem1 = item.rows === 1 ? 0 : 1;\n    const verticalBoundaryItem2 = item2.rows === 1 ? 0 : 1;\n    return item.x + horizontalBoundaryItem1 < item2.x + item2.cols && item.x + item.cols > item2.x + horizontalBoundaryItem2 && item.y + verticalBoundaryItem1 < item2.y + item2.rows && item.y + item.rows > item2.y + verticalBoundaryItem2;\n  }\n  checkCollisionTwoItems(item, item2) {\n    const collision = item.x < item2.x + item2.cols && item.x + item.cols > item2.x && item.y < item2.y + item2.rows && item.y + item.rows > item2.y;\n    if (!collision) {\n      return false;\n    }\n    if (!this.$options.allowMultiLayer) {\n      return true;\n    }\n    const defaultLayerIndex = this.$options.defaultLayerIndex;\n    const layerIndex = item.layerIndex === undefined ? defaultLayerIndex : item.layerIndex;\n    const layerIndex2 = item2.layerIndex === undefined ? defaultLayerIndex : item2.layerIndex;\n    return layerIndex === layerIndex2;\n  }\n  ngOnInit() {\n    if (this.options.initCallback) {\n      this.options.initCallback(this);\n    }\n    this.calculateLayout$.pipe(debounceTime(0), takeUntil(this.destroy$)).subscribe(() => this.calculateLayout());\n    this.resize$.pipe(\n    // Cancel previously scheduled DOM timer if `calculateLayout()` has been called\n    // within this time range.\n    switchMap(() => timer(100)), takeUntil(this.destroy$)).subscribe(() => this.resize());\n  }\n  ngOnChanges(changes) {\n    if (changes.options) {\n      this.setOptions();\n      this.options.api = {\n        optionsChanged: this.optionsChanged,\n        resize: this.onResize,\n        getNextPossiblePosition: this.getNextPossiblePosition,\n        getFirstPossiblePosition: this.getFirstPossiblePosition,\n        getLastPossiblePosition: this.getLastPossiblePosition,\n        getItemComponent: item => this.getItemComponent(item)\n      };\n      this.columns = this.$options.minCols;\n      this.rows = this.$options.minRows + this.$options.addEmptyRowsCount;\n      this.setGridSize();\n      this.calculateLayout();\n    }\n  }\n  resize() {\n    let height;\n    let width;\n    if (this.$options.gridType === 'fit' && !this.mobile) {\n      width = this.el.offsetWidth;\n      height = this.el.offsetHeight;\n    } else {\n      width = this.el.clientWidth;\n      height = this.el.clientHeight;\n    }\n    if ((width !== this.curWidth || height !== this.curHeight) && this.checkIfToResize()) {\n      this.onResize();\n    }\n  }\n  setOptions() {\n    this.$options = GridsterUtils.merge(this.$options, this.options, this.$options);\n    if (!this.$options.disableWindowResize && !this.windowResize) {\n      this.windowResize = this.renderer.listen('window', 'resize', this.onResize);\n    } else if (this.$options.disableWindowResize && this.windowResize) {\n      this.windowResize();\n      this.windowResize = null;\n    }\n    this.emptyCell.updateOptions();\n  }\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.previewStyle$.complete();\n    if (this.windowResize) {\n      this.windowResize();\n    }\n    if (this.options && this.options.destroyCallback) {\n      this.options.destroyCallback(this);\n    }\n    if (this.options && this.options.api) {\n      this.options.api.resize = undefined;\n      this.options.api.optionsChanged = undefined;\n      this.options.api.getNextPossiblePosition = undefined;\n      this.options.api = undefined;\n    }\n    this.emptyCell.destroy();\n    this.emptyCell = null;\n    this.compact.destroy();\n    this.compact = null;\n  }\n  checkIfToResize() {\n    const clientWidth = this.el.clientWidth;\n    const offsetWidth = this.el.offsetWidth;\n    const scrollWidth = this.el.scrollWidth;\n    const clientHeight = this.el.clientHeight;\n    const offsetHeight = this.el.offsetHeight;\n    const scrollHeight = this.el.scrollHeight;\n    const verticalScrollPresent = clientWidth < offsetWidth && scrollHeight > offsetHeight && scrollHeight - offsetHeight < offsetWidth - clientWidth;\n    const horizontalScrollPresent = clientHeight < offsetHeight && scrollWidth > offsetWidth && scrollWidth - offsetWidth < offsetHeight - clientHeight;\n    if (verticalScrollPresent) {\n      return false;\n    }\n    return !horizontalScrollPresent;\n  }\n  checkIfMobile() {\n    if (this.$options.useBodyForBreakpoint) {\n      return this.$options.mobileBreakpoint > document.body.clientWidth;\n    } else {\n      return this.$options.mobileBreakpoint > this.curWidth;\n    }\n  }\n  setGridSize() {\n    const el = this.el;\n    let width;\n    let height;\n    if (this.$options.setGridSize || this.$options.gridType === GridType.Fit && !this.mobile) {\n      width = el.offsetWidth;\n      height = el.offsetHeight;\n    } else {\n      width = el.clientWidth;\n      height = el.clientHeight;\n    }\n    this.curWidth = width;\n    this.curHeight = height;\n  }\n  setGridDimensions() {\n    this.setGridSize();\n    if (!this.mobile && this.checkIfMobile()) {\n      this.mobile = !this.mobile;\n      this.renderer.addClass(this.el, 'mobile');\n    } else if (this.mobile && !this.checkIfMobile()) {\n      this.mobile = !this.mobile;\n      this.renderer.removeClass(this.el, 'mobile');\n    }\n    let rows = this.$options.minRows;\n    let columns = this.$options.minCols;\n    let widgetsIndex = this.grid.length - 1;\n    let widget;\n    for (; widgetsIndex >= 0; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      if (!widget.notPlaced) {\n        rows = Math.max(rows, widget.$item.y + widget.$item.rows);\n        columns = Math.max(columns, widget.$item.x + widget.$item.cols);\n      }\n    }\n    rows += this.$options.addEmptyRowsCount;\n    if (this.columns !== columns || this.rows !== rows) {\n      this.columns = columns;\n      this.rows = rows;\n      if (this.options.gridSizeChangedCallback) {\n        this.options.gridSizeChangedCallback(this);\n      }\n    }\n  }\n  calculateLayout() {\n    if (this.compact) {\n      this.compact.checkCompact();\n    }\n    this.setGridDimensions();\n    if (this.$options.outerMargin) {\n      let marginWidth = -this.$options.margin;\n      if (this.$options.outerMarginLeft !== null) {\n        marginWidth += this.$options.outerMarginLeft;\n        this.renderer.setStyle(this.el, 'padding-left', this.$options.outerMarginLeft + 'px');\n      } else {\n        marginWidth += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-left', this.$options.margin + 'px');\n      }\n      if (this.$options.outerMarginRight !== null) {\n        marginWidth += this.$options.outerMarginRight;\n        this.renderer.setStyle(this.el, 'padding-right', this.$options.outerMarginRight + 'px');\n      } else {\n        marginWidth += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-right', this.$options.margin + 'px');\n      }\n      this.curColWidth = (this.curWidth - marginWidth) / this.columns;\n      let marginHeight = -this.$options.margin;\n      if (this.$options.outerMarginTop !== null) {\n        marginHeight += this.$options.outerMarginTop;\n        this.renderer.setStyle(this.el, 'padding-top', this.$options.outerMarginTop + 'px');\n      } else {\n        marginHeight += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-top', this.$options.margin + 'px');\n      }\n      if (this.$options.outerMarginBottom !== null) {\n        marginHeight += this.$options.outerMarginBottom;\n        this.renderer.setStyle(this.el, 'padding-bottom', this.$options.outerMarginBottom + 'px');\n      } else {\n        marginHeight += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-bottom', this.$options.margin + 'px');\n      }\n      this.curRowHeight = (this.curHeight - marginHeight) / this.rows * this.$options.rowHeightRatio;\n    } else {\n      this.curColWidth = (this.curWidth + this.$options.margin) / this.columns;\n      this.curRowHeight = (this.curHeight + this.$options.margin) / this.rows * this.$options.rowHeightRatio;\n      this.renderer.setStyle(this.el, 'padding-left', 0 + 'px');\n      this.renderer.setStyle(this.el, 'padding-right', 0 + 'px');\n      this.renderer.setStyle(this.el, 'padding-top', 0 + 'px');\n      this.renderer.setStyle(this.el, 'padding-bottom', 0 + 'px');\n    }\n    this.gridRenderer.updateGridster();\n    if (this.$options.setGridSize) {\n      this.renderer.addClass(this.el, 'gridSize');\n      if (!this.mobile) {\n        this.renderer.setStyle(this.el, 'width', this.columns * this.curColWidth + this.$options.margin + 'px');\n        this.renderer.setStyle(this.el, 'height', this.rows * this.curRowHeight + this.$options.margin + 'px');\n      }\n    } else {\n      this.renderer.removeClass(this.el, 'gridSize');\n      this.renderer.setStyle(this.el, 'width', '');\n      this.renderer.setStyle(this.el, 'height', '');\n    }\n    this.updateGrid();\n    let widgetsIndex = this.grid.length - 1;\n    let widget;\n    for (; widgetsIndex >= 0; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      widget.setSize();\n      widget.drag.toggle();\n      widget.resize.toggle();\n    }\n    this.resize$.next();\n  }\n  updateGrid() {\n    if (this.$options.displayGrid === 'always' && !this.mobile) {\n      this.renderer.addClass(this.el, 'display-grid');\n    } else if (this.$options.displayGrid === 'onDrag&Resize' && this.dragInProgress) {\n      this.renderer.addClass(this.el, 'display-grid');\n    } else if (this.$options.displayGrid === 'none' || !this.dragInProgress || this.mobile) {\n      this.renderer.removeClass(this.el, 'display-grid');\n    }\n    this.setGridDimensions();\n    this.gridColumns.length = GridsterComponent.getNewArrayLength(this.columns, this.curWidth, this.curColWidth);\n    this.gridRows.length = GridsterComponent.getNewArrayLength(this.rows, this.curHeight, this.curRowHeight);\n    this.cdRef.markForCheck();\n  }\n  addItem(itemComponent) {\n    if (itemComponent.$item.cols === undefined) {\n      itemComponent.$item.cols = this.$options.defaultItemCols;\n      itemComponent.item.cols = itemComponent.$item.cols;\n      itemComponent.itemChanged();\n    }\n    if (itemComponent.$item.rows === undefined) {\n      itemComponent.$item.rows = this.$options.defaultItemRows;\n      itemComponent.item.rows = itemComponent.$item.rows;\n      itemComponent.itemChanged();\n    }\n    if (itemComponent.$item.x === -1 || itemComponent.$item.y === -1) {\n      this.autoPositionItem(itemComponent);\n    } else if (this.checkCollision(itemComponent.$item)) {\n      if (!this.$options.disableWarnings) {\n        itemComponent.notPlaced = true;\n        console.warn(\"Can't be placed in the bounds of the dashboard, trying to auto position!/n\" + JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n      }\n      if (!this.$options.disableAutoPositionOnConflict) {\n        this.autoPositionItem(itemComponent);\n      } else {\n        itemComponent.notPlaced = true;\n      }\n    }\n    this.grid.push(itemComponent);\n    this.calculateLayout$.next();\n  }\n  removeItem(itemComponent) {\n    this.grid.splice(this.grid.indexOf(itemComponent), 1);\n    this.calculateLayout$.next();\n    if (this.options.itemRemovedCallback) {\n      this.options.itemRemovedCallback(itemComponent.item, itemComponent);\n    }\n  }\n  checkCollision(item) {\n    let collision = false;\n    if (this.options.itemValidateCallback) {\n      collision = !this.options.itemValidateCallback(item);\n    }\n    if (!collision && this.checkGridCollision(item)) {\n      collision = true;\n    }\n    if (!collision) {\n      const c = this.findItemWithItem(item);\n      if (c) {\n        collision = c;\n      }\n    }\n    return collision;\n  }\n  checkGridCollision(item) {\n    const noNegativePosition = item.y > -1 && item.x > -1;\n    const maxGridCols = item.cols + item.x <= this.$options.maxCols;\n    const maxGridRows = item.rows + item.y <= this.$options.maxRows;\n    const maxItemCols = item.maxItemCols === undefined ? this.$options.maxItemCols : item.maxItemCols;\n    const minItemCols = item.minItemCols === undefined ? this.$options.minItemCols : item.minItemCols;\n    const maxItemRows = item.maxItemRows === undefined ? this.$options.maxItemRows : item.maxItemRows;\n    const minItemRows = item.minItemRows === undefined ? this.$options.minItemRows : item.minItemRows;\n    const inColsLimits = item.cols <= maxItemCols && item.cols >= minItemCols;\n    const inRowsLimits = item.rows <= maxItemRows && item.rows >= minItemRows;\n    const minAreaLimit = item.minItemArea === undefined ? this.$options.minItemArea : item.minItemArea;\n    const maxAreaLimit = item.maxItemArea === undefined ? this.$options.maxItemArea : item.maxItemArea;\n    const area = item.cols * item.rows;\n    const inMinArea = minAreaLimit <= area;\n    const inMaxArea = maxAreaLimit >= area;\n    return !(noNegativePosition && maxGridCols && maxGridRows && inColsLimits && inRowsLimits && inMinArea && inMaxArea);\n  }\n  findItemWithItem(item) {\n    let widgetsIndex = 0;\n    let widget;\n    for (; widgetsIndex < this.grid.length; widgetsIndex++) {\n      widget = this.grid[widgetsIndex];\n      if (widget.$item !== item && this.checkCollisionTwoItems(widget.$item, item)) {\n        return widget;\n      }\n    }\n    return false;\n  }\n  findItemsWithItem(item) {\n    const a = [];\n    let widgetsIndex = 0;\n    let widget;\n    for (; widgetsIndex < this.grid.length; widgetsIndex++) {\n      widget = this.grid[widgetsIndex];\n      if (widget.$item !== item && this.checkCollisionTwoItems(widget.$item, item)) {\n        a.push(widget);\n      }\n    }\n    return a;\n  }\n  autoPositionItem(itemComponent) {\n    if (this.getNextPossiblePosition(itemComponent.$item)) {\n      itemComponent.notPlaced = false;\n      itemComponent.item.x = itemComponent.$item.x;\n      itemComponent.item.y = itemComponent.$item.y;\n      itemComponent.itemChanged();\n    } else {\n      itemComponent.notPlaced = true;\n      if (!this.$options.disableWarnings) {\n        console.warn(\"Can't be placed in the bounds of the dashboard!/n\" + JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n      }\n    }\n  }\n  pixelsToPositionX(x, roundingMethod, noLimit) {\n    const position = roundingMethod(x / this.curColWidth);\n    if (noLimit) {\n      return position;\n    } else {\n      return Math.max(position, 0);\n    }\n  }\n  pixelsToPositionY(y, roundingMethod, noLimit) {\n    const position = roundingMethod(y / this.curRowHeight);\n    if (noLimit) {\n      return position;\n    } else {\n      return Math.max(position, 0);\n    }\n  }\n  positionXToPixels(x) {\n    return x * this.curColWidth;\n  }\n  positionYToPixels(y) {\n    return y * this.curRowHeight;\n  }\n  getItemComponent(item) {\n    return this.grid.find(c => c.item === item);\n  }\n  // ------ Functions for swapWhileDragging option\n  // identical to checkCollision() except that this function calls findItemWithItemForSwaping() instead of findItemWithItem()\n  checkCollisionForSwaping(item) {\n    let collision = false;\n    if (this.options.itemValidateCallback) {\n      collision = !this.options.itemValidateCallback(item);\n    }\n    if (!collision && this.checkGridCollision(item)) {\n      collision = true;\n    }\n    if (!collision) {\n      const c = this.findItemWithItemForSwapping(item);\n      if (c) {\n        collision = c;\n      }\n    }\n    return collision;\n  }\n  // identical to findItemWithItem() except that this function calls checkCollisionTwoItemsForSwaping() instead of checkCollisionTwoItems()\n  findItemWithItemForSwapping(item) {\n    let widgetsIndex = this.grid.length - 1;\n    let widget;\n    for (; widgetsIndex > -1; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      if (widget.$item !== item && GridsterComponent.checkCollisionTwoItemsForSwaping(widget.$item, item)) {\n        return widget;\n      }\n    }\n    return false;\n  }\n  previewStyle(drag = false) {\n    if (this.movingItem) {\n      if (this.compact && drag) {\n        this.compact.checkCompactItem(this.movingItem);\n      }\n      this.previewStyle$.next(this.movingItem);\n    } else {\n      this.previewStyle$.next(null);\n    }\n  }\n  // ------ End of functions for swapWhileDragging option\n  // eslint-disable-next-line @typescript-eslint/member-ordering\n  static getNewArrayLength(length, overallSize, size) {\n    const newLength = Math.max(length, Math.floor(overallSize / size));\n    if (newLength < 0) {\n      return 0;\n    }\n    if (Number.isFinite(newLength)) {\n      return Math.floor(newLength);\n    }\n    return 0;\n  }\n  static #_ = this.ɵfac = function GridsterComponent_Factory(t) {\n    return new (t || GridsterComponent)(i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(Renderer2), i0.ɵɵdirectiveInject(ChangeDetectorRef), i0.ɵɵdirectiveInject(NgZone));\n  };\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: GridsterComponent,\n    selectors: [[\"gridster\"]],\n    inputs: {\n      options: \"options\"\n    },\n    standalone: true,\n    features: [i0.ɵɵNgOnChangesFeature, i0.ɵɵStandaloneFeature],\n    ngContentSelectors: _c0,\n    decls: 4,\n    vars: 4,\n    consts: [[\"class\", \"gridster-column\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"gridster-row\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\"], [1, \"gridster-preview\", 3, \"gridRenderer\", \"previewStyle$\"], [1, \"gridster-column\", 3, \"ngStyle\"], [1, \"gridster-row\", 3, \"ngStyle\"]],\n    template: function GridsterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵtemplate(0, GridsterComponent_div_0_Template, 1, 1, \"div\", 0);\n        i0.ɵɵtemplate(1, GridsterComponent_div_1_Template, 1, 1, \"div\", 1);\n        i0.ɵɵprojection(2);\n        i0.ɵɵelement(3, \"gridster-preview\", 2);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngForOf\", ctx.gridColumns);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.gridRows);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"gridRenderer\", ctx.gridRenderer)(\"previewStyle$\", ctx.previewStyle$);\n      }\n    },\n    dependencies: [NgForOf, NgStyle, GridsterPreviewComponent],\n    styles: [\"gridster{position:relative;box-sizing:border-box;background:grey;width:100%;height:100%;-webkit-user-select:none;user-select:none;display:block}gridster.fit{overflow-x:hidden;overflow-y:hidden}gridster.scrollVertical{overflow-x:hidden;overflow-y:auto}gridster.scrollHorizontal{overflow-x:auto;overflow-y:hidden}gridster.fixed{overflow:auto}gridster.mobile{overflow-x:hidden;overflow-y:auto}gridster.mobile gridster-item{position:relative}gridster.gridSize{height:initial;width:initial}gridster.gridSize.fit{height:100%;width:100%}gridster .gridster-column,gridster .gridster-row{position:absolute;display:none;transition:.3s;box-sizing:border-box}gridster.display-grid .gridster-column,gridster.display-grid .gridster-row{display:block}gridster .gridster-column{border-left:1px solid white;border-right:1px solid white}gridster .gridster-row{border-top:1px solid white;border-bottom:1px solid white}\\n\"],\n    encapsulation: 2\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GridsterComponent, [{\n    type: Component,\n    args: [{\n      selector: 'gridster',\n      encapsulation: ViewEncapsulation.None,\n      standalone: true,\n      imports: [NgForOf, NgStyle, GridsterPreviewComponent],\n      template: \"<div\\n  class=\\\"gridster-column\\\"\\n  *ngFor=\\\"let column of gridColumns; let i = index;\\\"\\n  [ngStyle]=\\\"gridRenderer.getGridColumnStyle(i)\\\"\\n></div>\\n<div\\n  class=\\\"gridster-row\\\"\\n  *ngFor=\\\"let row of gridRows; let i = index;\\\"\\n  [ngStyle]=\\\"gridRenderer.getGridRowStyle(i)\\\"\\n></div>\\n<ng-content></ng-content>\\n<gridster-preview\\n  [gridRenderer]=\\\"gridRenderer\\\"\\n  [previewStyle$]=\\\"previewStyle$\\\"\\n  class=\\\"gridster-preview\\\"\\n></gridster-preview>\\n\",\n      styles: [\"gridster{position:relative;box-sizing:border-box;background:grey;width:100%;height:100%;-webkit-user-select:none;user-select:none;display:block}gridster.fit{overflow-x:hidden;overflow-y:hidden}gridster.scrollVertical{overflow-x:hidden;overflow-y:auto}gridster.scrollHorizontal{overflow-x:auto;overflow-y:hidden}gridster.fixed{overflow:auto}gridster.mobile{overflow-x:hidden;overflow-y:auto}gridster.mobile gridster-item{position:relative}gridster.gridSize{height:initial;width:initial}gridster.gridSize.fit{height:100%;width:100%}gridster .gridster-column,gridster .gridster-row{position:absolute;display:none;transition:.3s;box-sizing:border-box}gridster.display-grid .gridster-column,gridster.display-grid .gridster-row{display:block}gridster .gridster-column{border-left:1px solid white;border-right:1px solid white}gridster .gridster-row{border-top:1px solid white;border-bottom:1px solid white}\\n\"]\n    }]\n  }], () => [{\n    type: i0.ElementRef,\n    decorators: [{\n      type: Inject,\n      args: [ElementRef]\n    }]\n  }, {\n    type: i0.Renderer2,\n    decorators: [{\n      type: Inject,\n      args: [Renderer2]\n    }]\n  }, {\n    type: i0.ChangeDetectorRef,\n    decorators: [{\n      type: Inject,\n      args: [ChangeDetectorRef]\n    }]\n  }, {\n    type: i0.NgZone,\n    decorators: [{\n      type: Inject,\n      args: [NgZone]\n    }]\n  }], {\n    options: [{\n      type: Input\n    }]\n  });\n})();\nclass GridsterPush {\n  constructor(gridsterItem) {\n    this.iteration = 0;\n    this.pushedItems = [];\n    this.pushedItemsTemp = [];\n    this.pushedItemsTempPath = [];\n    this.pushedItemsPath = [];\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n    this.tryPattern = {\n      fromEast: [this.tryWest, this.trySouth, this.tryNorth, this.tryEast],\n      fromWest: [this.tryEast, this.trySouth, this.tryNorth, this.tryWest],\n      fromNorth: [this.trySouth, this.tryEast, this.tryWest, this.tryNorth],\n      fromSouth: [this.tryNorth, this.tryEast, this.tryWest, this.trySouth]\n    };\n    this.fromSouth = 'fromSouth';\n    this.fromNorth = 'fromNorth';\n    this.fromEast = 'fromEast';\n    this.fromWest = 'fromWest';\n  }\n  destroy() {\n    this.gridster = this.gridsterItem = null;\n  }\n  pushItems(direction, disable) {\n    if (this.gridster.$options.pushItems && !disable) {\n      this.pushedItemsOrder = [];\n      this.iteration = 0;\n      const pushed = this.push(this.gridsterItem, direction);\n      if (!pushed) {\n        this.restoreTempItems();\n      }\n      this.pushedItemsOrder = [];\n      this.pushedItemsTemp = [];\n      this.pushedItemsTempPath = [];\n      return pushed;\n    } else {\n      return false;\n    }\n  }\n  restoreTempItems() {\n    let i = this.pushedItemsTemp.length - 1;\n    for (; i > -1; i--) {\n      this.removeFromTempPushed(this.pushedItemsTemp[i]);\n    }\n  }\n  restoreItems() {\n    let i = 0;\n    const l = this.pushedItems.length;\n    let pushedItem;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.$item.x = pushedItem.item.x || 0;\n      pushedItem.$item.y = pushedItem.item.y || 0;\n      pushedItem.setSize();\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n  setPushedItems() {\n    let i = 0;\n    const l = this.pushedItems.length;\n    let pushedItem;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n  checkPushBack() {\n    let i = this.pushedItems.length - 1;\n    let change = false;\n    for (; i > -1; i--) {\n      if (this.checkPushedItem(this.pushedItems[i], i)) {\n        change = true;\n      }\n    }\n    if (change) {\n      this.checkPushBack();\n    }\n  }\n  push(gridsterItem, direction) {\n    if (this.iteration > 100) {\n      console.warn('max iteration reached');\n      return false;\n    }\n    if (this.gridster.checkGridCollision(gridsterItem.$item)) {\n      return false;\n    }\n    if (direction === '') {\n      return false;\n    }\n    const conflicts = this.gridster.findItemsWithItem(gridsterItem.$item);\n    const invert = direction === this.fromNorth || direction === this.fromWest;\n    // sort the list of conflicts in order of [y,x]. Invert when the push is from north and west\n    // this is done so they don't conflict witch each other and revert positions, keeping the previous order\n    conflicts.sort((a, b) => {\n      if (invert) {\n        return b.$item.y - a.$item.y || b.$item.x - a.$item.x;\n      } else {\n        return a.$item.y - b.$item.y || a.$item.x - b.$item.x;\n      }\n    });\n    let i = 0;\n    let itemCollision;\n    let makePush = true;\n    const pushedItems = [];\n    for (; i < conflicts.length; i++) {\n      itemCollision = conflicts[i];\n      if (itemCollision === this.gridsterItem) {\n        continue;\n      }\n      if (!itemCollision.canBeDragged()) {\n        makePush = false;\n        break;\n      }\n      const p = this.pushedItemsTemp.indexOf(itemCollision);\n      if (p > -1 && this.pushedItemsTempPath[p].length > 10) {\n        // stop if item is pushed more than 10 times to break infinite loops\n        makePush = false;\n        break;\n      }\n      if (this.tryPattern[direction][0].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        pushedItems.push(itemCollision);\n      } else if (this.tryPattern[direction][1].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        pushedItems.push(itemCollision);\n      } else if (this.tryPattern[direction][2].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        pushedItems.push(itemCollision);\n      } else if (this.tryPattern[direction][3].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        pushedItems.push(itemCollision);\n      } else {\n        makePush = false;\n        break;\n      }\n    }\n    if (!makePush) {\n      i = this.pushedItemsOrder.lastIndexOf(pushedItems[0]);\n      if (i > -1) {\n        let j = this.pushedItemsOrder.length - 1;\n        for (; j >= i; j--) {\n          itemCollision = this.pushedItemsOrder[j];\n          this.pushedItemsOrder.pop();\n          this.removeFromTempPushed(itemCollision);\n          this.removeFromPushedItem(itemCollision);\n        }\n      }\n    }\n    this.iteration++;\n    return makePush;\n  }\n  trySouth(gridsterItemCollide, gridsterItem) {\n    if (!this.gridster.$options.pushDirections.south) {\n      return false;\n    }\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n    if (this.push(gridsterItemCollide, this.fromNorth)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n  tryNorth(gridsterItemCollide, gridsterItem) {\n    if (!this.gridster.$options.pushDirections.north) {\n      return false;\n    }\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.y = gridsterItem.$item.y - gridsterItemCollide.$item.rows;\n    if (this.push(gridsterItemCollide, this.fromSouth)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n  tryEast(gridsterItemCollide, gridsterItem) {\n    if (!this.gridster.$options.pushDirections.east) {\n      return false;\n    }\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n    if (this.push(gridsterItemCollide, this.fromWest)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n  tryWest(gridsterItemCollide, gridsterItem) {\n    if (!this.gridster.$options.pushDirections.west) {\n      return false;\n    }\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.x = gridsterItem.$item.x - gridsterItemCollide.$item.cols;\n    if (this.push(gridsterItemCollide, this.fromEast)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n  addToTempPushed(gridsterItem) {\n    let i = this.pushedItemsTemp.indexOf(gridsterItem);\n    if (i === -1) {\n      i = this.pushedItemsTemp.push(gridsterItem) - 1;\n      this.pushedItemsTempPath[i] = [];\n    }\n    this.pushedItemsTempPath[i].push({\n      x: gridsterItem.$item.x,\n      y: gridsterItem.$item.y\n    });\n  }\n  removeFromTempPushed(gridsterItem) {\n    const i = this.pushedItemsTemp.indexOf(gridsterItem);\n    const tempPosition = this.pushedItemsTempPath[i].pop();\n    if (!tempPosition) {\n      return;\n    }\n    gridsterItem.$item.x = tempPosition.x;\n    gridsterItem.$item.y = tempPosition.y;\n    gridsterItem.setSize();\n    if (!this.pushedItemsTempPath[i].length) {\n      this.pushedItemsTemp.splice(i, 1);\n      this.pushedItemsTempPath.splice(i, 1);\n    }\n  }\n  addToPushed(gridsterItem) {\n    if (this.pushedItems.indexOf(gridsterItem) < 0) {\n      this.pushedItems.push(gridsterItem);\n      this.pushedItemsPath.push([{\n        x: gridsterItem.item.x || 0,\n        y: gridsterItem.item.y || 0\n      }, {\n        x: gridsterItem.$item.x,\n        y: gridsterItem.$item.y\n      }]);\n    } else {\n      const i = this.pushedItems.indexOf(gridsterItem);\n      this.pushedItemsPath[i].push({\n        x: gridsterItem.$item.x,\n        y: gridsterItem.$item.y\n      });\n    }\n  }\n  removeFromPushed(i) {\n    if (i > -1) {\n      this.pushedItems.splice(i, 1);\n      this.pushedItemsPath.splice(i, 1);\n    }\n  }\n  removeFromPushedItem(gridsterItem) {\n    const i = this.pushedItems.indexOf(gridsterItem);\n    if (i > -1) {\n      this.pushedItemsPath[i].pop();\n      if (!this.pushedItemsPath.length) {\n        this.pushedItems.splice(i, 1);\n        this.pushedItemsPath.splice(i, 1);\n      }\n    }\n  }\n  checkPushedItem(pushedItem, i) {\n    const path = this.pushedItemsPath[i];\n    let j = path.length - 2;\n    let lastPosition;\n    let x;\n    let y;\n    let change = false;\n    for (; j > -1; j--) {\n      lastPosition = path[j];\n      x = pushedItem.$item.x;\n      y = pushedItem.$item.y;\n      pushedItem.$item.x = lastPosition.x;\n      pushedItem.$item.y = lastPosition.y;\n      if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n        pushedItem.setSize();\n        path.splice(j + 1, path.length - j - 1);\n        change = true;\n      } else {\n        pushedItem.$item.x = x;\n        pushedItem.$item.y = y;\n      }\n    }\n    if (path.length < 2) {\n      this.removeFromPushed(i);\n    }\n    return change;\n  }\n}\nlet scrollSensitivity;\nlet scrollSpeed;\nconst intervalDuration = 50;\nlet gridsterElement;\nlet resizeEvent;\nlet resizeEventType;\nlet intervalE;\nlet intervalW;\nlet intervalN;\nlet intervalS;\nfunction scroll(gridster, left, top, width, height, event, lastMouse, calculateItemPosition, resize, resizeEventScrollType) {\n  scrollSensitivity = gridster.$options.scrollSensitivity;\n  scrollSpeed = gridster.$options.scrollSpeed;\n  gridsterElement = gridster.el;\n  resizeEvent = resize;\n  resizeEventType = resizeEventScrollType;\n  const offsetWidth = gridsterElement.offsetWidth;\n  const offsetHeight = gridsterElement.offsetHeight;\n  const offsetLeft = gridsterElement.scrollLeft;\n  const offsetTop = gridsterElement.scrollTop;\n  const elemTopOffset = top - offsetTop;\n  const elemBottomOffset = offsetHeight + offsetTop - top - height;\n  const {\n    clientX,\n    clientY\n  } = event;\n  if (!gridster.$options.disableScrollVertical) {\n    if (lastMouse.clientY < clientY && elemBottomOffset < scrollSensitivity) {\n      cancelN();\n      if (resizeEvent && resizeEventType && !resizeEventType.south || intervalS) {\n        return;\n      }\n      intervalS = startVertical(1, calculateItemPosition, lastMouse);\n    } else if (lastMouse.clientY > clientY && offsetTop > 0 && elemTopOffset < scrollSensitivity) {\n      cancelS();\n      if (resizeEvent && resizeEventType && !resizeEventType.north || intervalN) {\n        return;\n      }\n      intervalN = startVertical(-1, calculateItemPosition, lastMouse);\n    } else if (lastMouse.clientY !== clientY) {\n      cancelVertical();\n    }\n  }\n  const elemRightOffset = offsetLeft + offsetWidth - left - width;\n  const elemLeftOffset = left - offsetLeft;\n  if (!gridster.$options.disableScrollHorizontal) {\n    if (lastMouse.clientX < clientX && elemRightOffset <= scrollSensitivity) {\n      cancelW();\n      if (resizeEvent && resizeEventType && !resizeEventType.east || intervalE) {\n        return;\n      }\n      intervalE = startHorizontal(1, calculateItemPosition, lastMouse);\n    } else if (lastMouse.clientX > clientX && offsetLeft > 0 && elemLeftOffset < scrollSensitivity) {\n      cancelE();\n      if (resizeEvent && resizeEventType && !resizeEventType.west || intervalW) {\n        return;\n      }\n      intervalW = startHorizontal(-1, calculateItemPosition, lastMouse);\n    } else if (lastMouse.clientX !== clientX) {\n      cancelHorizontal();\n    }\n  }\n}\nfunction startVertical(sign, calculateItemPosition, lastMouse) {\n  let clientY = lastMouse.clientY;\n  return window.setInterval(() => {\n    if (!gridsterElement || sign === -1 && gridsterElement.scrollTop - scrollSpeed < 0) {\n      cancelVertical();\n    }\n    gridsterElement.scrollTop += sign * scrollSpeed;\n    clientY += sign * scrollSpeed;\n    calculateItemPosition({\n      clientX: lastMouse.clientX,\n      clientY\n    });\n  }, intervalDuration);\n}\nfunction startHorizontal(sign, calculateItemPosition, lastMouse) {\n  let clientX = lastMouse.clientX;\n  return window.setInterval(() => {\n    if (!gridsterElement || sign === -1 && gridsterElement.scrollLeft - scrollSpeed < 0) {\n      cancelHorizontal();\n    }\n    gridsterElement.scrollLeft += sign * scrollSpeed;\n    clientX += sign * scrollSpeed;\n    calculateItemPosition({\n      clientX,\n      clientY: lastMouse.clientY\n    });\n  }, intervalDuration);\n}\nfunction cancelScroll() {\n  cancelHorizontal();\n  cancelVertical();\n  gridsterElement = null;\n}\nfunction cancelHorizontal() {\n  cancelE();\n  cancelW();\n}\nfunction cancelVertical() {\n  cancelN();\n  cancelS();\n}\nfunction cancelE() {\n  if (intervalE) {\n    clearInterval(intervalE);\n    intervalE = 0;\n  }\n}\nfunction cancelW() {\n  if (intervalW) {\n    clearInterval(intervalW);\n    intervalW = 0;\n  }\n}\nfunction cancelS() {\n  if (intervalS) {\n    clearInterval(intervalS);\n    intervalS = 0;\n  }\n}\nfunction cancelN() {\n  if (intervalN) {\n    clearInterval(intervalN);\n    intervalN = 0;\n  }\n}\nclass GridsterSwap {\n  constructor(gridsterItem) {\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n  }\n  destroy() {\n    this.gridster = this.gridsterItem = this.swapedItem = null;\n  }\n  swapItems() {\n    if (this.gridster.$options.swap) {\n      this.checkSwapBack();\n      this.checkSwap(this.gridsterItem);\n    }\n  }\n  checkSwapBack() {\n    if (this.swapedItem) {\n      const x = this.swapedItem.$item.x;\n      const y = this.swapedItem.$item.y;\n      this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n      this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n      if (this.gridster.checkCollision(this.swapedItem.$item)) {\n        this.swapedItem.$item.x = x;\n        this.swapedItem.$item.y = y;\n      } else {\n        this.swapedItem.setSize();\n        this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n        this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n        this.swapedItem = undefined;\n      }\n    }\n  }\n  restoreSwapItem() {\n    if (this.swapedItem) {\n      this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n      this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n      this.swapedItem.setSize();\n      this.swapedItem = undefined;\n    }\n  }\n  setSwapItem() {\n    if (this.swapedItem) {\n      this.swapedItem.checkItemChanges(this.swapedItem.$item, this.swapedItem.item);\n      this.swapedItem = undefined;\n    }\n  }\n  checkSwap(pushedBy) {\n    let gridsterItemCollision;\n    if (this.gridster.$options.swapWhileDragging) {\n      gridsterItemCollision = this.gridster.checkCollisionForSwaping(pushedBy.$item);\n    } else {\n      gridsterItemCollision = this.gridster.checkCollision(pushedBy.$item);\n    }\n    if (gridsterItemCollision && gridsterItemCollision !== true && gridsterItemCollision.canBeDragged()) {\n      const gridsterItemCollide = gridsterItemCollision;\n      const copyCollisionX = gridsterItemCollide.$item.x;\n      const copyCollisionY = gridsterItemCollide.$item.y;\n      const copyX = pushedBy.$item.x;\n      const copyY = pushedBy.$item.y;\n      const diffX = copyX - copyCollisionX;\n      const diffY = copyY - copyCollisionY;\n      gridsterItemCollide.$item.x = pushedBy.item.x - diffX;\n      gridsterItemCollide.$item.y = pushedBy.item.y - diffY;\n      pushedBy.$item.x = gridsterItemCollide.item.x + diffX;\n      pushedBy.$item.y = gridsterItemCollide.item.y + diffY;\n      if (this.gridster.checkCollision(gridsterItemCollide.$item) || this.gridster.checkCollision(pushedBy.$item)) {\n        pushedBy.$item.x = copyX;\n        pushedBy.$item.y = copyY;\n        gridsterItemCollide.$item.x = copyCollisionX;\n        gridsterItemCollide.$item.y = copyCollisionY;\n      } else {\n        gridsterItemCollide.setSize();\n        this.swapedItem = gridsterItemCollide;\n        if (this.gridster.$options.swapWhileDragging) {\n          this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n          this.setSwapItem();\n        }\n      }\n    }\n  }\n}\nconst GRIDSTER_ITEM_RESIZABLE_HANDLER_CLASS = 'gridster-item-resizable-handler';\nvar Direction;\n(function (Direction) {\n  Direction[\"UP\"] = \"UP\";\n  Direction[\"DOWN\"] = \"DOWN\";\n  Direction[\"LEFT\"] = \"LEFT\";\n  Direction[\"RIGHT\"] = \"RIGHT\";\n})(Direction || (Direction = {}));\nclass GridsterDraggable {\n  constructor(gridsterItem, gridster, zone) {\n    this.zone = zone;\n    this.collision = false;\n    this.dragMove = e => {\n      e.stopPropagation();\n      e.preventDefault();\n      GridsterUtils.checkTouchEvent(e);\n      // get the directions of the mouse event\n      let directions = this.getDirections(e);\n      if (this.gridster.options.enableBoundaryControl) {\n        // prevent moving up at the top of gridster\n        if (directions.includes(Direction.UP) && this.gridsterItem.el.getBoundingClientRect().top < this.gridster.el.getBoundingClientRect().top + (this.outerMarginTop ?? this.margin)) {\n          directions = directions.filter(direction => direction != Direction.UP);\n          e = new MouseEvent(e.type, {\n            clientX: e.clientX,\n            clientY: this.lastMouse.clientY\n          });\n        }\n        // prevent moving left at the leftmost column of gridster\n        if (directions.includes(Direction.LEFT) && this.gridsterItem.el.getBoundingClientRect().left < this.gridster.el.getBoundingClientRect().left + (this.outerMarginLeft ?? this.margin)) {\n          directions = directions.filter(direction => direction != Direction.LEFT);\n          e = new MouseEvent(e.type, {\n            clientX: this.lastMouse.clientX,\n            clientY: e.clientY\n          });\n        }\n        // prevent moving right at the rightmost column of gridster\n        if (directions.includes(Direction.RIGHT) && this.gridsterItem.el.getBoundingClientRect().right > this.gridster.el.getBoundingClientRect().right - (this.outerMarginRight ?? this.margin)) {\n          directions = directions.filter(direction => direction != Direction.RIGHT);\n          e = new MouseEvent(e.type, {\n            clientX: this.lastMouse.clientX,\n            clientY: e.clientY\n          });\n        }\n        // prevent moving down at the bottom of gridster\n        if (directions.includes(Direction.DOWN) && this.gridsterItem.el.getBoundingClientRect().bottom > this.gridster.el.getBoundingClientRect().bottom - (this.outerMarginBottom ?? this.margin)) {\n          directions = directions.filter(direction => direction != Direction.DOWN);\n          e = new MouseEvent(e.type, {\n            clientX: e.clientX,\n            clientY: this.lastMouse.clientY\n          });\n        }\n      }\n      // do not change item location when there is no direction to go\n      if (directions.length) {\n        this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n        this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n        scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.calculateItemPositionFromMousePosition);\n        this.calculateItemPositionFromMousePosition(e);\n      }\n    };\n    this.calculateItemPositionFromMousePosition = e => {\n      if (this.gridster.options.scale) {\n        this.calculateItemPositionWithScale(e, this.gridster.options.scale);\n      } else {\n        this.calculateItemPositionWithoutScale(e);\n      }\n      this.calculateItemPosition();\n      this.lastMouse.clientX = e.clientX;\n      this.lastMouse.clientY = e.clientY;\n      this.zone.run(() => {\n        this.gridster.updateGrid();\n      });\n    };\n    this.dragStop = e => {\n      e.stopPropagation();\n      e.preventDefault();\n      cancelScroll();\n      this.cancelOnBlur();\n      this.mousemove();\n      this.mouseup();\n      this.mouseleave();\n      this.touchmove();\n      this.touchend();\n      this.touchcancel();\n      this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-moving');\n      this.gridster.dragInProgress = false;\n      this.gridster.updateGrid();\n      this.path = [];\n      if (this.gridster.options.draggable && this.gridster.options.draggable.stop) {\n        Promise.resolve(this.gridster.options.draggable.stop(this.gridsterItem.item, this.gridsterItem, e)).then(this.makeDrag, this.cancelDrag);\n      } else {\n        this.makeDrag();\n      }\n      setTimeout(() => {\n        if (this.gridster) {\n          this.gridster.movingItem = null;\n          this.gridster.previewStyle(true);\n        }\n      });\n    };\n    this.cancelDrag = () => {\n      this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n      this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n      this.gridsterItem.setSize();\n      if (this.push) {\n        this.push.restoreItems();\n      }\n      if (this.swap) {\n        this.swap.restoreSwapItem();\n      }\n      if (this.push) {\n        this.push.destroy();\n        this.push = null;\n      }\n      if (this.swap) {\n        this.swap.destroy();\n        this.swap = null;\n      }\n    };\n    this.makeDrag = () => {\n      if (this.gridster.$options.draggable.dropOverItems && this.gridster.options.draggable && this.gridster.options.draggable.dropOverItemsCallback && this.collision && this.collision !== true && this.collision.$item) {\n        this.gridster.options.draggable.dropOverItemsCallback(this.gridsterItem.item, this.collision.item, this.gridster);\n      }\n      this.collision = false;\n      this.gridsterItem.setSize();\n      this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n      if (this.push) {\n        this.push.setPushedItems();\n      }\n      if (this.swap) {\n        this.swap.setSwapItem();\n      }\n      if (this.push) {\n        this.push.destroy();\n        this.push = null;\n      }\n      if (this.swap) {\n        this.swap.destroy();\n        this.swap = null;\n      }\n    };\n    this.dragStartDelay = e => {\n      const target = e.target;\n      if (target.classList.contains(GRIDSTER_ITEM_RESIZABLE_HANDLER_CLASS)) {\n        return;\n      }\n      if (GridsterUtils.checkContentClassForEvent(this.gridster, e)) {\n        return;\n      }\n      GridsterUtils.checkTouchEvent(e);\n      if (!this.gridster.$options.draggable.delayStart) {\n        this.dragStart(e);\n        return;\n      }\n      const timeout = setTimeout(() => {\n        this.dragStart(e);\n        cancelDrag();\n      }, this.gridster.$options.draggable.delayStart);\n      const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n      const cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\n      const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n      const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n      const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n      const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n      function cancelMove(eventMove) {\n        GridsterUtils.checkTouchEvent(eventMove);\n        if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\n          cancelDrag();\n        }\n      }\n      function cancelDrag() {\n        clearTimeout(timeout);\n        cancelOnBlur();\n        cancelMouse();\n        cancelMouseLeave();\n        cancelTouchMove();\n        cancelTouchEnd();\n        cancelTouchCancel();\n      }\n    };\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridster;\n    this.lastMouse = {\n      clientX: 0,\n      clientY: 0\n    };\n    this.path = [];\n  }\n  destroy() {\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle(true);\n    }\n    this.gridsterItem = this.gridster = this.collision = null;\n    if (this.mousedown) {\n      this.mousedown();\n      this.touchstart();\n    }\n  }\n  dragStart(e) {\n    if (e.which && e.which !== 1) {\n      return;\n    }\n    if (this.gridster.options.draggable && this.gridster.options.draggable.start) {\n      this.gridster.options.draggable.start(this.gridsterItem.item, this.gridsterItem, e);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n    this.zone.runOutsideAngular(() => {\n      this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragMove);\n      this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragMove);\n    });\n    this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStop);\n    this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStop);\n    this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStop);\n    this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStop);\n    this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStop);\n    this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-moving');\n    this.margin = this.gridster.$options.margin;\n    this.outerMarginTop = this.gridster.$options.outerMarginTop;\n    this.outerMarginRight = this.gridster.$options.outerMarginRight;\n    this.outerMarginBottom = this.gridster.$options.outerMarginBottom;\n    this.outerMarginLeft = this.gridster.$options.outerMarginLeft;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.left = this.gridsterItem.left - this.margin;\n    this.top = this.gridsterItem.top - this.margin;\n    this.originalClientX = e.clientX;\n    this.originalClientY = e.clientY;\n    this.width = this.gridsterItem.width;\n    this.height = this.gridsterItem.height;\n    if (this.gridster.$options.dirType === DirTypes.RTL) {\n      this.diffLeft = e.clientX - this.gridster.el.scrollWidth + this.gridsterItem.left;\n    } else {\n      this.diffLeft = e.clientX + this.offsetLeft - this.margin - this.left;\n    }\n    this.diffTop = e.clientY + this.offsetTop - this.margin - this.top;\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.gridster.previewStyle(true);\n    this.push = new GridsterPush(this.gridsterItem);\n    this.swap = new GridsterSwap(this.gridsterItem);\n    this.gridster.dragInProgress = true;\n    this.gridster.updateGrid();\n    this.path.push({\n      x: this.gridsterItem.item.x || 0,\n      y: this.gridsterItem.item.y || 0\n    });\n  }\n  calculateItemPositionWithScale(e, scale) {\n    if (this.gridster.$options.dirType === DirTypes.RTL) {\n      this.left = this.gridster.el.scrollWidth - this.originalClientX + (e.clientX - this.originalClientX) / scale + this.diffLeft;\n    } else {\n      this.left = this.originalClientX + (e.clientX - this.originalClientX) / scale + this.offsetLeft - this.diffLeft;\n    }\n    this.top = this.originalClientY + (e.clientY - this.originalClientY) / scale + this.offsetTop - this.diffTop;\n  }\n  calculateItemPositionWithoutScale(e) {\n    if (this.gridster.$options.dirType === DirTypes.RTL) {\n      this.left = this.gridster.el.scrollWidth - e.clientX + this.diffLeft;\n    } else {\n      this.left = e.clientX + this.offsetLeft - this.diffLeft;\n    }\n    this.top = e.clientY + this.offsetTop - this.diffTop;\n  }\n  calculateItemPosition() {\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.positionX = this.gridster.pixelsToPositionX(this.left, Math.round);\n    this.positionY = this.gridster.pixelsToPositionY(this.top, Math.round);\n    this.positionXBackup = this.gridsterItem.$item.x;\n    this.positionYBackup = this.gridsterItem.$item.y;\n    this.gridsterItem.$item.x = this.positionX;\n    if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n      this.gridsterItem.$item.x = this.positionXBackup;\n    }\n    this.gridsterItem.$item.y = this.positionY;\n    if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n      this.gridsterItem.$item.y = this.positionYBackup;\n    }\n    this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, this.left, this.top);\n    if (this.positionXBackup !== this.gridsterItem.$item.x || this.positionYBackup !== this.gridsterItem.$item.y) {\n      const lastPosition = this.path[this.path.length - 1];\n      let direction = '';\n      if (lastPosition.x < this.gridsterItem.$item.x) {\n        direction = this.push.fromWest;\n      } else if (lastPosition.x > this.gridsterItem.$item.x) {\n        direction = this.push.fromEast;\n      } else if (lastPosition.y < this.gridsterItem.$item.y) {\n        direction = this.push.fromNorth;\n      } else if (lastPosition.y > this.gridsterItem.$item.y) {\n        direction = this.push.fromSouth;\n      }\n      this.push.pushItems(direction, this.gridster.$options.disablePushOnDrag);\n      this.swap.swapItems();\n      this.collision = this.gridster.checkCollision(this.gridsterItem.$item);\n      if (this.collision) {\n        this.gridsterItem.$item.x = this.positionXBackup;\n        this.gridsterItem.$item.y = this.positionYBackup;\n        if (this.gridster.$options.draggable.dropOverItems && this.collision !== true && this.collision.$item) {\n          this.gridster.movingItem = null;\n        }\n      } else {\n        this.path.push({\n          x: this.gridsterItem.$item.x,\n          y: this.gridsterItem.$item.y\n        });\n      }\n      this.push.checkPushBack();\n    } else {\n      // reset the collision when you drag and drop on an adjacent cell that is not empty\n      // and go back to the cell you were in from the beginning,\n      // this is to prevent `dropOverItemsCallback'\n      this.collision = false;\n    }\n    this.gridster.previewStyle(true);\n  }\n  toggle() {\n    const enableDrag = this.gridsterItem.canBeDragged();\n    if (!this.enabled && enableDrag) {\n      this.enabled = !this.enabled;\n      this.mousedown = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'mousedown', this.dragStartDelay);\n      this.touchstart = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'touchstart', this.dragStartDelay);\n    } else if (this.enabled && !enableDrag) {\n      this.enabled = !this.enabled;\n      this.mousedown();\n      this.touchstart();\n    }\n  }\n  /**\n   * Returns the list of directions for given mouse event\n   * @param e Mouse event\n   * */\n  getDirections(e) {\n    const directions = [];\n    if (this.lastMouse.clientX === 0 && this.lastMouse.clientY === 0) {\n      this.lastMouse.clientY = e.clientY;\n      this.lastMouse.clientX = e.clientX;\n    }\n    if (this.lastMouse.clientY > e.clientY) {\n      directions.push(Direction.UP);\n    }\n    if (this.lastMouse.clientY < e.clientY) {\n      directions.push(Direction.DOWN);\n    }\n    if (this.lastMouse.clientX < e.clientX) {\n      directions.push(Direction.RIGHT);\n    }\n    if (this.lastMouse.clientX > e.clientX) {\n      directions.push(Direction.LEFT);\n    }\n    return directions;\n  }\n}\nclass GridsterPushResize {\n  constructor(gridsterItem) {\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n    this.tryPattern = {\n      fromEast: this.tryWest,\n      fromWest: this.tryEast,\n      fromNorth: this.trySouth,\n      fromSouth: this.tryNorth\n    };\n    this.fromSouth = 'fromSouth';\n    this.fromNorth = 'fromNorth';\n    this.fromEast = 'fromEast';\n    this.fromWest = 'fromWest';\n  }\n  destroy() {\n    this.gridster = this.gridsterItem = null;\n  }\n  pushItems(direction) {\n    if (this.gridster.$options.pushResizeItems) {\n      return this.push(this.gridsterItem, direction);\n    } else {\n      return false;\n    }\n  }\n  restoreItems() {\n    let i = 0;\n    const l = this.pushedItems.length;\n    let pushedItem;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.$item.x = pushedItem.item.x || 0;\n      pushedItem.$item.y = pushedItem.item.y || 0;\n      pushedItem.$item.cols = pushedItem.item.cols || 1;\n      pushedItem.$item.row = pushedItem.item.row || 1;\n      pushedItem.setSize();\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n  setPushedItems() {\n    let i = 0;\n    const l = this.pushedItems.length;\n    let pushedItem;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n  checkPushBack() {\n    let i = this.pushedItems.length - 1;\n    let change = false;\n    for (; i > -1; i--) {\n      if (this.checkPushedItem(this.pushedItems[i], i)) {\n        change = true;\n      }\n    }\n    if (change) {\n      this.checkPushBack();\n    }\n  }\n  push(gridsterItem, direction) {\n    const gridsterItemCollision = this.gridster.checkCollision(gridsterItem.$item);\n    if (gridsterItemCollision && gridsterItemCollision !== true && gridsterItemCollision !== this.gridsterItem && gridsterItemCollision.canBeResized()) {\n      if (this.tryPattern[direction].call(this, gridsterItemCollision, gridsterItem, direction)) {\n        return true;\n      }\n    } else if (gridsterItemCollision === false) {\n      return true;\n    }\n    return false;\n  }\n  trySouth(gridsterItemCollide, gridsterItem, direction) {\n    const backUpY = gridsterItemCollide.$item.y;\n    const backUpRows = gridsterItemCollide.$item.rows;\n    gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n    gridsterItemCollide.$item.rows = backUpRows + backUpY - gridsterItemCollide.$item.y;\n    if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.y = backUpY;\n      gridsterItemCollide.$item.rows = backUpRows;\n    }\n    return false;\n  }\n  tryNorth(gridsterItemCollide, gridsterItem, direction) {\n    const backUpRows = gridsterItemCollide.$item.rows;\n    gridsterItemCollide.$item.rows = gridsterItem.$item.y - gridsterItemCollide.$item.y;\n    if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.rows = backUpRows;\n    }\n    return false;\n  }\n  tryEast(gridsterItemCollide, gridsterItem, direction) {\n    const backUpX = gridsterItemCollide.$item.x;\n    const backUpCols = gridsterItemCollide.$item.cols;\n    gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n    gridsterItemCollide.$item.cols = backUpCols + backUpX - gridsterItemCollide.$item.x;\n    if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.x = backUpX;\n      gridsterItemCollide.$item.cols = backUpCols;\n    }\n    return false;\n  }\n  tryWest(gridsterItemCollide, gridsterItem, direction) {\n    const backUpCols = gridsterItemCollide.$item.cols;\n    gridsterItemCollide.$item.cols = gridsterItem.$item.x - gridsterItemCollide.$item.x;\n    if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.cols = backUpCols;\n    }\n    return false;\n  }\n  addToPushed(gridsterItem) {\n    if (this.pushedItems.indexOf(gridsterItem) < 0) {\n      this.pushedItems.push(gridsterItem);\n      this.pushedItemsPath.push([{\n        x: gridsterItem.item.x || 0,\n        y: gridsterItem.item.y || 0,\n        cols: gridsterItem.item.cols || 0,\n        rows: gridsterItem.item.rows || 0\n      }, {\n        x: gridsterItem.$item.x,\n        y: gridsterItem.$item.y,\n        cols: gridsterItem.$item.cols,\n        rows: gridsterItem.$item.rows\n      }]);\n    } else {\n      const i = this.pushedItems.indexOf(gridsterItem);\n      this.pushedItemsPath[i].push({\n        x: gridsterItem.$item.x,\n        y: gridsterItem.$item.y,\n        cols: gridsterItem.$item.cols,\n        rows: gridsterItem.$item.rows\n      });\n    }\n  }\n  removeFromPushed(i) {\n    if (i > -1) {\n      this.pushedItems.splice(i, 1);\n      this.pushedItemsPath.splice(i, 1);\n    }\n  }\n  checkPushedItem(pushedItem, i) {\n    const path = this.pushedItemsPath[i];\n    let j = path.length - 2;\n    let lastPosition;\n    let x;\n    let y;\n    let cols;\n    let rows;\n    for (; j > -1; j--) {\n      lastPosition = path[j];\n      x = pushedItem.$item.x;\n      y = pushedItem.$item.y;\n      cols = pushedItem.$item.cols;\n      rows = pushedItem.$item.rows;\n      pushedItem.$item.x = lastPosition.x;\n      pushedItem.$item.y = lastPosition.y;\n      pushedItem.$item.cols = lastPosition.cols;\n      pushedItem.$item.rows = lastPosition.rows;\n      if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n        pushedItem.setSize();\n        path.splice(j + 1, path.length - 1 - j);\n      } else {\n        pushedItem.$item.x = x;\n        pushedItem.$item.y = y;\n        pushedItem.$item.cols = cols;\n        pushedItem.$item.rows = rows;\n      }\n    }\n    if (path.length < 2) {\n      this.removeFromPushed(i);\n      return true;\n    }\n    return false;\n  }\n}\nclass GridsterResizable {\n  constructor(gridsterItem, gridster, zone) {\n    this.zone = zone;\n    /**\n     * The direction function may reference any of the `GridsterResizable` class methods, that are\n     * responsible for gridster resize when the `dragmove` event is being handled. E.g. it may reference\n     * the `handleNorth` method when the north handle is pressed and moved by a mouse.\n     */\n    this.directionFunction = null;\n    this.dragMove = e => {\n      if (this.directionFunction === null) {\n        throw new Error('The `directionFunction` has not been set before calling `dragMove`.');\n      }\n      e.stopPropagation();\n      e.preventDefault();\n      GridsterUtils.checkTouchEvent(e);\n      this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n      this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n      scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.directionFunction, true, this.resizeEventScrollType);\n      const scale = this.gridster.options.scale || 1;\n      this.directionFunction({\n        clientX: this.originalClientX + (e.clientX - this.originalClientX) / scale,\n        clientY: this.originalClientY + (e.clientY - this.originalClientY) / scale\n      });\n      this.lastMouse.clientX = e.clientX;\n      this.lastMouse.clientY = e.clientY;\n      this.zone.run(() => {\n        this.gridster.updateGrid();\n      });\n    };\n    this.dragStop = e => {\n      e.stopPropagation();\n      e.preventDefault();\n      cancelScroll();\n      this.mousemove();\n      this.mouseup();\n      this.mouseleave();\n      this.cancelOnBlur();\n      this.touchmove();\n      this.touchend();\n      this.touchcancel();\n      this.gridster.dragInProgress = false;\n      this.gridster.updateGrid();\n      if (this.gridster.options.resizable && this.gridster.options.resizable.stop) {\n        Promise.resolve(this.gridster.options.resizable.stop(this.gridsterItem.item, this.gridsterItem, e)).then(this.makeResize, this.cancelResize);\n      } else {\n        this.makeResize();\n      }\n      setTimeout(() => {\n        this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-resizing');\n        if (this.gridster) {\n          this.gridster.movingItem = null;\n          this.gridster.previewStyle();\n        }\n      });\n    };\n    this.cancelResize = () => {\n      this.gridsterItem.$item.cols = this.gridsterItem.item.cols || 1;\n      this.gridsterItem.$item.rows = this.gridsterItem.item.rows || 1;\n      this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n      this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n      this.gridsterItem.setSize();\n      this.push.restoreItems();\n      this.pushResize.restoreItems();\n      this.push.destroy();\n      this.push = null;\n      this.pushResize.destroy();\n      this.pushResize = null;\n    };\n    this.makeResize = () => {\n      this.gridsterItem.setSize();\n      this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n      this.push.setPushedItems();\n      this.pushResize.setPushedItems();\n      this.push.destroy();\n      this.push = null;\n      this.pushResize.destroy();\n      this.pushResize = null;\n    };\n    this.handleNorth = e => {\n      this.top = e.clientY + this.offsetTop - this.diffTop;\n      this.height = this.bottom - this.top;\n      if (this.minHeight > this.height) {\n        this.height = this.minHeight;\n        this.top = this.bottom - this.minHeight;\n      } else if (this.gridster.options.enableBoundaryControl) {\n        this.top = Math.max(0, this.top);\n        this.height = this.bottom - this.top;\n      }\n      const marginTop = this.gridster.options.pushItems ? this.margin : 0;\n      this.newPosition = this.gridster.pixelsToPositionY(this.top + marginTop, Math.floor);\n      if (this.gridsterItem.$item.y !== this.newPosition) {\n        this.itemBackup[1] = this.gridsterItem.$item.y;\n        this.itemBackup[3] = this.gridsterItem.$item.rows;\n        this.gridsterItem.$item.rows += this.gridsterItem.$item.y - this.newPosition;\n        this.gridsterItem.$item.y = this.newPosition;\n        this.pushResize.pushItems(this.pushResize.fromSouth);\n        this.push.pushItems(this.push.fromSouth, this.gridster.$options.disablePushOnResize);\n        if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n          this.gridsterItem.$item.y = this.itemBackup[1];\n          this.gridsterItem.$item.rows = this.itemBackup[3];\n          this.top = this.gridster.positionYToPixels(this.gridsterItem.$item.y);\n          this.setItemTop(this.gridster.positionYToPixels(this.gridsterItem.$item.y));\n          this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n          return;\n        } else {\n          this.gridster.previewStyle();\n        }\n        this.pushResize.checkPushBack();\n        this.push.checkPushBack();\n      }\n      this.setItemTop(this.top);\n      this.setItemHeight(this.height);\n    };\n    this.handleWest = e => {\n      const clientX = this.gridster.$options.dirType === DirTypes.RTL ? this.originalClientX + (this.originalClientX - e.clientX) : e.clientX;\n      this.left = clientX + this.offsetLeft - this.diffLeft;\n      this.width = this.right - this.left;\n      if (this.minWidth > this.width) {\n        this.width = this.minWidth;\n        this.left = this.right - this.minWidth;\n      } else if (this.gridster.options.enableBoundaryControl) {\n        this.left = Math.max(0, this.left);\n        this.width = this.right - this.left;\n      }\n      const marginLeft = this.gridster.options.pushItems ? this.margin : 0;\n      this.newPosition = this.gridster.pixelsToPositionX(this.left + marginLeft, Math.floor);\n      if (this.gridsterItem.$item.x !== this.newPosition) {\n        this.itemBackup[0] = this.gridsterItem.$item.x;\n        this.itemBackup[2] = this.gridsterItem.$item.cols;\n        this.gridsterItem.$item.cols += this.gridsterItem.$item.x - this.newPosition;\n        this.gridsterItem.$item.x = this.newPosition;\n        this.pushResize.pushItems(this.pushResize.fromEast);\n        this.push.pushItems(this.push.fromEast, this.gridster.$options.disablePushOnResize);\n        if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n          this.gridsterItem.$item.x = this.itemBackup[0];\n          this.gridsterItem.$item.cols = this.itemBackup[2];\n          this.left = this.gridster.positionXToPixels(this.gridsterItem.$item.x);\n          this.setItemLeft(this.gridster.positionXToPixels(this.gridsterItem.$item.x));\n          this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n          return;\n        } else {\n          this.gridster.previewStyle();\n        }\n        this.pushResize.checkPushBack();\n        this.push.checkPushBack();\n      }\n      this.setItemLeft(this.left);\n      this.setItemWidth(this.width);\n    };\n    this.handleSouth = e => {\n      this.height = e.clientY + this.offsetTop - this.diffBottom - this.top;\n      if (this.minHeight > this.height) {\n        this.height = this.minHeight;\n      }\n      this.bottom = this.top + this.height;\n      if (this.gridster.options.enableBoundaryControl) {\n        const margin = this.outerMarginBottom ?? this.margin;\n        const box = this.gridster.el.getBoundingClientRect();\n        this.bottom = Math.min(this.bottom, box.bottom - box.top - 2 * margin);\n        this.height = this.bottom - this.top;\n      }\n      const marginBottom = this.gridster.options.pushItems ? 0 : this.margin;\n      this.newPosition = this.gridster.pixelsToPositionY(this.bottom + marginBottom, Math.ceil);\n      if (this.gridsterItem.$item.y + this.gridsterItem.$item.rows !== this.newPosition) {\n        this.itemBackup[3] = this.gridsterItem.$item.rows;\n        this.gridsterItem.$item.rows = this.newPosition - this.gridsterItem.$item.y;\n        this.pushResize.pushItems(this.pushResize.fromNorth);\n        this.push.pushItems(this.push.fromNorth, this.gridster.$options.disablePushOnResize);\n        if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n          this.gridsterItem.$item.rows = this.itemBackup[3];\n          this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n          return;\n        } else {\n          this.gridster.previewStyle();\n        }\n        this.pushResize.checkPushBack();\n        this.push.checkPushBack();\n      }\n      this.setItemHeight(this.height);\n    };\n    this.handleEast = e => {\n      const clientX = this.gridster.$options.dirType === DirTypes.RTL ? this.originalClientX + (this.originalClientX - e.clientX) : e.clientX;\n      this.width = clientX + this.offsetLeft - this.diffRight - this.left;\n      if (this.minWidth > this.width) {\n        this.width = this.minWidth;\n      }\n      this.right = this.left + this.width;\n      if (this.gridster.options.enableBoundaryControl) {\n        const margin = this.outerMarginRight ?? this.margin;\n        const box = this.gridster.el.getBoundingClientRect();\n        this.right = Math.min(this.right, box.right - box.left - 2 * margin);\n        this.width = this.right - this.left;\n      }\n      const marginRight = this.gridster.options.pushItems ? 0 : this.margin;\n      this.newPosition = this.gridster.pixelsToPositionX(this.right + marginRight, Math.ceil);\n      if (this.gridsterItem.$item.x + this.gridsterItem.$item.cols !== this.newPosition) {\n        this.itemBackup[2] = this.gridsterItem.$item.cols;\n        this.gridsterItem.$item.cols = this.newPosition - this.gridsterItem.$item.x;\n        this.pushResize.pushItems(this.pushResize.fromWest);\n        this.push.pushItems(this.push.fromWest, this.gridster.$options.disablePushOnResize);\n        if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n          this.gridsterItem.$item.cols = this.itemBackup[2];\n          this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n          return;\n        } else {\n          this.gridster.previewStyle();\n        }\n        this.pushResize.checkPushBack();\n        this.push.checkPushBack();\n      }\n      this.setItemWidth(this.width);\n    };\n    this.handleNorthWest = e => {\n      this.handleNorth(e);\n      this.handleWest(e);\n    };\n    this.handleNorthEast = e => {\n      this.handleNorth(e);\n      this.handleEast(e);\n    };\n    this.handleSouthWest = e => {\n      this.handleSouth(e);\n      this.handleWest(e);\n    };\n    this.handleSouthEast = e => {\n      this.handleSouth(e);\n      this.handleEast(e);\n    };\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridster;\n    this.lastMouse = {\n      clientX: 0,\n      clientY: 0\n    };\n    this.itemBackup = [0, 0, 0, 0];\n    this.resizeEventScrollType = {\n      west: false,\n      east: false,\n      north: false,\n      south: false\n    };\n  }\n  destroy() {\n    this.gridster?.previewStyle();\n    this.gridster = this.gridsterItem = null;\n  }\n  dragStart(e) {\n    if (e.which && e.which !== 1) {\n      return;\n    }\n    if (this.gridster.options.resizable && this.gridster.options.resizable.start) {\n      this.gridster.options.resizable.start(this.gridsterItem.item, this.gridsterItem, e);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n    this.zone.runOutsideAngular(() => {\n      this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragMove);\n      this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragMove);\n    });\n    this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStop);\n    this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStop);\n    this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStop);\n    this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStop);\n    this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStop);\n    this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-resizing');\n    this.lastMouse.clientX = e.clientX;\n    this.lastMouse.clientY = e.clientY;\n    this.left = this.gridsterItem.left;\n    this.top = this.gridsterItem.top;\n    this.originalClientX = e.clientX;\n    this.originalClientY = e.clientY;\n    this.width = this.gridsterItem.width;\n    this.height = this.gridsterItem.height;\n    this.bottom = this.gridsterItem.top + this.gridsterItem.height;\n    this.right = this.gridsterItem.left + this.gridsterItem.width;\n    this.margin = this.gridster.$options.margin;\n    this.outerMarginTop = this.gridster.$options.outerMarginTop;\n    this.outerMarginRight = this.gridster.$options.outerMarginRight;\n    this.outerMarginBottom = this.gridster.$options.outerMarginBottom;\n    this.outerMarginLeft = this.gridster.$options.outerMarginLeft;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.diffLeft = e.clientX + this.offsetLeft - this.left;\n    this.diffRight = e.clientX + this.offsetLeft - this.right;\n    this.diffTop = e.clientY + this.offsetTop - this.top;\n    this.diffBottom = e.clientY + this.offsetTop - this.bottom;\n    this.minHeight = this.gridster.positionYToPixels(this.gridsterItem.$item.minItemRows || this.gridster.$options.minItemRows) - this.margin;\n    this.minWidth = this.gridster.positionXToPixels(this.gridsterItem.$item.minItemCols || this.gridster.$options.minItemCols) - this.margin;\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.gridster.previewStyle();\n    this.push = new GridsterPush(this.gridsterItem);\n    this.pushResize = new GridsterPushResize(this.gridsterItem);\n    this.gridster.dragInProgress = true;\n    this.gridster.updateGrid();\n    const {\n      classList\n    } = e.target;\n    if (classList.contains('handle-n')) {\n      this.resizeEventScrollType.north = true;\n      this.directionFunction = this.handleNorth;\n    } else if (classList.contains('handle-w')) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.east = true;\n        this.directionFunction = this.handleEast;\n      } else {\n        this.resizeEventScrollType.west = true;\n        this.directionFunction = this.handleWest;\n      }\n    } else if (classList.contains('handle-s')) {\n      this.resizeEventScrollType.south = true;\n      this.directionFunction = this.handleSouth;\n    } else if (classList.contains('handle-e')) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.west = true;\n        this.directionFunction = this.handleWest;\n      } else {\n        this.resizeEventScrollType.east = true;\n        this.directionFunction = this.handleEast;\n      }\n    } else if (classList.contains('handle-nw')) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.north = true;\n        this.resizeEventScrollType.east = true;\n        this.directionFunction = this.handleNorthEast;\n      } else {\n        this.resizeEventScrollType.north = true;\n        this.resizeEventScrollType.west = true;\n        this.directionFunction = this.handleNorthWest;\n      }\n    } else if (classList.contains('handle-ne')) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.north = true;\n        this.resizeEventScrollType.west = true;\n        this.directionFunction = this.handleNorthWest;\n      } else {\n        this.resizeEventScrollType.north = true;\n        this.resizeEventScrollType.east = true;\n        this.directionFunction = this.handleNorthEast;\n      }\n    } else if (classList.contains('handle-sw')) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.south = true;\n        this.resizeEventScrollType.east = true;\n        this.directionFunction = this.handleSouthEast;\n      } else {\n        this.resizeEventScrollType.south = true;\n        this.resizeEventScrollType.west = true;\n        this.directionFunction = this.handleSouthWest;\n      }\n    } else if (classList.contains('handle-se')) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.south = true;\n        this.resizeEventScrollType.west = true;\n        this.directionFunction = this.handleSouthWest;\n      } else {\n        this.resizeEventScrollType.south = true;\n        this.resizeEventScrollType.east = true;\n        this.directionFunction = this.handleSouthEast;\n      }\n    }\n  }\n  toggle() {\n    this.resizeEnabled = this.gridsterItem.canBeResized();\n    this.resizableHandles = this.gridsterItem.getResizableHandles();\n  }\n  dragStartDelay(e) {\n    GridsterUtils.checkTouchEvent(e);\n    if (!this.gridster.$options.resizable.delayStart) {\n      this.dragStart(e);\n      return;\n    }\n    const timeout = setTimeout(() => {\n      this.dragStart(e);\n      cancelDrag();\n    }, this.gridster.$options.resizable.delayStart);\n    const {\n      cancelMouse,\n      cancelMouseLeave,\n      cancelOnBlur,\n      cancelTouchMove,\n      cancelTouchEnd,\n      cancelTouchCancel\n    } = this.zone.runOutsideAngular(() => {\n      // Note: all of these events are being added within the `<root>` zone since they all\n      // don't do any view updates and don't require Angular running change detection.\n      // All event listeners call `cancelDrag` once the event is dispatched, the `cancelDrag`\n      // is responsible only for removing event listeners.\n      const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n      const cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\n      const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n      const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n      const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n      const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n      return {\n        cancelMouse,\n        cancelMouseLeave,\n        cancelOnBlur,\n        cancelTouchMove,\n        cancelTouchEnd,\n        cancelTouchCancel\n      };\n    });\n    function cancelMove(eventMove) {\n      GridsterUtils.checkTouchEvent(eventMove);\n      if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\n        cancelDrag();\n      }\n    }\n    function cancelDrag() {\n      clearTimeout(timeout);\n      cancelOnBlur();\n      cancelMouse();\n      cancelMouseLeave();\n      cancelTouchMove();\n      cancelTouchEnd();\n      cancelTouchCancel();\n    }\n  }\n  setItemTop(top) {\n    this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, this.left, top);\n  }\n  setItemLeft(left) {\n    this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, left, this.top);\n  }\n  setItemHeight(height) {\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'height', height + 'px');\n  }\n  setItemWidth(width) {\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'width', width + 'px');\n  }\n}\nclass GridsterItemComponent {\n  get zIndex() {\n    return this.getLayerIndex() + this.gridster.$options.baseLayerIndex;\n  }\n  constructor(el, gridster, renderer, zone) {\n    this.renderer = renderer;\n    this.zone = zone;\n    this.itemInit = new EventEmitter();\n    this.itemChange = new EventEmitter();\n    this.itemResize = new EventEmitter();\n    this.el = el.nativeElement;\n    this.$item = {\n      cols: -1,\n      rows: -1,\n      x: -1,\n      y: -1\n    };\n    this.gridster = gridster;\n    this.drag = new GridsterDraggable(this, gridster, this.zone);\n    this.resize = new GridsterResizable(this, gridster, this.zone);\n  }\n  ngOnInit() {\n    this.gridster.addItem(this);\n  }\n  ngOnChanges(changes) {\n    if (changes.item) {\n      this.updateOptions();\n      if (!this.init) {\n        this.gridster.calculateLayout$.next();\n      }\n    }\n    if (changes.item && changes.item.previousValue) {\n      this.setSize();\n    }\n  }\n  updateOptions() {\n    this.$item = GridsterUtils.merge(this.$item, this.item, {\n      cols: undefined,\n      rows: undefined,\n      x: undefined,\n      y: undefined,\n      layerIndex: undefined,\n      dragEnabled: undefined,\n      resizeEnabled: undefined,\n      compactEnabled: undefined,\n      maxItemRows: undefined,\n      minItemRows: undefined,\n      maxItemCols: undefined,\n      minItemCols: undefined,\n      maxItemArea: undefined,\n      minItemArea: undefined,\n      resizableHandles: {\n        s: undefined,\n        e: undefined,\n        n: undefined,\n        w: undefined,\n        se: undefined,\n        ne: undefined,\n        sw: undefined,\n        nw: undefined\n      }\n    });\n  }\n  ngOnDestroy() {\n    this.gridster.removeItem(this);\n    this.drag.destroy();\n    this.resize.destroy();\n    this.gridster = this.drag = this.resize = null;\n  }\n  setSize() {\n    this.renderer.setStyle(this.el, 'display', this.notPlaced ? '' : 'block');\n    this.gridster.gridRenderer.updateItem(this.el, this.$item, this.renderer);\n    this.updateItemSize();\n  }\n  updateItemSize() {\n    const top = this.$item.y * this.gridster.curRowHeight;\n    const left = this.$item.x * this.gridster.curColWidth;\n    const width = this.$item.cols * this.gridster.curColWidth - this.gridster.$options.margin;\n    const height = this.$item.rows * this.gridster.curRowHeight - this.gridster.$options.margin;\n    this.top = top;\n    this.left = left;\n    if (!this.init && width > 0 && height > 0) {\n      this.init = true;\n      if (this.item.initCallback) {\n        this.item.initCallback(this.item, this);\n      }\n      if (this.gridster.options.itemInitCallback) {\n        this.gridster.options.itemInitCallback(this.item, this);\n      }\n      this.itemInit.next({\n        item: this.item,\n        itemComponent: this\n      });\n      if (this.gridster.$options.scrollToNewItems) {\n        this.el.scrollIntoView(false);\n      }\n    }\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      if (this.gridster.options.itemResizeCallback) {\n        this.gridster.options.itemResizeCallback(this.item, this);\n      }\n      this.itemResize.next({\n        item: this.item,\n        itemComponent: this\n      });\n    }\n  }\n  itemChanged() {\n    if (this.gridster.options.itemChangeCallback) {\n      this.gridster.options.itemChangeCallback(this.item, this);\n    }\n    this.itemChange.next({\n      item: this.item,\n      itemComponent: this\n    });\n  }\n  checkItemChanges(newValue, oldValue) {\n    if (newValue.rows === oldValue.rows && newValue.cols === oldValue.cols && newValue.x === oldValue.x && newValue.y === oldValue.y) {\n      return;\n    }\n    if (this.gridster.checkCollision(this.$item)) {\n      this.$item.x = oldValue.x || 0;\n      this.$item.y = oldValue.y || 0;\n      this.$item.cols = oldValue.cols || 1;\n      this.$item.rows = oldValue.rows || 1;\n      this.setSize();\n    } else {\n      this.item.cols = this.$item.cols;\n      this.item.rows = this.$item.rows;\n      this.item.x = this.$item.x;\n      this.item.y = this.$item.y;\n      this.gridster.calculateLayout$.next();\n      this.itemChanged();\n    }\n  }\n  canBeDragged() {\n    const gridDragEnabled = this.gridster.$options.draggable.enabled;\n    const itemDragEnabled = this.$item.dragEnabled === undefined ? gridDragEnabled : this.$item.dragEnabled;\n    return !this.gridster.mobile && gridDragEnabled && itemDragEnabled;\n  }\n  canBeResized() {\n    const gridResizable = this.gridster.$options.resizable.enabled;\n    const itemResizable = this.$item.resizeEnabled === undefined ? gridResizable : this.$item.resizeEnabled;\n    return !this.gridster.mobile && gridResizable && itemResizable;\n  }\n  getResizableHandles() {\n    const gridResizableHandles = this.gridster.$options.resizable.handles;\n    const itemResizableHandles = this.$item.resizableHandles;\n    // use grid settings if no settings are provided for the item.\n    if (itemResizableHandles === undefined) {\n      return gridResizableHandles;\n    }\n    // else merge the settings\n    return {\n      ...gridResizableHandles,\n      ...itemResizableHandles\n    };\n  }\n  bringToFront(offset) {\n    if (offset && offset <= 0) {\n      return;\n    }\n    const layerIndex = this.getLayerIndex();\n    const topIndex = this.gridster.$options.maxLayerIndex;\n    if (layerIndex < topIndex) {\n      const targetIndex = offset ? layerIndex + offset : topIndex;\n      this.item.layerIndex = this.$item.layerIndex = targetIndex > topIndex ? topIndex : targetIndex;\n    }\n  }\n  sendToBack(offset) {\n    if (offset && offset <= 0) {\n      return;\n    }\n    const layerIndex = this.getLayerIndex();\n    if (layerIndex > 0) {\n      const targetIndex = offset ? layerIndex - offset : 0;\n      this.item.layerIndex = this.$item.layerIndex = targetIndex < 0 ? 0 : targetIndex;\n    }\n  }\n  getLayerIndex() {\n    if (this.item.layerIndex !== undefined) {\n      return this.item.layerIndex;\n    }\n    if (this.gridster.$options.defaultLayerIndex !== undefined) {\n      return this.gridster.$options.defaultLayerIndex;\n    }\n    return 0;\n  }\n  static #_ = this.ɵfac = function GridsterItemComponent_Factory(t) {\n    return new (t || GridsterItemComponent)(i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(GridsterComponent), i0.ɵɵdirectiveInject(Renderer2), i0.ɵɵdirectiveInject(NgZone));\n  };\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: GridsterItemComponent,\n    selectors: [[\"gridster-item\"]],\n    hostVars: 2,\n    hostBindings: function GridsterItemComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"z-index\", ctx.zIndex);\n      }\n    },\n    inputs: {\n      item: \"item\"\n    },\n    outputs: {\n      itemInit: \"itemInit\",\n      itemChange: \"itemChange\",\n      itemResize: \"itemResize\"\n    },\n    standalone: true,\n    features: [i0.ɵɵNgOnChangesFeature, i0.ɵɵStandaloneFeature],\n    ngContentSelectors: _c0,\n    decls: 9,\n    vars: 8,\n    consts: [[\"class\", \"gridster-item-resizable-handler handle-s\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-e\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-n\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-w\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-se\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-ne\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-sw\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-nw\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [1, \"gridster-item-resizable-handler\", \"handle-s\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-e\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-n\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-w\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-se\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-ne\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-sw\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-nw\", 3, \"mousedown\", \"touchstart\"]],\n    template: function GridsterItemComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n        i0.ɵɵtemplate(1, GridsterItemComponent_div_1_Template, 1, 0, \"div\", 0);\n        i0.ɵɵtemplate(2, GridsterItemComponent_div_2_Template, 1, 0, \"div\", 1);\n        i0.ɵɵtemplate(3, GridsterItemComponent_div_3_Template, 1, 0, \"div\", 2);\n        i0.ɵɵtemplate(4, GridsterItemComponent_div_4_Template, 1, 0, \"div\", 3);\n        i0.ɵɵtemplate(5, GridsterItemComponent_div_5_Template, 1, 0, \"div\", 4);\n        i0.ɵɵtemplate(6, GridsterItemComponent_div_6_Template, 1, 0, \"div\", 5);\n        i0.ɵɵtemplate(7, GridsterItemComponent_div_7_Template, 1, 0, \"div\", 6);\n        i0.ɵɵtemplate(8, GridsterItemComponent_div_8_Template, 1, 0, \"div\", 7);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.resize.resizableHandles == null ? null : ctx.resize.resizableHandles.s) && ctx.resize.resizeEnabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.resize.resizableHandles == null ? null : ctx.resize.resizableHandles.e) && ctx.resize.resizeEnabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.resize.resizableHandles == null ? null : ctx.resize.resizableHandles.n) && ctx.resize.resizeEnabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.resize.resizableHandles == null ? null : ctx.resize.resizableHandles.w) && ctx.resize.resizeEnabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.resize.resizableHandles == null ? null : ctx.resize.resizableHandles.se) && ctx.resize.resizeEnabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.resize.resizableHandles == null ? null : ctx.resize.resizableHandles.ne) && ctx.resize.resizeEnabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.resize.resizableHandles == null ? null : ctx.resize.resizableHandles.sw) && ctx.resize.resizeEnabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.resize.resizableHandles == null ? null : ctx.resize.resizableHandles.nw) && ctx.resize.resizeEnabled);\n      }\n    },\n    dependencies: [NgIf],\n    styles: [\"gridster-item{box-sizing:border-box;z-index:1;position:absolute;overflow:hidden;transition:.3s;display:none;background:white;-webkit-user-select:text;user-select:text}gridster-item.gridster-item-moving{cursor:move}gridster-item.gridster-item-resizing,gridster-item.gridster-item-moving{transition:0s;z-index:2;box-shadow:0 0 5px 5px #0003,0 6px 10px #00000024,0 1px 18px #0000001f}.gridster-item-resizable-handler{position:absolute;z-index:2}.gridster-item-resizable-handler.handle-n{cursor:ns-resize;height:10px;right:0;top:0;left:0}.gridster-item-resizable-handler.handle-e{cursor:ew-resize;width:10px;bottom:0;right:0;top:0}.gridster-item-resizable-handler.handle-s{cursor:ns-resize;height:10px;right:0;bottom:0;left:0}.gridster-item-resizable-handler.handle-w{cursor:ew-resize;width:10px;left:0;top:0;bottom:0}.gridster-item-resizable-handler.handle-ne{cursor:ne-resize;width:10px;height:10px;right:0;top:0}.gridster-item-resizable-handler.handle-nw{cursor:nw-resize;width:10px;height:10px;left:0;top:0}.gridster-item-resizable-handler.handle-se{cursor:se-resize;width:0;height:0;right:0;bottom:0;border-style:solid;border-width:0 0 10px 10px;border-color:transparent}.gridster-item-resizable-handler.handle-sw{cursor:sw-resize;width:10px;height:10px;left:0;bottom:0}gridster-item:hover .gridster-item-resizable-handler.handle-se{border-color:transparent transparent #ccc}\\n\"],\n    encapsulation: 2\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GridsterItemComponent, [{\n    type: Component,\n    args: [{\n      selector: 'gridster-item',\n      encapsulation: ViewEncapsulation.None,\n      standalone: true,\n      imports: [NgIf],\n      template: \"<ng-content></ng-content>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"resize.resizableHandles?.s && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-s\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"resize.resizableHandles?.e && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-e\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"resize.resizableHandles?.n && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-n\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"resize.resizableHandles?.w && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-w\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"resize.resizableHandles?.se && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-se\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"resize.resizableHandles?.ne && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-ne\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"resize.resizableHandles?.sw && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-sw\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"resize.resizableHandles?.nw && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-nw\\\"\\n></div>\\n\",\n      styles: [\"gridster-item{box-sizing:border-box;z-index:1;position:absolute;overflow:hidden;transition:.3s;display:none;background:white;-webkit-user-select:text;user-select:text}gridster-item.gridster-item-moving{cursor:move}gridster-item.gridster-item-resizing,gridster-item.gridster-item-moving{transition:0s;z-index:2;box-shadow:0 0 5px 5px #0003,0 6px 10px #00000024,0 1px 18px #0000001f}.gridster-item-resizable-handler{position:absolute;z-index:2}.gridster-item-resizable-handler.handle-n{cursor:ns-resize;height:10px;right:0;top:0;left:0}.gridster-item-resizable-handler.handle-e{cursor:ew-resize;width:10px;bottom:0;right:0;top:0}.gridster-item-resizable-handler.handle-s{cursor:ns-resize;height:10px;right:0;bottom:0;left:0}.gridster-item-resizable-handler.handle-w{cursor:ew-resize;width:10px;left:0;top:0;bottom:0}.gridster-item-resizable-handler.handle-ne{cursor:ne-resize;width:10px;height:10px;right:0;top:0}.gridster-item-resizable-handler.handle-nw{cursor:nw-resize;width:10px;height:10px;left:0;top:0}.gridster-item-resizable-handler.handle-se{cursor:se-resize;width:0;height:0;right:0;bottom:0;border-style:solid;border-width:0 0 10px 10px;border-color:transparent}.gridster-item-resizable-handler.handle-sw{cursor:sw-resize;width:10px;height:10px;left:0;bottom:0}gridster-item:hover .gridster-item-resizable-handler.handle-se{border-color:transparent transparent #ccc}\\n\"]\n    }]\n  }], () => [{\n    type: i0.ElementRef,\n    decorators: [{\n      type: Inject,\n      args: [ElementRef]\n    }]\n  }, {\n    type: GridsterComponent\n  }, {\n    type: i0.Renderer2,\n    decorators: [{\n      type: Inject,\n      args: [Renderer2]\n    }]\n  }, {\n    type: i0.NgZone,\n    decorators: [{\n      type: Inject,\n      args: [NgZone]\n    }]\n  }], {\n    item: [{\n      type: Input\n    }],\n    itemInit: [{\n      type: Output\n    }],\n    itemChange: [{\n      type: Output\n    }],\n    itemResize: [{\n      type: Output\n    }],\n    zIndex: [{\n      type: HostBinding,\n      args: ['style.z-index']\n    }]\n  });\n})();\nclass GridsterItemComponentInterface {}\nclass GridsterComponentInterface {}\nclass GridsterModule {\n  static #_ = this.ɵfac = function GridsterModule_Factory(t) {\n    return new (t || GridsterModule)();\n  };\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: GridsterModule\n  });\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GridsterModule, [{\n    type: NgModule,\n    args: [{\n      imports: [GridsterComponent, GridsterItemComponent],\n      exports: [GridsterComponent, GridsterItemComponent]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of gridster\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CompactType, DirTypes, DisplayGrid, GridType, GridsterComponent, GridsterComponentInterface, GridsterConfigService, GridsterItemComponent, GridsterItemComponentInterface, GridsterModule, GridsterPush, GridsterPushResize, GridsterSwap };","map":{"version":3,"names":["NgForOf","NgStyle","NgIf","i0","Component","ViewEncapsulation","Input","EventEmitter","ElementRef","Renderer2","ChangeDetectorRef","NgZone","Inject","Output","HostBinding","NgModule","Subject","debounceTime","takeUntil","timer","switchMap","GridsterComponent_div_0_Template","rf","ctx","ɵɵelement","i_r3","index","ctx_r0","ɵɵnextContext","ɵɵproperty","gridRenderer","getGridColumnStyle","GridsterComponent_div_1_Template","i_r5","ctx_r1","getGridRowStyle","_c0","GridsterItemComponent_div_1_Template","_r9","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","GridsterItemComponent_div_1_Template_div_mousedown_0_listener","$event","ɵɵrestoreView","ctx_r8","ɵɵresetView","resize","dragStartDelay","GridsterItemComponent_div_1_Template_div_touchstart_0_listener","ctx_r10","ɵɵelementEnd","GridsterItemComponent_div_2_Template","_r12","GridsterItemComponent_div_2_Template_div_mousedown_0_listener","ctx_r11","GridsterItemComponent_div_2_Template_div_touchstart_0_listener","ctx_r13","GridsterItemComponent_div_3_Template","_r15","GridsterItemComponent_div_3_Template_div_mousedown_0_listener","ctx_r14","GridsterItemComponent_div_3_Template_div_touchstart_0_listener","ctx_r16","GridsterItemComponent_div_4_Template","_r18","GridsterItemComponent_div_4_Template_div_mousedown_0_listener","ctx_r17","GridsterItemComponent_div_4_Template_div_touchstart_0_listener","ctx_r19","GridsterItemComponent_div_5_Template","_r21","GridsterItemComponent_div_5_Template_div_mousedown_0_listener","ctx_r20","GridsterItemComponent_div_5_Template_div_touchstart_0_listener","ctx_r22","GridsterItemComponent_div_6_Template","_r24","GridsterItemComponent_div_6_Template_div_mousedown_0_listener","ctx_r23","GridsterItemComponent_div_6_Template_div_touchstart_0_listener","ctx_r25","GridsterItemComponent_div_7_Template","_r27","GridsterItemComponent_div_7_Template_div_mousedown_0_listener","ctx_r26","GridsterItemComponent_div_7_Template_div_touchstart_0_listener","ctx_r28","GridsterItemComponent_div_8_Template","_r30","GridsterItemComponent_div_8_Template_div_mousedown_0_listener","ctx_r29","GridsterItemComponent_div_8_Template_div_touchstart_0_listener","ctx_r31","GridType","DisplayGrid","CompactType","DirTypes","GridsterCompact","constructor","gridster","destroy","checkCompact","$options","compactType","None","CompactUp","checkCompactMovement","CompactLeft","CompactUpAndLeft","CompactLeftAndUp","CompactRight","CompactUpAndRight","CompactRightAndUp","CompactDown","CompactDownAndLeft","CompactDownAndRight","CompactLeftAndDown","CompactRightAndDown","checkCompactItem","item","moveTillCollision","direction","delta","widgetMoved","grid","forEach","widget","$item","compactEnabled","moved","itemChanged","checkCollision","GridsterConfigService","gridType","Fit","scale","fixedColWidth","fixedRowHeight","keepFixedHeightInMobile","keepFixedWidthInMobile","setGridSize","mobileBreakpoint","useBodyForBreakpoint","allowMultiLayer","defaultLayerIndex","maxLayerIndex","baseLayerIndex","minCols","maxCols","minRows","maxRows","defaultItemCols","defaultItemRows","maxItemCols","maxItemRows","minItemCols","minItemRows","minItemArea","maxItemArea","addEmptyRowsCount","rowHeightRatio","margin","outerMargin","outerMarginTop","outerMarginRight","outerMarginBottom","outerMarginLeft","useTransformPositioning","scrollSensitivity","scrollSpeed","initCallback","undefined","destroyCallback","gridSizeChangedCallback","itemChangeCallback","itemResizeCallback","itemInitCallback","itemRemovedCallback","itemValidateCallback","enableEmptyCellClick","enableEmptyCellContextMenu","enableEmptyCellDrop","enableEmptyCellDrag","enableOccupiedCellDrop","emptyCellClickCallback","emptyCellContextMenuCallback","emptyCellDropCallback","emptyCellDragCallback","emptyCellDragMaxCols","emptyCellDragMaxRows","ignoreMarginInRow","draggable","delayStart","enabled","ignoreContentClass","ignoreContent","dragHandleClass","stop","start","dropOverItems","dropOverItemsCallback","resizable","handles","s","e","n","w","se","ne","sw","nw","swap","swapWhileDragging","pushItems","disablePushOnDrag","disablePushOnResize","pushDirections","north","east","south","west","pushResizeItems","displayGrid","OnDragAndResize","disableWindowResize","disableWarnings","scrollToNewItems","disableScrollHorizontal","disableScrollVertical","enableBoundaryControl","disableAutoPositionOnConflict","dirType","LTR","GridsterUtils","merge","obj1","obj2","properties","p","hasOwnProperty","checkTouchEvent","clientX","touches","length","clientY","changedTouches","checkContentClassForEvent","checkDragHandleClass","target","currentTarget","checkContentClass","checkContentClassForEmptyCellClickEvent","current","hasAttribute","classnames","getAttribute","split","indexOf","parentNode","contentClass","compareItems","a","b","y","x","GridsterEmptyCell","emptyCellClickCb","movingItem","getValidItemFromEvent","options","cdRef","markForCheck","emptyCellContextMenuCb","preventDefault","stopPropagation","emptyCellDragDrop","emptyCellDragOver","dataTransfer","dropEffect","previewStyle","emptyCellMouseDown","leftMouseButtonCode","buttons","TouchEvent","initialItem","zone","runOutsideAngular","removeWindowMousemoveListenerFn","renderer","listen","emptyCellMouseMove","removeWindowTouchmoveListenerFn","removeWindowMouseupListenerFn","emptyCellMouseUp","removeWindowTouchendListenerFn","setTimeout","removeDocumentDragendListenerFn","updateOptions","removeEmptyCellClickListenerFn","el","removeEmptyCellTouchendListenerFn","removeEmptyCellContextMenuListenerFn","removeEmptyCellDropListenerFn","removeEmptyCellDragoverListenerFn","removeEmptyCellMousedownListenerFn","removeEmptyCellTouchstartListenerFn","getPixelsX","rect","left","scrollLeft","getLeftMargin","getPixelsY","top","scrollTop","getTopMargin","oldItem","getBoundingClientRect","pixelsToPositionX","Math","floor","pixelsToPositionY","cols","rows","min","abs","GridsterRenderer","lastGridColumnStyles","lastGridRowStyles","updateItem","mobile","clearCellPosition","setStyle","curWidth","round","curColWidth","curRowHeight","width","height","setCellPosition","marginBottom","marginRight","columns","updateGridster","addClass","removeClass1","removeClass2","removeClass3","ScrollVertical","ScrollHorizontal","Fixed","widthRatio","calWidthRatio","VerticalFixed","HorizontalFixed","removeClass","i","newPos","gridRows","style","getLeftPosition","last","gridColumns","getTopPosition","d","dPosition","RTL","transform","xPosition","GridsterPreviewComponent","nativeElement","ngOnInit","sub","previewStyle$","subscribe","ngOnDestroy","unsubscribe","_","ɵfac","GridsterPreviewComponent_Factory","t","ɵɵdirectiveInject","_2","ɵcmp","ɵɵdefineComponent","type","selectors","inputs","standalone","features","ɵɵStandaloneFeature","decls","vars","template","GridsterPreviewComponent_Template","styles","encapsulation","ngDevMode","ɵsetClassMetadata","args","selector","GridsterComponent","calculateLayout$","resize$","destroy$","optionsChanged","setOptions","widgetsIndex","calculateLayout","onResize","clientWidth","getNextPossiblePosition","newItem","startingFrom","setGridDimensions","rowsIndex","colsIndex","canAddToRows","canAddToColumns","addToRows","getFirstPossiblePosition","tmpItem","Object","assign","getLastPossiblePosition","farthestItem","reduce","prev","curr","currCoords","JSON","parse","stringify","curHeight","dragInProgress","emptyCell","compact","checkCollisionTwoItemsForSwaping","item2","horizontalBoundaryItem1","horizontalBoundaryItem2","verticalBoundaryItem1","verticalBoundaryItem2","checkCollisionTwoItems","collision","layerIndex","layerIndex2","pipe","ngOnChanges","changes","api","getItemComponent","offsetWidth","offsetHeight","clientHeight","checkIfToResize","windowResize","next","complete","scrollWidth","scrollHeight","verticalScrollPresent","horizontalScrollPresent","checkIfMobile","document","body","notPlaced","max","marginWidth","marginHeight","updateGrid","setSize","drag","toggle","getNewArrayLength","addItem","itemComponent","autoPositionItem","console","warn","push","removeItem","splice","checkGridCollision","c","findItemWithItem","noNegativePosition","maxGridCols","maxGridRows","inColsLimits","inRowsLimits","minAreaLimit","maxAreaLimit","area","inMinArea","inMaxArea","findItemsWithItem","roundingMethod","noLimit","position","positionXToPixels","positionYToPixels","find","checkCollisionForSwaping","findItemWithItemForSwapping","overallSize","size","newLength","Number","isFinite","GridsterComponent_Factory","ɵɵNgOnChangesFeature","ngContentSelectors","consts","GridsterComponent_Template","ɵɵprojectionDef","ɵɵtemplate","ɵɵprojection","ɵɵadvance","dependencies","imports","decorators","GridsterPush","gridsterItem","iteration","pushedItems","pushedItemsTemp","pushedItemsTempPath","pushedItemsPath","tryPattern","fromEast","tryWest","trySouth","tryNorth","tryEast","fromWest","fromNorth","fromSouth","disable","pushedItemsOrder","pushed","restoreTempItems","removeFromTempPushed","restoreItems","l","pushedItem","setPushedItems","checkItemChanges","checkPushBack","change","checkPushedItem","conflicts","invert","sort","itemCollision","makePush","canBeDragged","call","lastIndexOf","j","pop","removeFromPushedItem","gridsterItemCollide","addToTempPushed","addToPushed","tempPosition","removeFromPushed","path","lastPosition","intervalDuration","gridsterElement","resizeEvent","resizeEventType","intervalE","intervalW","intervalN","intervalS","scroll","event","lastMouse","calculateItemPosition","resizeEventScrollType","offsetLeft","offsetTop","elemTopOffset","elemBottomOffset","cancelN","startVertical","cancelS","cancelVertical","elemRightOffset","elemLeftOffset","cancelW","startHorizontal","cancelE","cancelHorizontal","sign","window","setInterval","cancelScroll","clearInterval","GridsterSwap","swapedItem","swapItems","checkSwapBack","checkSwap","restoreSwapItem","setSwapItem","pushedBy","gridsterItemCollision","copyCollisionX","copyCollisionY","copyX","copyY","diffX","diffY","GRIDSTER_ITEM_RESIZABLE_HANDLER_CLASS","Direction","GridsterDraggable","dragMove","directions","getDirections","includes","UP","filter","MouseEvent","LEFT","RIGHT","right","DOWN","bottom","calculateItemPositionFromMousePosition","calculateItemPositionWithScale","calculateItemPositionWithoutScale","run","dragStop","cancelOnBlur","mousemove","mouseup","mouseleave","touchmove","touchend","touchcancel","Promise","resolve","then","makeDrag","cancelDrag","classList","contains","dragStart","timeout","cancelMouse","cancelMouseLeave","cancelTouchMove","cancelMove","cancelTouchEnd","cancelTouchCancel","eventMove","clearTimeout","mousedown","touchstart","which","originalClientX","originalClientY","diffLeft","diffTop","positionX","positionY","positionXBackup","positionYBackup","enableDrag","GridsterPushResize","row","canBeResized","backUpY","backUpRows","backUpX","backUpCols","GridsterResizable","directionFunction","Error","makeResize","cancelResize","pushResize","handleNorth","minHeight","marginTop","newPosition","itemBackup","setItemTop","setItemHeight","handleWest","minWidth","marginLeft","setItemLeft","setItemWidth","handleSouth","diffBottom","box","ceil","handleEast","diffRight","handleNorthWest","handleNorthEast","handleSouthWest","handleSouthEast","resizeEnabled","resizableHandles","getResizableHandles","GridsterItemComponent","zIndex","getLayerIndex","itemInit","itemChange","itemResize","init","previousValue","dragEnabled","updateItemSize","scrollIntoView","newValue","oldValue","gridDragEnabled","itemDragEnabled","gridResizable","itemResizable","gridResizableHandles","itemResizableHandles","bringToFront","offset","topIndex","targetIndex","sendToBack","GridsterItemComponent_Factory","hostVars","hostBindings","GridsterItemComponent_HostBindings","ɵɵstyleProp","outputs","GridsterItemComponent_Template","GridsterItemComponentInterface","GridsterComponentInterface","GridsterModule","GridsterModule_Factory","ɵmod","ɵɵdefineNgModule","_3","ɵinj","ɵɵdefineInjector","exports"],"sources":["C:/Internship/FoodShopUI/node_modules/angular-gridster2/fesm2022/angular-gridster2.mjs"],"sourcesContent":["import { NgForOf, NgStyle, NgIf } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, Input, EventEmitter, ElementRef, Renderer2, ChangeDetectorRef, NgZone, Inject, Output, HostBinding, NgModule } from '@angular/core';\nimport { Subject, debounceTime, takeUntil, timer, switchMap } from 'rxjs';\n\nvar GridType;\n(function (GridType) {\n    GridType[\"Fit\"] = \"fit\";\n    GridType[\"ScrollVertical\"] = \"scrollVertical\";\n    GridType[\"ScrollHorizontal\"] = \"scrollHorizontal\";\n    GridType[\"Fixed\"] = \"fixed\";\n    GridType[\"VerticalFixed\"] = \"verticalFixed\";\n    GridType[\"HorizontalFixed\"] = \"horizontalFixed\";\n})(GridType || (GridType = {}));\nvar DisplayGrid;\n(function (DisplayGrid) {\n    DisplayGrid[\"Always\"] = \"always\";\n    DisplayGrid[\"OnDragAndResize\"] = \"onDrag&Resize\";\n    DisplayGrid[\"None\"] = \"none\";\n})(DisplayGrid || (DisplayGrid = {}));\nvar CompactType;\n(function (CompactType) {\n    CompactType[\"None\"] = \"none\";\n    CompactType[\"CompactUp\"] = \"compactUp\";\n    CompactType[\"CompactLeft\"] = \"compactLeft\";\n    CompactType[\"CompactUpAndLeft\"] = \"compactUp&Left\";\n    CompactType[\"CompactLeftAndUp\"] = \"compactLeft&Up\";\n    CompactType[\"CompactRight\"] = \"compactRight\";\n    CompactType[\"CompactUpAndRight\"] = \"compactUp&Right\";\n    CompactType[\"CompactRightAndUp\"] = \"compactRight&Up\";\n    CompactType[\"CompactDown\"] = \"compactDown\";\n    CompactType[\"CompactDownAndLeft\"] = \"compactDown&Left\";\n    CompactType[\"CompactLeftAndDown\"] = \"compactLeft&Down\";\n    CompactType[\"CompactDownAndRight\"] = \"compactDown&Right\";\n    CompactType[\"CompactRightAndDown\"] = \"compactRight&Down\";\n})(CompactType || (CompactType = {}));\nvar DirTypes;\n(function (DirTypes) {\n    DirTypes[\"LTR\"] = \"ltr\";\n    DirTypes[\"RTL\"] = \"rtl\";\n})(DirTypes || (DirTypes = {}));\n\nclass GridsterCompact {\n    constructor(gridster) {\n        this.gridster = gridster;\n    }\n    destroy() {\n        this.gridster = null;\n    }\n    checkCompact() {\n        if (this.gridster.$options.compactType !== CompactType.None) {\n            if (this.gridster.$options.compactType === CompactType.CompactUp) {\n                this.checkCompactMovement('y', -1);\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n                this.checkCompactMovement('x', -1);\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n                this.checkCompactMovement('y', -1);\n                this.checkCompactMovement('x', -1);\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n                this.checkCompactMovement('x', -1);\n                this.checkCompactMovement('y', -1);\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactRight) {\n                this.checkCompactMovement('x', 1);\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\n                this.checkCompactMovement('y', -1);\n                this.checkCompactMovement('x', 1);\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactRightAndUp) {\n                this.checkCompactMovement('x', 1);\n                this.checkCompactMovement('y', -1);\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactDown) {\n                this.checkCompactMovement('y', 1);\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactDownAndLeft) {\n                this.checkCompactMovement('y', 1);\n                this.checkCompactMovement('x', -1);\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactDownAndRight) {\n                this.checkCompactMovement('y', 1);\n                this.checkCompactMovement('x', 1);\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactLeftAndDown) {\n                this.checkCompactMovement('x', -1);\n                this.checkCompactMovement('y', 1);\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactRightAndDown) {\n                this.checkCompactMovement('x', 1);\n                this.checkCompactMovement('y', 1);\n            }\n        }\n    }\n    checkCompactItem(item) {\n        if (this.gridster.$options.compactType !== CompactType.None) {\n            if (this.gridster.$options.compactType === CompactType.CompactUp) {\n                this.moveTillCollision(item, 'y', -1);\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n                this.moveTillCollision(item, 'x', -1);\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n                this.moveTillCollision(item, 'y', -1);\n                this.moveTillCollision(item, 'x', -1);\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n                this.moveTillCollision(item, 'x', -1);\n                this.moveTillCollision(item, 'y', -1);\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\n                this.moveTillCollision(item, 'y', -1);\n                this.moveTillCollision(item, 'x', 1);\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactDown) {\n                this.moveTillCollision(item, 'y', 1);\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactDownAndLeft) {\n                this.moveTillCollision(item, 'y', 1);\n                this.moveTillCollision(item, 'x', -1);\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactLeftAndDown) {\n                this.moveTillCollision(item, 'x', -1);\n                this.moveTillCollision(item, 'y', 1);\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactDownAndRight) {\n                this.moveTillCollision(item, 'y', 1);\n                this.moveTillCollision(item, 'x', 1);\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactRightAndDown) {\n                this.moveTillCollision(item, 'x', 1);\n                this.moveTillCollision(item, 'y', 1);\n            }\n        }\n    }\n    checkCompactMovement(direction, delta) {\n        let widgetMoved = false;\n        this.gridster.grid.forEach((widget) => {\n            if (widget.$item.compactEnabled !== false) {\n                const moved = this.moveTillCollision(widget.$item, direction, delta);\n                if (moved) {\n                    widgetMoved = true;\n                    widget.item[direction] = widget.$item[direction];\n                    widget.itemChanged();\n                }\n            }\n        });\n        if (widgetMoved) {\n            this.checkCompact();\n        }\n    }\n    moveTillCollision(item, direction, delta) {\n        item[direction] += delta;\n        if (this.gridster.checkCollision(item)) {\n            item[direction] -= delta;\n            return false;\n        }\n        else {\n            this.moveTillCollision(item, direction, delta);\n            return true;\n        }\n    }\n}\n\nconst GridsterConfigService = {\n    gridType: GridType.Fit,\n    scale: 1,\n    // 'scrollVertical' will fit on width and height of the items will be the same as the width\n    // 'scrollHorizontal' will fit on height and width of the items will be the same as the height\n    // 'fixed' will set the rows and columns dimensions based on fixedColWidth and fixedRowHeight options\n    // 'verticalFixed' will set the rows to fixedRowHeight and columns width will fit the space available\n    // 'horizontalFixed' will set the columns to fixedColWidth and rows height will fit the space available\n    fixedColWidth: 250,\n    fixedRowHeight: 250,\n    keepFixedHeightInMobile: false,\n    keepFixedWidthInMobile: false,\n    setGridSize: false,\n    compactType: CompactType.None,\n    mobileBreakpoint: 640,\n    useBodyForBreakpoint: false,\n    allowMultiLayer: false,\n    defaultLayerIndex: 0,\n    maxLayerIndex: 2,\n    baseLayerIndex: 1,\n    minCols: 1,\n    maxCols: 100,\n    minRows: 1,\n    maxRows: 100,\n    defaultItemCols: 1,\n    defaultItemRows: 1,\n    maxItemCols: 50,\n    maxItemRows: 50,\n    minItemCols: 1,\n    minItemRows: 1,\n    minItemArea: 1,\n    maxItemArea: 2500,\n    addEmptyRowsCount: 0,\n    rowHeightRatio: 1,\n    margin: 10,\n    outerMargin: true,\n    outerMarginTop: null,\n    outerMarginRight: null,\n    outerMarginBottom: null,\n    outerMarginLeft: null,\n    useTransformPositioning: true,\n    scrollSensitivity: 10,\n    scrollSpeed: 20,\n    initCallback: undefined,\n    destroyCallback: undefined,\n    gridSizeChangedCallback: undefined,\n    itemChangeCallback: undefined,\n    // Arguments: gridsterItem, gridsterItemComponent\n    itemResizeCallback: undefined,\n    // Arguments: gridsterItem, gridsterItemComponent\n    itemInitCallback: undefined,\n    // Arguments: gridsterItem, gridsterItemComponent\n    itemRemovedCallback: undefined,\n    // Arguments: gridsterItem, gridsterItemComponent\n    itemValidateCallback: undefined,\n    // Arguments: gridsterItem\n    enableEmptyCellClick: false,\n    enableEmptyCellContextMenu: false,\n    enableEmptyCellDrop: false,\n    enableEmptyCellDrag: false,\n    enableOccupiedCellDrop: false,\n    emptyCellClickCallback: undefined,\n    emptyCellContextMenuCallback: undefined,\n    emptyCellDropCallback: undefined,\n    emptyCellDragCallback: undefined,\n    emptyCellDragMaxCols: 50,\n    emptyCellDragMaxRows: 50,\n    // Arguments: event, gridsterItem{x, y, rows: defaultItemRows, cols: defaultItemCols}\n    ignoreMarginInRow: false,\n    draggable: {\n        delayStart: 0,\n        enabled: false,\n        ignoreContentClass: 'gridster-item-content',\n        ignoreContent: false,\n        dragHandleClass: 'drag-handler',\n        stop: undefined,\n        start: undefined,\n        // Arguments: item, gridsterItem, event\n        dropOverItems: false,\n        dropOverItemsCallback: undefined // callback on drop over another item\n        // Arguments: source, target, gridComponent\n    },\n    resizable: {\n        delayStart: 0,\n        enabled: false,\n        handles: {\n            s: true,\n            e: true,\n            n: true,\n            w: true,\n            se: true,\n            ne: true,\n            sw: true,\n            nw: true\n        },\n        stop: undefined,\n        start: undefined // callback when resizing an item starts.\n        // Arguments: item, gridsterItem, event\n    },\n    swap: true,\n    swapWhileDragging: false,\n    pushItems: false,\n    disablePushOnDrag: false,\n    disablePushOnResize: false,\n    pushDirections: { north: true, east: true, south: true, west: true },\n    pushResizeItems: false,\n    displayGrid: DisplayGrid.OnDragAndResize,\n    disableWindowResize: false,\n    disableWarnings: false,\n    scrollToNewItems: false,\n    disableScrollHorizontal: false,\n    disableScrollVertical: false,\n    enableBoundaryControl: false,\n    disableAutoPositionOnConflict: false,\n    dirType: DirTypes.LTR // page direction, rtl=right to left ltr= left to right, if you use rtl language set dirType to rtl\n};\n\nclass GridsterUtils {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static merge(obj1, obj2, properties) {\n        for (const p in obj2) {\n            if (obj2[p] !== void 0 && properties.hasOwnProperty(p)) {\n                if (typeof obj2[p] === 'object') {\n                    // create an empty object for the property if obj1 does not already have one.\n                    if (!(p in obj1)) {\n                        obj1[p] = {};\n                    }\n                    obj1[p] = GridsterUtils.merge(obj1[p], obj2[p], properties[p]);\n                }\n                else {\n                    obj1[p] = obj2[p];\n                }\n            }\n        }\n        return obj1;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static checkTouchEvent(e) {\n        if (e.clientX === undefined && e.touches) {\n            if (e.touches && e.touches.length) {\n                e.clientX = e.touches[0].clientX;\n                e.clientY = e.touches[0].clientY;\n            }\n            else if (e.changedTouches && e.changedTouches.length) {\n                e.clientX = e.changedTouches[0].clientX;\n                e.clientY = e.changedTouches[0].clientY;\n            }\n        }\n    }\n    static checkContentClassForEvent(gridster, e) {\n        if (gridster.$options.draggable.ignoreContent) {\n            if (!GridsterUtils.checkDragHandleClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass, gridster.$options.draggable.ignoreContentClass)) {\n                return true;\n            }\n        }\n        else {\n            if (GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    static checkContentClassForEmptyCellClickEvent(gridster, e) {\n        return (GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass) ||\n            GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass));\n    }\n    static checkDragHandleClass(target, current, dragHandleClass, ignoreContentClass) {\n        if (!target || target === current) {\n            return false;\n        }\n        if (target.hasAttribute('class')) {\n            const classnames = target.getAttribute('class').split(' ');\n            if (classnames.indexOf(dragHandleClass) > -1) {\n                return true;\n            }\n            if (classnames.indexOf(ignoreContentClass) > -1) {\n                return false;\n            }\n        }\n        return GridsterUtils.checkDragHandleClass(target.parentNode, current, dragHandleClass, ignoreContentClass);\n    }\n    static checkContentClass(target, current, contentClass) {\n        if (!target || target === current) {\n            return false;\n        }\n        if (target.hasAttribute('class') &&\n            target.getAttribute('class').split(' ').indexOf(contentClass) > -1) {\n            return true;\n        }\n        else {\n            return GridsterUtils.checkContentClass(target.parentNode, current, contentClass);\n        }\n    }\n    static compareItems(a, b) {\n        if (a.y > b.y) {\n            return -1;\n        }\n        else if (a.y < b.y) {\n            return 1;\n        }\n        else if (a.x > b.x) {\n            return -1;\n        }\n        else {\n            return 1;\n        }\n    }\n}\n\nclass GridsterEmptyCell {\n    constructor(gridster) {\n        this.gridster = gridster;\n        this.emptyCellClickCb = (e) => {\n            if (!this.gridster ||\n                this.gridster.movingItem ||\n                GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n                return;\n            }\n            const item = this.getValidItemFromEvent(e);\n            if (!item) {\n                return;\n            }\n            if (this.gridster.options.emptyCellClickCallback) {\n                this.gridster.options.emptyCellClickCallback(e, item);\n            }\n            this.gridster.cdRef.markForCheck();\n        };\n        this.emptyCellContextMenuCb = (e) => {\n            if (this.gridster.movingItem ||\n                GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n                return;\n            }\n            e.preventDefault();\n            e.stopPropagation();\n            const item = this.getValidItemFromEvent(e);\n            if (!item) {\n                return;\n            }\n            if (this.gridster.options.emptyCellContextMenuCallback) {\n                this.gridster.options.emptyCellContextMenuCallback(e, item);\n            }\n            this.gridster.cdRef.markForCheck();\n        };\n        this.emptyCellDragDrop = (e) => {\n            const item = this.getValidItemFromEvent(e);\n            if (!item) {\n                return;\n            }\n            if (this.gridster.options.emptyCellDropCallback) {\n                this.gridster.options.emptyCellDropCallback(e, item);\n            }\n            this.gridster.cdRef.markForCheck();\n        };\n        this.emptyCellDragOver = (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            const item = this.getValidItemFromEvent(e);\n            if (item) {\n                if (e.dataTransfer) {\n                    e.dataTransfer.dropEffect = 'move';\n                }\n                this.gridster.movingItem = item;\n            }\n            else {\n                if (e.dataTransfer) {\n                    e.dataTransfer.dropEffect = 'none';\n                }\n                this.gridster.movingItem = null;\n            }\n            this.gridster.previewStyle();\n        };\n        this.emptyCellMouseDown = (e) => {\n            if (GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n                return;\n            }\n            e.preventDefault();\n            e.stopPropagation();\n            const item = this.getValidItemFromEvent(e);\n            const leftMouseButtonCode = 1;\n            if (!item ||\n                (e.buttons !== leftMouseButtonCode && !(e instanceof TouchEvent))) {\n                return;\n            }\n            this.initialItem = item;\n            this.gridster.movingItem = item;\n            this.gridster.previewStyle();\n            this.gridster.zone.runOutsideAngular(() => {\n                this.removeWindowMousemoveListenerFn = this.gridster.renderer.listen('window', 'mousemove', this.emptyCellMouseMove);\n                this.removeWindowTouchmoveListenerFn = this.gridster.renderer.listen('window', 'touchmove', this.emptyCellMouseMove);\n            });\n            this.removeWindowMouseupListenerFn = this.gridster.renderer.listen('window', 'mouseup', this.emptyCellMouseUp);\n            this.removeWindowTouchendListenerFn = this.gridster.renderer.listen('window', 'touchend', this.emptyCellMouseUp);\n        };\n        this.emptyCellMouseMove = (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            const item = this.getValidItemFromEvent(e, this.initialItem);\n            if (!item) {\n                return;\n            }\n            this.gridster.movingItem = item;\n            this.gridster.previewStyle();\n        };\n        this.emptyCellMouseUp = (e) => {\n            this.removeWindowMousemoveListenerFn();\n            this.removeWindowTouchmoveListenerFn();\n            this.removeWindowMouseupListenerFn();\n            this.removeWindowTouchendListenerFn();\n            const item = this.getValidItemFromEvent(e, this.initialItem);\n            if (item) {\n                this.gridster.movingItem = item;\n            }\n            if (this.gridster.options.emptyCellDragCallback &&\n                this.gridster.movingItem) {\n                this.gridster.options.emptyCellDragCallback(e, this.gridster.movingItem);\n            }\n            setTimeout(() => {\n                this.initialItem = null;\n                if (this.gridster) {\n                    this.gridster.movingItem = null;\n                    this.gridster.previewStyle();\n                }\n            });\n            this.gridster.cdRef.markForCheck();\n        };\n    }\n    destroy() {\n        if (this.gridster.previewStyle) {\n            this.gridster.previewStyle();\n        }\n        this.gridster.movingItem = null;\n        this.initialItem = this.gridster = null;\n        if (this.removeDocumentDragendListenerFn) {\n            this.removeDocumentDragendListenerFn();\n            this.removeDocumentDragendListenerFn = null;\n        }\n    }\n    updateOptions() {\n        if (this.gridster.$options.enableEmptyCellClick &&\n            !this.removeEmptyCellClickListenerFn &&\n            this.gridster.options.emptyCellClickCallback) {\n            this.removeEmptyCellClickListenerFn = this.gridster.renderer.listen(this.gridster.el, 'click', this.emptyCellClickCb);\n            this.removeEmptyCellTouchendListenerFn = this.gridster.renderer.listen(this.gridster.el, 'touchend', this.emptyCellClickCb);\n        }\n        else if (!this.gridster.$options.enableEmptyCellClick &&\n            this.removeEmptyCellClickListenerFn &&\n            this.removeEmptyCellTouchendListenerFn) {\n            this.removeEmptyCellClickListenerFn();\n            this.removeEmptyCellTouchendListenerFn();\n            this.removeEmptyCellClickListenerFn = null;\n            this.removeEmptyCellTouchendListenerFn = null;\n        }\n        if (this.gridster.$options.enableEmptyCellContextMenu &&\n            !this.removeEmptyCellContextMenuListenerFn &&\n            this.gridster.options.emptyCellContextMenuCallback) {\n            this.removeEmptyCellContextMenuListenerFn = this.gridster.renderer.listen(this.gridster.el, 'contextmenu', this.emptyCellContextMenuCb);\n        }\n        else if (!this.gridster.$options.enableEmptyCellContextMenu &&\n            this.removeEmptyCellContextMenuListenerFn) {\n            this.removeEmptyCellContextMenuListenerFn();\n            this.removeEmptyCellContextMenuListenerFn = null;\n        }\n        if (this.gridster.$options.enableEmptyCellDrop &&\n            !this.removeEmptyCellDropListenerFn &&\n            this.gridster.options.emptyCellDropCallback) {\n            this.removeEmptyCellDropListenerFn = this.gridster.renderer.listen(this.gridster.el, 'drop', this.emptyCellDragDrop);\n            this.gridster.zone.runOutsideAngular(() => {\n                this.removeEmptyCellDragoverListenerFn = this.gridster.renderer.listen(this.gridster.el, 'dragover', this.emptyCellDragOver);\n            });\n            this.removeDocumentDragendListenerFn = this.gridster.renderer.listen('document', 'dragend', () => {\n                this.gridster.movingItem = null;\n                this.gridster.previewStyle();\n            });\n        }\n        else if (!this.gridster.$options.enableEmptyCellDrop &&\n            this.removeEmptyCellDropListenerFn &&\n            this.removeEmptyCellDragoverListenerFn &&\n            this.removeDocumentDragendListenerFn) {\n            this.removeEmptyCellDropListenerFn();\n            this.removeEmptyCellDragoverListenerFn();\n            this.removeDocumentDragendListenerFn();\n            this.removeEmptyCellDragoverListenerFn = null;\n            this.removeEmptyCellDropListenerFn = null;\n            this.removeDocumentDragendListenerFn = null;\n        }\n        if (this.gridster.$options.enableEmptyCellDrag &&\n            !this.removeEmptyCellMousedownListenerFn &&\n            this.gridster.options.emptyCellDragCallback) {\n            this.removeEmptyCellMousedownListenerFn = this.gridster.renderer.listen(this.gridster.el, 'mousedown', this.emptyCellMouseDown);\n            this.removeEmptyCellTouchstartListenerFn = this.gridster.renderer.listen(this.gridster.el, 'touchstart', this.emptyCellMouseDown);\n        }\n        else if (!this.gridster.$options.enableEmptyCellDrag &&\n            this.removeEmptyCellMousedownListenerFn &&\n            this.removeEmptyCellTouchstartListenerFn) {\n            this.removeEmptyCellMousedownListenerFn();\n            this.removeEmptyCellTouchstartListenerFn();\n            this.removeEmptyCellMousedownListenerFn = null;\n            this.removeEmptyCellTouchstartListenerFn = null;\n        }\n    }\n    getPixelsX(e, rect) {\n        const scale = this.gridster.options.scale;\n        if (scale) {\n            return ((e.clientX - rect.left) / scale +\n                this.gridster.el.scrollLeft -\n                this.gridster.gridRenderer.getLeftMargin());\n        }\n        return (e.clientX +\n            this.gridster.el.scrollLeft -\n            rect.left -\n            this.gridster.gridRenderer.getLeftMargin());\n    }\n    getPixelsY(e, rect) {\n        const scale = this.gridster.options.scale;\n        if (scale) {\n            return ((e.clientY - rect.top) / scale +\n                this.gridster.el.scrollTop -\n                this.gridster.gridRenderer.getTopMargin());\n        }\n        return (e.clientY +\n            this.gridster.el.scrollTop -\n            rect.top -\n            this.gridster.gridRenderer.getTopMargin());\n    }\n    getValidItemFromEvent(e, oldItem) {\n        e.preventDefault();\n        e.stopPropagation();\n        GridsterUtils.checkTouchEvent(e);\n        const rect = this.gridster.el.getBoundingClientRect();\n        const x = this.getPixelsX(e, rect);\n        const y = this.getPixelsY(e, rect);\n        const item = {\n            x: this.gridster.pixelsToPositionX(x, Math.floor, true),\n            y: this.gridster.pixelsToPositionY(y, Math.floor, true),\n            cols: this.gridster.$options.defaultItemCols,\n            rows: this.gridster.$options.defaultItemRows\n        };\n        if (oldItem) {\n            item.cols = Math.min(Math.abs(oldItem.x - item.x) + 1, this.gridster.$options.emptyCellDragMaxCols);\n            item.rows = Math.min(Math.abs(oldItem.y - item.y) + 1, this.gridster.$options.emptyCellDragMaxRows);\n            if (oldItem.x < item.x) {\n                item.x = oldItem.x;\n            }\n            else if (oldItem.x - item.x >\n                this.gridster.$options.emptyCellDragMaxCols - 1) {\n                item.x = this.gridster.movingItem ? this.gridster.movingItem.x : 0;\n            }\n            if (oldItem.y < item.y) {\n                item.y = oldItem.y;\n            }\n            else if (oldItem.y - item.y >\n                this.gridster.$options.emptyCellDragMaxRows - 1) {\n                item.y = this.gridster.movingItem ? this.gridster.movingItem.y : 0;\n            }\n        }\n        if (!this.gridster.$options.enableOccupiedCellDrop &&\n            this.gridster.checkCollision(item)) {\n            return;\n        }\n        return item;\n    }\n}\n\nclass GridsterRenderer {\n    constructor(gridster) {\n        this.gridster = gridster;\n        /**\n         * Caches the last grid column styles.\n         * This improves the grid responsiveness by caching and reusing the last style object instead of creating a new one.\n         */\n        this.lastGridColumnStyles = {};\n        /**\n         * Caches the last grid column styles.\n         * This improves the grid responsiveness by caching and reusing the last style object instead of creating a new one.\n         */\n        this.lastGridRowStyles = {};\n    }\n    destroy() {\n        this.gridster = null;\n    }\n    updateItem(el, item, renderer) {\n        if (this.gridster.mobile) {\n            this.clearCellPosition(renderer, el);\n            if (this.gridster.$options.keepFixedHeightInMobile) {\n                renderer.setStyle(el, 'height', (item.rows - 1) * this.gridster.$options.margin +\n                    item.rows * this.gridster.$options.fixedRowHeight +\n                    'px');\n            }\n            else {\n                renderer.setStyle(el, 'height', (item.rows * this.gridster.curWidth) / item.cols + 'px');\n            }\n            if (this.gridster.$options.keepFixedWidthInMobile) {\n                renderer.setStyle(el, 'width', this.gridster.$options.fixedColWidth + 'px');\n            }\n            else {\n                renderer.setStyle(el, 'width', '');\n            }\n            renderer.setStyle(el, 'margin-bottom', this.gridster.$options.margin + 'px');\n            renderer.setStyle(el, DirTypes.LTR ? 'margin-right' : 'margin-left', '');\n        }\n        else {\n            const x = Math.round(this.gridster.curColWidth * item.x);\n            const y = Math.round(this.gridster.curRowHeight * item.y);\n            const width = this.gridster.curColWidth * item.cols - this.gridster.$options.margin;\n            const height = this.gridster.curRowHeight * item.rows - this.gridster.$options.margin;\n            // set the cell style\n            this.setCellPosition(renderer, el, x, y);\n            renderer.setStyle(el, 'width', width + 'px');\n            renderer.setStyle(el, 'height', height + 'px');\n            let marginBottom = null;\n            let marginRight = null;\n            if (this.gridster.$options.outerMargin) {\n                if (this.gridster.rows === item.rows + item.y) {\n                    if (this.gridster.$options.outerMarginBottom !== null) {\n                        marginBottom = this.gridster.$options.outerMarginBottom + 'px';\n                    }\n                    else {\n                        marginBottom = this.gridster.$options.margin + 'px';\n                    }\n                }\n                if (this.gridster.columns === item.cols + item.x) {\n                    if (this.gridster.$options.outerMarginBottom !== null) {\n                        marginRight = this.gridster.$options.outerMarginRight + 'px';\n                    }\n                    else {\n                        marginRight = this.gridster.$options.margin + 'px';\n                    }\n                }\n            }\n            renderer.setStyle(el, 'margin-bottom', marginBottom);\n            renderer.setStyle(el, DirTypes.LTR ? 'margin-right' : 'margin-left', marginRight);\n        }\n    }\n    updateGridster() {\n        let addClass = '';\n        let removeClass1 = '';\n        let removeClass2 = '';\n        let removeClass3 = '';\n        if (this.gridster.$options.gridType === GridType.Fit) {\n            addClass = GridType.Fit;\n            removeClass1 = GridType.ScrollVertical;\n            removeClass2 = GridType.ScrollHorizontal;\n            removeClass3 = GridType.Fixed;\n        }\n        else if (this.gridster.$options.gridType === GridType.ScrollVertical) {\n            this.gridster.curRowHeight =\n                this.gridster.curColWidth * this.gridster.$options.rowHeightRatio;\n            addClass = GridType.ScrollVertical;\n            removeClass1 = GridType.Fit;\n            removeClass2 = GridType.ScrollHorizontal;\n            removeClass3 = GridType.Fixed;\n        }\n        else if (this.gridster.$options.gridType === GridType.ScrollHorizontal) {\n            const widthRatio = this.gridster.$options.rowHeightRatio;\n            const calWidthRatio = widthRatio >= 1 ? widthRatio : widthRatio + 1;\n            this.gridster.curColWidth = this.gridster.curRowHeight * calWidthRatio;\n            addClass = GridType.ScrollHorizontal;\n            removeClass1 = GridType.Fit;\n            removeClass2 = GridType.ScrollVertical;\n            removeClass3 = GridType.Fixed;\n        }\n        else if (this.gridster.$options.gridType === GridType.Fixed) {\n            this.gridster.curColWidth =\n                this.gridster.$options.fixedColWidth +\n                    (this.gridster.$options.ignoreMarginInRow\n                        ? 0\n                        : this.gridster.$options.margin);\n            this.gridster.curRowHeight =\n                this.gridster.$options.fixedRowHeight +\n                    (this.gridster.$options.ignoreMarginInRow\n                        ? 0\n                        : this.gridster.$options.margin);\n            addClass = GridType.Fixed;\n            removeClass1 = GridType.Fit;\n            removeClass2 = GridType.ScrollVertical;\n            removeClass3 = GridType.ScrollHorizontal;\n        }\n        else if (this.gridster.$options.gridType === GridType.VerticalFixed) {\n            this.gridster.curRowHeight =\n                this.gridster.$options.fixedRowHeight +\n                    (this.gridster.$options.ignoreMarginInRow\n                        ? 0\n                        : this.gridster.$options.margin);\n            addClass = GridType.ScrollVertical;\n            removeClass1 = GridType.Fit;\n            removeClass2 = GridType.ScrollHorizontal;\n            removeClass3 = GridType.Fixed;\n        }\n        else if (this.gridster.$options.gridType === GridType.HorizontalFixed) {\n            this.gridster.curColWidth =\n                this.gridster.$options.fixedColWidth +\n                    (this.gridster.$options.ignoreMarginInRow\n                        ? 0\n                        : this.gridster.$options.margin);\n            addClass = GridType.ScrollHorizontal;\n            removeClass1 = GridType.Fit;\n            removeClass2 = GridType.ScrollVertical;\n            removeClass3 = GridType.Fixed;\n        }\n        if (this.gridster.mobile ||\n            (this.gridster.$options.setGridSize &&\n                this.gridster.$options.gridType !== GridType.Fit)) {\n            this.gridster.renderer.removeClass(this.gridster.el, addClass);\n        }\n        else {\n            this.gridster.renderer.addClass(this.gridster.el, addClass);\n        }\n        this.gridster.renderer.removeClass(this.gridster.el, removeClass1);\n        this.gridster.renderer.removeClass(this.gridster.el, removeClass2);\n        this.gridster.renderer.removeClass(this.gridster.el, removeClass3);\n    }\n    getGridColumnStyle(i) {\n        // generates the new style\n        const newPos = {\n            left: this.gridster.curColWidth * i,\n            width: this.gridster.curColWidth - this.gridster.$options.margin,\n            height: this.gridster.gridRows.length * this.gridster.curRowHeight -\n                this.gridster.$options.margin,\n            style: {}\n        };\n        newPos.style = {\n            ...this.getLeftPosition(newPos.left),\n            width: newPos.width + 'px',\n            height: newPos.height + 'px'\n        };\n        // use the last cached style if it has same values as the generated one\n        const last = this.lastGridColumnStyles[i];\n        if (last &&\n            last.left === newPos.left &&\n            last.width === newPos.width &&\n            last.height === newPos.height) {\n            return last.style;\n        }\n        // cache and set new style\n        this.lastGridColumnStyles[i] = newPos;\n        return newPos.style;\n    }\n    getGridRowStyle(i) {\n        // generates the new style\n        const newPos = {\n            top: this.gridster.curRowHeight * i,\n            width: this.gridster.gridColumns.length * this.gridster.curColWidth +\n                this.gridster.$options.margin,\n            height: this.gridster.curRowHeight - this.gridster.$options.margin,\n            style: {}\n        };\n        newPos.style = {\n            ...this.getTopPosition(newPos.top),\n            width: newPos.width + 'px',\n            height: newPos.height + 'px'\n        };\n        // use the last cached style if it has same values as the generated one\n        const last = this.lastGridRowStyles[i];\n        if (last &&\n            last.top === newPos.top &&\n            last.width === newPos.width &&\n            last.height === newPos.height) {\n            return last.style;\n        }\n        // cache and set new style\n        this.lastGridRowStyles[i] = newPos;\n        return newPos.style;\n    }\n    getLeftPosition(d) {\n        const dPosition = this.gridster.$options.dirType === DirTypes.RTL ? -d : d;\n        if (this.gridster.$options.useTransformPositioning) {\n            return {\n                transform: 'translateX(' + dPosition + 'px)'\n            };\n        }\n        else {\n            return {\n                left: this.getLeftMargin() + dPosition + 'px'\n            };\n        }\n    }\n    getTopPosition(d) {\n        if (this.gridster.$options.useTransformPositioning) {\n            return {\n                transform: 'translateY(' + d + 'px)'\n            };\n        }\n        else {\n            return {\n                top: this.getTopMargin() + d + 'px'\n            };\n        }\n    }\n    clearCellPosition(renderer, el) {\n        if (this.gridster.$options.useTransformPositioning) {\n            renderer.setStyle(el, 'transform', '');\n        }\n        else {\n            renderer.setStyle(el, 'top', '');\n            renderer.setStyle(el, 'left', '');\n        }\n    }\n    setCellPosition(renderer, el, x, y) {\n        const xPosition = this.gridster.$options.dirType === DirTypes.RTL ? -x : x;\n        if (this.gridster.$options.useTransformPositioning) {\n            const transform = 'translate3d(' + xPosition + 'px, ' + y + 'px, 0)';\n            renderer.setStyle(el, 'transform', transform);\n        }\n        else {\n            renderer.setStyle(el, 'left', this.getLeftMargin() + xPosition + 'px');\n            renderer.setStyle(el, 'top', this.getTopMargin() + y + 'px');\n        }\n    }\n    getLeftMargin() {\n        if (this.gridster.$options.outerMargin) {\n            if (this.gridster.$options.outerMarginLeft !== null) {\n                return this.gridster.$options.outerMarginLeft;\n            }\n            else {\n                return this.gridster.$options.margin;\n            }\n        }\n        else {\n            return 0;\n        }\n    }\n    getTopMargin() {\n        if (this.gridster.$options.outerMargin) {\n            if (this.gridster.$options.outerMarginTop !== null) {\n                return this.gridster.$options.outerMarginTop;\n            }\n            else {\n                return this.gridster.$options.margin;\n            }\n        }\n        else {\n            return 0;\n        }\n    }\n}\n\nclass GridsterPreviewComponent {\n    constructor(el, renderer) {\n        this.renderer = renderer;\n        this.el = el.nativeElement;\n    }\n    ngOnInit() {\n        this.sub = this.previewStyle$.subscribe(options => this.previewStyle(options));\n    }\n    ngOnDestroy() {\n        if (this.sub) {\n            this.sub.unsubscribe();\n        }\n    }\n    previewStyle(item) {\n        if (item) {\n            this.renderer.setStyle(this.el, 'display', 'block');\n            this.gridRenderer.updateItem(this.el, item, this.renderer);\n        }\n        else {\n            this.renderer.setStyle(this.el, 'display', '');\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.3\", ngImport: i0, type: GridsterPreviewComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.3\", type: GridsterPreviewComponent, isStandalone: true, selector: \"gridster-preview\", inputs: { previewStyle$: \"previewStyle$\", gridRenderer: \"gridRenderer\" }, ngImport: i0, template: '', isInline: true, styles: [\"gridster-preview{position:absolute;display:none;background:rgba(0,0,0,.15)}\\n\"], encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.3\", ngImport: i0, type: GridsterPreviewComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'gridster-preview', template: '', encapsulation: ViewEncapsulation.None, standalone: true, styles: [\"gridster-preview{position:absolute;display:none;background:rgba(0,0,0,.15)}\\n\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.Renderer2 }], propDecorators: { previewStyle$: [{\n                type: Input\n            }], gridRenderer: [{\n                type: Input\n            }] } });\n\nclass GridsterComponent {\n    constructor(el, renderer, cdRef, zone) {\n        this.renderer = renderer;\n        this.cdRef = cdRef;\n        this.zone = zone;\n        this.columns = 0;\n        this.rows = 0;\n        this.gridColumns = [];\n        this.gridRows = [];\n        this.previewStyle$ = new EventEmitter();\n        this.calculateLayout$ = new Subject();\n        this.resize$ = new Subject();\n        this.destroy$ = new Subject();\n        this.optionsChanged = () => {\n            this.setOptions();\n            let widgetsIndex = this.grid.length - 1;\n            let widget;\n            for (; widgetsIndex >= 0; widgetsIndex--) {\n                widget = this.grid[widgetsIndex];\n                widget.updateOptions();\n            }\n            this.calculateLayout();\n        };\n        this.onResize = () => {\n            if (this.el.clientWidth) {\n                if (this.options.setGridSize) {\n                    // reset width/height so the size is recalculated afterwards\n                    this.renderer.setStyle(this.el, 'width', '');\n                    this.renderer.setStyle(this.el, 'height', '');\n                }\n                this.setGridSize();\n                this.calculateLayout();\n            }\n        };\n        this.getNextPossiblePosition = (newItem, startingFrom = {}) => {\n            if (newItem.cols === -1) {\n                newItem.cols = this.$options.defaultItemCols;\n            }\n            if (newItem.rows === -1) {\n                newItem.rows = this.$options.defaultItemRows;\n            }\n            this.setGridDimensions();\n            let rowsIndex = startingFrom.y || 0;\n            let colsIndex;\n            for (; rowsIndex < this.rows; rowsIndex++) {\n                newItem.y = rowsIndex;\n                colsIndex = startingFrom.x || 0;\n                for (; colsIndex < this.columns; colsIndex++) {\n                    newItem.x = colsIndex;\n                    if (!this.checkCollision(newItem)) {\n                        return true;\n                    }\n                }\n            }\n            const canAddToRows = this.$options.maxRows >= this.rows + newItem.rows;\n            const canAddToColumns = this.$options.maxCols >= this.columns + newItem.cols;\n            const addToRows = this.rows <= this.columns && canAddToRows;\n            if (!addToRows && canAddToColumns) {\n                newItem.x = this.columns;\n                newItem.y = 0;\n                return true;\n            }\n            else if (canAddToRows) {\n                newItem.y = this.rows;\n                newItem.x = 0;\n                return true;\n            }\n            return false;\n        };\n        this.getFirstPossiblePosition = (item) => {\n            const tmpItem = Object.assign({}, item);\n            this.getNextPossiblePosition(tmpItem);\n            return tmpItem;\n        };\n        this.getLastPossiblePosition = (item) => {\n            let farthestItem = { y: 0, x: 0 };\n            farthestItem = this.grid.reduce((prev, curr) => {\n                const currCoords = {\n                    y: curr.$item.y + curr.$item.rows - 1,\n                    x: curr.$item.x + curr.$item.cols - 1\n                };\n                if (GridsterUtils.compareItems(prev, currCoords) === 1) {\n                    return currCoords;\n                }\n                else {\n                    return prev;\n                }\n            }, farthestItem);\n            const tmpItem = Object.assign({}, item);\n            this.getNextPossiblePosition(tmpItem, farthestItem);\n            return tmpItem;\n        };\n        this.el = el.nativeElement;\n        this.$options = JSON.parse(JSON.stringify(GridsterConfigService));\n        this.mobile = false;\n        this.curWidth = 0;\n        this.curHeight = 0;\n        this.grid = [];\n        this.curColWidth = 0;\n        this.curRowHeight = 0;\n        this.dragInProgress = false;\n        this.emptyCell = new GridsterEmptyCell(this);\n        this.compact = new GridsterCompact(this);\n        this.gridRenderer = new GridsterRenderer(this);\n    }\n    // ------ Function for swapWhileDragging option\n    // identical to checkCollision() except that here we add boundaries.\n    static checkCollisionTwoItemsForSwaping(item, item2) {\n        // if the cols or rows of the items are 1 , doesnt make any sense to set a boundary. Only if the item is bigger we set a boundary\n        const horizontalBoundaryItem1 = item.cols === 1 ? 0 : 1;\n        const horizontalBoundaryItem2 = item2.cols === 1 ? 0 : 1;\n        const verticalBoundaryItem1 = item.rows === 1 ? 0 : 1;\n        const verticalBoundaryItem2 = item2.rows === 1 ? 0 : 1;\n        return (item.x + horizontalBoundaryItem1 < item2.x + item2.cols &&\n            item.x + item.cols > item2.x + horizontalBoundaryItem2 &&\n            item.y + verticalBoundaryItem1 < item2.y + item2.rows &&\n            item.y + item.rows > item2.y + verticalBoundaryItem2);\n    }\n    checkCollisionTwoItems(item, item2) {\n        const collision = item.x < item2.x + item2.cols &&\n            item.x + item.cols > item2.x &&\n            item.y < item2.y + item2.rows &&\n            item.y + item.rows > item2.y;\n        if (!collision) {\n            return false;\n        }\n        if (!this.$options.allowMultiLayer) {\n            return true;\n        }\n        const defaultLayerIndex = this.$options.defaultLayerIndex;\n        const layerIndex = item.layerIndex === undefined ? defaultLayerIndex : item.layerIndex;\n        const layerIndex2 = item2.layerIndex === undefined ? defaultLayerIndex : item2.layerIndex;\n        return layerIndex === layerIndex2;\n    }\n    ngOnInit() {\n        if (this.options.initCallback) {\n            this.options.initCallback(this);\n        }\n        this.calculateLayout$\n            .pipe(debounceTime(0), takeUntil(this.destroy$))\n            .subscribe(() => this.calculateLayout());\n        this.resize$\n            .pipe(\n        // Cancel previously scheduled DOM timer if `calculateLayout()` has been called\n        // within this time range.\n        switchMap(() => timer(100)), takeUntil(this.destroy$))\n            .subscribe(() => this.resize());\n    }\n    ngOnChanges(changes) {\n        if (changes.options) {\n            this.setOptions();\n            this.options.api = {\n                optionsChanged: this.optionsChanged,\n                resize: this.onResize,\n                getNextPossiblePosition: this.getNextPossiblePosition,\n                getFirstPossiblePosition: this.getFirstPossiblePosition,\n                getLastPossiblePosition: this.getLastPossiblePosition,\n                getItemComponent: (item) => this.getItemComponent(item)\n            };\n            this.columns = this.$options.minCols;\n            this.rows = this.$options.minRows + this.$options.addEmptyRowsCount;\n            this.setGridSize();\n            this.calculateLayout();\n        }\n    }\n    resize() {\n        let height;\n        let width;\n        if (this.$options.gridType === 'fit' && !this.mobile) {\n            width = this.el.offsetWidth;\n            height = this.el.offsetHeight;\n        }\n        else {\n            width = this.el.clientWidth;\n            height = this.el.clientHeight;\n        }\n        if ((width !== this.curWidth || height !== this.curHeight) &&\n            this.checkIfToResize()) {\n            this.onResize();\n        }\n    }\n    setOptions() {\n        this.$options = GridsterUtils.merge(this.$options, this.options, this.$options);\n        if (!this.$options.disableWindowResize && !this.windowResize) {\n            this.windowResize = this.renderer.listen('window', 'resize', this.onResize);\n        }\n        else if (this.$options.disableWindowResize && this.windowResize) {\n            this.windowResize();\n            this.windowResize = null;\n        }\n        this.emptyCell.updateOptions();\n    }\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.previewStyle$.complete();\n        if (this.windowResize) {\n            this.windowResize();\n        }\n        if (this.options && this.options.destroyCallback) {\n            this.options.destroyCallback(this);\n        }\n        if (this.options && this.options.api) {\n            this.options.api.resize = undefined;\n            this.options.api.optionsChanged = undefined;\n            this.options.api.getNextPossiblePosition = undefined;\n            this.options.api = undefined;\n        }\n        this.emptyCell.destroy();\n        this.emptyCell = null;\n        this.compact.destroy();\n        this.compact = null;\n    }\n    checkIfToResize() {\n        const clientWidth = this.el.clientWidth;\n        const offsetWidth = this.el.offsetWidth;\n        const scrollWidth = this.el.scrollWidth;\n        const clientHeight = this.el.clientHeight;\n        const offsetHeight = this.el.offsetHeight;\n        const scrollHeight = this.el.scrollHeight;\n        const verticalScrollPresent = clientWidth < offsetWidth &&\n            scrollHeight > offsetHeight &&\n            scrollHeight - offsetHeight < offsetWidth - clientWidth;\n        const horizontalScrollPresent = clientHeight < offsetHeight &&\n            scrollWidth > offsetWidth &&\n            scrollWidth - offsetWidth < offsetHeight - clientHeight;\n        if (verticalScrollPresent) {\n            return false;\n        }\n        return !horizontalScrollPresent;\n    }\n    checkIfMobile() {\n        if (this.$options.useBodyForBreakpoint) {\n            return this.$options.mobileBreakpoint > document.body.clientWidth;\n        }\n        else {\n            return this.$options.mobileBreakpoint > this.curWidth;\n        }\n    }\n    setGridSize() {\n        const el = this.el;\n        let width;\n        let height;\n        if (this.$options.setGridSize ||\n            (this.$options.gridType === GridType.Fit && !this.mobile)) {\n            width = el.offsetWidth;\n            height = el.offsetHeight;\n        }\n        else {\n            width = el.clientWidth;\n            height = el.clientHeight;\n        }\n        this.curWidth = width;\n        this.curHeight = height;\n    }\n    setGridDimensions() {\n        this.setGridSize();\n        if (!this.mobile && this.checkIfMobile()) {\n            this.mobile = !this.mobile;\n            this.renderer.addClass(this.el, 'mobile');\n        }\n        else if (this.mobile && !this.checkIfMobile()) {\n            this.mobile = !this.mobile;\n            this.renderer.removeClass(this.el, 'mobile');\n        }\n        let rows = this.$options.minRows;\n        let columns = this.$options.minCols;\n        let widgetsIndex = this.grid.length - 1;\n        let widget;\n        for (; widgetsIndex >= 0; widgetsIndex--) {\n            widget = this.grid[widgetsIndex];\n            if (!widget.notPlaced) {\n                rows = Math.max(rows, widget.$item.y + widget.$item.rows);\n                columns = Math.max(columns, widget.$item.x + widget.$item.cols);\n            }\n        }\n        rows += this.$options.addEmptyRowsCount;\n        if (this.columns !== columns || this.rows !== rows) {\n            this.columns = columns;\n            this.rows = rows;\n            if (this.options.gridSizeChangedCallback) {\n                this.options.gridSizeChangedCallback(this);\n            }\n        }\n    }\n    calculateLayout() {\n        if (this.compact) {\n            this.compact.checkCompact();\n        }\n        this.setGridDimensions();\n        if (this.$options.outerMargin) {\n            let marginWidth = -this.$options.margin;\n            if (this.$options.outerMarginLeft !== null) {\n                marginWidth += this.$options.outerMarginLeft;\n                this.renderer.setStyle(this.el, 'padding-left', this.$options.outerMarginLeft + 'px');\n            }\n            else {\n                marginWidth += this.$options.margin;\n                this.renderer.setStyle(this.el, 'padding-left', this.$options.margin + 'px');\n            }\n            if (this.$options.outerMarginRight !== null) {\n                marginWidth += this.$options.outerMarginRight;\n                this.renderer.setStyle(this.el, 'padding-right', this.$options.outerMarginRight + 'px');\n            }\n            else {\n                marginWidth += this.$options.margin;\n                this.renderer.setStyle(this.el, 'padding-right', this.$options.margin + 'px');\n            }\n            this.curColWidth = (this.curWidth - marginWidth) / this.columns;\n            let marginHeight = -this.$options.margin;\n            if (this.$options.outerMarginTop !== null) {\n                marginHeight += this.$options.outerMarginTop;\n                this.renderer.setStyle(this.el, 'padding-top', this.$options.outerMarginTop + 'px');\n            }\n            else {\n                marginHeight += this.$options.margin;\n                this.renderer.setStyle(this.el, 'padding-top', this.$options.margin + 'px');\n            }\n            if (this.$options.outerMarginBottom !== null) {\n                marginHeight += this.$options.outerMarginBottom;\n                this.renderer.setStyle(this.el, 'padding-bottom', this.$options.outerMarginBottom + 'px');\n            }\n            else {\n                marginHeight += this.$options.margin;\n                this.renderer.setStyle(this.el, 'padding-bottom', this.$options.margin + 'px');\n            }\n            this.curRowHeight =\n                ((this.curHeight - marginHeight) / this.rows) *\n                    this.$options.rowHeightRatio;\n        }\n        else {\n            this.curColWidth = (this.curWidth + this.$options.margin) / this.columns;\n            this.curRowHeight =\n                ((this.curHeight + this.$options.margin) / this.rows) *\n                    this.$options.rowHeightRatio;\n            this.renderer.setStyle(this.el, 'padding-left', 0 + 'px');\n            this.renderer.setStyle(this.el, 'padding-right', 0 + 'px');\n            this.renderer.setStyle(this.el, 'padding-top', 0 + 'px');\n            this.renderer.setStyle(this.el, 'padding-bottom', 0 + 'px');\n        }\n        this.gridRenderer.updateGridster();\n        if (this.$options.setGridSize) {\n            this.renderer.addClass(this.el, 'gridSize');\n            if (!this.mobile) {\n                this.renderer.setStyle(this.el, 'width', this.columns * this.curColWidth + this.$options.margin + 'px');\n                this.renderer.setStyle(this.el, 'height', this.rows * this.curRowHeight + this.$options.margin + 'px');\n            }\n        }\n        else {\n            this.renderer.removeClass(this.el, 'gridSize');\n            this.renderer.setStyle(this.el, 'width', '');\n            this.renderer.setStyle(this.el, 'height', '');\n        }\n        this.updateGrid();\n        let widgetsIndex = this.grid.length - 1;\n        let widget;\n        for (; widgetsIndex >= 0; widgetsIndex--) {\n            widget = this.grid[widgetsIndex];\n            widget.setSize();\n            widget.drag.toggle();\n            widget.resize.toggle();\n        }\n        this.resize$.next();\n    }\n    updateGrid() {\n        if (this.$options.displayGrid === 'always' && !this.mobile) {\n            this.renderer.addClass(this.el, 'display-grid');\n        }\n        else if (this.$options.displayGrid === 'onDrag&Resize' &&\n            this.dragInProgress) {\n            this.renderer.addClass(this.el, 'display-grid');\n        }\n        else if (this.$options.displayGrid === 'none' ||\n            !this.dragInProgress ||\n            this.mobile) {\n            this.renderer.removeClass(this.el, 'display-grid');\n        }\n        this.setGridDimensions();\n        this.gridColumns.length = GridsterComponent.getNewArrayLength(this.columns, this.curWidth, this.curColWidth);\n        this.gridRows.length = GridsterComponent.getNewArrayLength(this.rows, this.curHeight, this.curRowHeight);\n        this.cdRef.markForCheck();\n    }\n    addItem(itemComponent) {\n        if (itemComponent.$item.cols === undefined) {\n            itemComponent.$item.cols = this.$options.defaultItemCols;\n            itemComponent.item.cols = itemComponent.$item.cols;\n            itemComponent.itemChanged();\n        }\n        if (itemComponent.$item.rows === undefined) {\n            itemComponent.$item.rows = this.$options.defaultItemRows;\n            itemComponent.item.rows = itemComponent.$item.rows;\n            itemComponent.itemChanged();\n        }\n        if (itemComponent.$item.x === -1 || itemComponent.$item.y === -1) {\n            this.autoPositionItem(itemComponent);\n        }\n        else if (this.checkCollision(itemComponent.$item)) {\n            if (!this.$options.disableWarnings) {\n                itemComponent.notPlaced = true;\n                console.warn(\"Can't be placed in the bounds of the dashboard, trying to auto position!/n\" +\n                    JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n            }\n            if (!this.$options.disableAutoPositionOnConflict) {\n                this.autoPositionItem(itemComponent);\n            }\n            else {\n                itemComponent.notPlaced = true;\n            }\n        }\n        this.grid.push(itemComponent);\n        this.calculateLayout$.next();\n    }\n    removeItem(itemComponent) {\n        this.grid.splice(this.grid.indexOf(itemComponent), 1);\n        this.calculateLayout$.next();\n        if (this.options.itemRemovedCallback) {\n            this.options.itemRemovedCallback(itemComponent.item, itemComponent);\n        }\n    }\n    checkCollision(item) {\n        let collision = false;\n        if (this.options.itemValidateCallback) {\n            collision = !this.options.itemValidateCallback(item);\n        }\n        if (!collision && this.checkGridCollision(item)) {\n            collision = true;\n        }\n        if (!collision) {\n            const c = this.findItemWithItem(item);\n            if (c) {\n                collision = c;\n            }\n        }\n        return collision;\n    }\n    checkGridCollision(item) {\n        const noNegativePosition = item.y > -1 && item.x > -1;\n        const maxGridCols = item.cols + item.x <= this.$options.maxCols;\n        const maxGridRows = item.rows + item.y <= this.$options.maxRows;\n        const maxItemCols = item.maxItemCols === undefined\n            ? this.$options.maxItemCols\n            : item.maxItemCols;\n        const minItemCols = item.minItemCols === undefined\n            ? this.$options.minItemCols\n            : item.minItemCols;\n        const maxItemRows = item.maxItemRows === undefined\n            ? this.$options.maxItemRows\n            : item.maxItemRows;\n        const minItemRows = item.minItemRows === undefined\n            ? this.$options.minItemRows\n            : item.minItemRows;\n        const inColsLimits = item.cols <= maxItemCols && item.cols >= minItemCols;\n        const inRowsLimits = item.rows <= maxItemRows && item.rows >= minItemRows;\n        const minAreaLimit = item.minItemArea === undefined\n            ? this.$options.minItemArea\n            : item.minItemArea;\n        const maxAreaLimit = item.maxItemArea === undefined\n            ? this.$options.maxItemArea\n            : item.maxItemArea;\n        const area = item.cols * item.rows;\n        const inMinArea = minAreaLimit <= area;\n        const inMaxArea = maxAreaLimit >= area;\n        return !(noNegativePosition &&\n            maxGridCols &&\n            maxGridRows &&\n            inColsLimits &&\n            inRowsLimits &&\n            inMinArea &&\n            inMaxArea);\n    }\n    findItemWithItem(item) {\n        let widgetsIndex = 0;\n        let widget;\n        for (; widgetsIndex < this.grid.length; widgetsIndex++) {\n            widget = this.grid[widgetsIndex];\n            if (widget.$item !== item &&\n                this.checkCollisionTwoItems(widget.$item, item)) {\n                return widget;\n            }\n        }\n        return false;\n    }\n    findItemsWithItem(item) {\n        const a = [];\n        let widgetsIndex = 0;\n        let widget;\n        for (; widgetsIndex < this.grid.length; widgetsIndex++) {\n            widget = this.grid[widgetsIndex];\n            if (widget.$item !== item &&\n                this.checkCollisionTwoItems(widget.$item, item)) {\n                a.push(widget);\n            }\n        }\n        return a;\n    }\n    autoPositionItem(itemComponent) {\n        if (this.getNextPossiblePosition(itemComponent.$item)) {\n            itemComponent.notPlaced = false;\n            itemComponent.item.x = itemComponent.$item.x;\n            itemComponent.item.y = itemComponent.$item.y;\n            itemComponent.itemChanged();\n        }\n        else {\n            itemComponent.notPlaced = true;\n            if (!this.$options.disableWarnings) {\n                console.warn(\"Can't be placed in the bounds of the dashboard!/n\" +\n                    JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n            }\n        }\n    }\n    pixelsToPositionX(x, roundingMethod, noLimit) {\n        const position = roundingMethod(x / this.curColWidth);\n        if (noLimit) {\n            return position;\n        }\n        else {\n            return Math.max(position, 0);\n        }\n    }\n    pixelsToPositionY(y, roundingMethod, noLimit) {\n        const position = roundingMethod(y / this.curRowHeight);\n        if (noLimit) {\n            return position;\n        }\n        else {\n            return Math.max(position, 0);\n        }\n    }\n    positionXToPixels(x) {\n        return x * this.curColWidth;\n    }\n    positionYToPixels(y) {\n        return y * this.curRowHeight;\n    }\n    getItemComponent(item) {\n        return this.grid.find(c => c.item === item);\n    }\n    // ------ Functions for swapWhileDragging option\n    // identical to checkCollision() except that this function calls findItemWithItemForSwaping() instead of findItemWithItem()\n    checkCollisionForSwaping(item) {\n        let collision = false;\n        if (this.options.itemValidateCallback) {\n            collision = !this.options.itemValidateCallback(item);\n        }\n        if (!collision && this.checkGridCollision(item)) {\n            collision = true;\n        }\n        if (!collision) {\n            const c = this.findItemWithItemForSwapping(item);\n            if (c) {\n                collision = c;\n            }\n        }\n        return collision;\n    }\n    // identical to findItemWithItem() except that this function calls checkCollisionTwoItemsForSwaping() instead of checkCollisionTwoItems()\n    findItemWithItemForSwapping(item) {\n        let widgetsIndex = this.grid.length - 1;\n        let widget;\n        for (; widgetsIndex > -1; widgetsIndex--) {\n            widget = this.grid[widgetsIndex];\n            if (widget.$item !== item &&\n                GridsterComponent.checkCollisionTwoItemsForSwaping(widget.$item, item)) {\n                return widget;\n            }\n        }\n        return false;\n    }\n    previewStyle(drag = false) {\n        if (this.movingItem) {\n            if (this.compact && drag) {\n                this.compact.checkCompactItem(this.movingItem);\n            }\n            this.previewStyle$.next(this.movingItem);\n        }\n        else {\n            this.previewStyle$.next(null);\n        }\n    }\n    // ------ End of functions for swapWhileDragging option\n    // eslint-disable-next-line @typescript-eslint/member-ordering\n    static getNewArrayLength(length, overallSize, size) {\n        const newLength = Math.max(length, Math.floor(overallSize / size));\n        if (newLength < 0) {\n            return 0;\n        }\n        if (Number.isFinite(newLength)) {\n            return Math.floor(newLength);\n        }\n        return 0;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.3\", ngImport: i0, type: GridsterComponent, deps: [{ token: ElementRef }, { token: Renderer2 }, { token: ChangeDetectorRef }, { token: NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.3\", type: GridsterComponent, isStandalone: true, selector: \"gridster\", inputs: { options: \"options\" }, usesOnChanges: true, ngImport: i0, template: \"<div\\n  class=\\\"gridster-column\\\"\\n  *ngFor=\\\"let column of gridColumns; let i = index;\\\"\\n  [ngStyle]=\\\"gridRenderer.getGridColumnStyle(i)\\\"\\n></div>\\n<div\\n  class=\\\"gridster-row\\\"\\n  *ngFor=\\\"let row of gridRows; let i = index;\\\"\\n  [ngStyle]=\\\"gridRenderer.getGridRowStyle(i)\\\"\\n></div>\\n<ng-content></ng-content>\\n<gridster-preview\\n  [gridRenderer]=\\\"gridRenderer\\\"\\n  [previewStyle$]=\\\"previewStyle$\\\"\\n  class=\\\"gridster-preview\\\"\\n></gridster-preview>\\n\", styles: [\"gridster{position:relative;box-sizing:border-box;background:grey;width:100%;height:100%;-webkit-user-select:none;user-select:none;display:block}gridster.fit{overflow-x:hidden;overflow-y:hidden}gridster.scrollVertical{overflow-x:hidden;overflow-y:auto}gridster.scrollHorizontal{overflow-x:auto;overflow-y:hidden}gridster.fixed{overflow:auto}gridster.mobile{overflow-x:hidden;overflow-y:auto}gridster.mobile gridster-item{position:relative}gridster.gridSize{height:initial;width:initial}gridster.gridSize.fit{height:100%;width:100%}gridster .gridster-column,gridster .gridster-row{position:absolute;display:none;transition:.3s;box-sizing:border-box}gridster.display-grid .gridster-column,gridster.display-grid .gridster-row{display:block}gridster .gridster-column{border-left:1px solid white;border-right:1px solid white}gridster .gridster-row{border-top:1px solid white;border-bottom:1px solid white}\\n\"], dependencies: [{ kind: \"directive\", type: NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { kind: \"component\", type: GridsterPreviewComponent, selector: \"gridster-preview\", inputs: [\"previewStyle$\", \"gridRenderer\"] }], encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.3\", ngImport: i0, type: GridsterComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'gridster', encapsulation: ViewEncapsulation.None, standalone: true, imports: [NgForOf, NgStyle, GridsterPreviewComponent], template: \"<div\\n  class=\\\"gridster-column\\\"\\n  *ngFor=\\\"let column of gridColumns; let i = index;\\\"\\n  [ngStyle]=\\\"gridRenderer.getGridColumnStyle(i)\\\"\\n></div>\\n<div\\n  class=\\\"gridster-row\\\"\\n  *ngFor=\\\"let row of gridRows; let i = index;\\\"\\n  [ngStyle]=\\\"gridRenderer.getGridRowStyle(i)\\\"\\n></div>\\n<ng-content></ng-content>\\n<gridster-preview\\n  [gridRenderer]=\\\"gridRenderer\\\"\\n  [previewStyle$]=\\\"previewStyle$\\\"\\n  class=\\\"gridster-preview\\\"\\n></gridster-preview>\\n\", styles: [\"gridster{position:relative;box-sizing:border-box;background:grey;width:100%;height:100%;-webkit-user-select:none;user-select:none;display:block}gridster.fit{overflow-x:hidden;overflow-y:hidden}gridster.scrollVertical{overflow-x:hidden;overflow-y:auto}gridster.scrollHorizontal{overflow-x:auto;overflow-y:hidden}gridster.fixed{overflow:auto}gridster.mobile{overflow-x:hidden;overflow-y:auto}gridster.mobile gridster-item{position:relative}gridster.gridSize{height:initial;width:initial}gridster.gridSize.fit{height:100%;width:100%}gridster .gridster-column,gridster .gridster-row{position:absolute;display:none;transition:.3s;box-sizing:border-box}gridster.display-grid .gridster-column,gridster.display-grid .gridster-row{display:block}gridster .gridster-column{border-left:1px solid white;border-right:1px solid white}gridster .gridster-row{border-top:1px solid white;border-bottom:1px solid white}\\n\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef, decorators: [{\n                    type: Inject,\n                    args: [ElementRef]\n                }] }, { type: i0.Renderer2, decorators: [{\n                    type: Inject,\n                    args: [Renderer2]\n                }] }, { type: i0.ChangeDetectorRef, decorators: [{\n                    type: Inject,\n                    args: [ChangeDetectorRef]\n                }] }, { type: i0.NgZone, decorators: [{\n                    type: Inject,\n                    args: [NgZone]\n                }] }], propDecorators: { options: [{\n                type: Input\n            }] } });\n\nclass GridsterPush {\n    constructor(gridsterItem) {\n        this.iteration = 0;\n        this.pushedItems = [];\n        this.pushedItemsTemp = [];\n        this.pushedItemsTempPath = [];\n        this.pushedItemsPath = [];\n        this.gridsterItem = gridsterItem;\n        this.gridster = gridsterItem.gridster;\n        this.tryPattern = {\n            fromEast: [this.tryWest, this.trySouth, this.tryNorth, this.tryEast],\n            fromWest: [this.tryEast, this.trySouth, this.tryNorth, this.tryWest],\n            fromNorth: [this.trySouth, this.tryEast, this.tryWest, this.tryNorth],\n            fromSouth: [this.tryNorth, this.tryEast, this.tryWest, this.trySouth]\n        };\n        this.fromSouth = 'fromSouth';\n        this.fromNorth = 'fromNorth';\n        this.fromEast = 'fromEast';\n        this.fromWest = 'fromWest';\n    }\n    destroy() {\n        this.gridster = this.gridsterItem = null;\n    }\n    pushItems(direction, disable) {\n        if (this.gridster.$options.pushItems && !disable) {\n            this.pushedItemsOrder = [];\n            this.iteration = 0;\n            const pushed = this.push(this.gridsterItem, direction);\n            if (!pushed) {\n                this.restoreTempItems();\n            }\n            this.pushedItemsOrder = [];\n            this.pushedItemsTemp = [];\n            this.pushedItemsTempPath = [];\n            return pushed;\n        }\n        else {\n            return false;\n        }\n    }\n    restoreTempItems() {\n        let i = this.pushedItemsTemp.length - 1;\n        for (; i > -1; i--) {\n            this.removeFromTempPushed(this.pushedItemsTemp[i]);\n        }\n    }\n    restoreItems() {\n        let i = 0;\n        const l = this.pushedItems.length;\n        let pushedItem;\n        for (; i < l; i++) {\n            pushedItem = this.pushedItems[i];\n            pushedItem.$item.x = pushedItem.item.x || 0;\n            pushedItem.$item.y = pushedItem.item.y || 0;\n            pushedItem.setSize();\n        }\n        this.pushedItems = [];\n        this.pushedItemsPath = [];\n    }\n    setPushedItems() {\n        let i = 0;\n        const l = this.pushedItems.length;\n        let pushedItem;\n        for (; i < l; i++) {\n            pushedItem = this.pushedItems[i];\n            pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n        }\n        this.pushedItems = [];\n        this.pushedItemsPath = [];\n    }\n    checkPushBack() {\n        let i = this.pushedItems.length - 1;\n        let change = false;\n        for (; i > -1; i--) {\n            if (this.checkPushedItem(this.pushedItems[i], i)) {\n                change = true;\n            }\n        }\n        if (change) {\n            this.checkPushBack();\n        }\n    }\n    push(gridsterItem, direction) {\n        if (this.iteration > 100) {\n            console.warn('max iteration reached');\n            return false;\n        }\n        if (this.gridster.checkGridCollision(gridsterItem.$item)) {\n            return false;\n        }\n        if (direction === '') {\n            return false;\n        }\n        const conflicts = this.gridster.findItemsWithItem(gridsterItem.$item);\n        const invert = direction === this.fromNorth || direction === this.fromWest;\n        // sort the list of conflicts in order of [y,x]. Invert when the push is from north and west\n        // this is done so they don't conflict witch each other and revert positions, keeping the previous order\n        conflicts.sort((a, b) => {\n            if (invert) {\n                return b.$item.y - a.$item.y || b.$item.x - a.$item.x;\n            }\n            else {\n                return a.$item.y - b.$item.y || a.$item.x - b.$item.x;\n            }\n        });\n        let i = 0;\n        let itemCollision;\n        let makePush = true;\n        const pushedItems = [];\n        for (; i < conflicts.length; i++) {\n            itemCollision = conflicts[i];\n            if (itemCollision === this.gridsterItem) {\n                continue;\n            }\n            if (!itemCollision.canBeDragged()) {\n                makePush = false;\n                break;\n            }\n            const p = this.pushedItemsTemp.indexOf(itemCollision);\n            if (p > -1 && this.pushedItemsTempPath[p].length > 10) {\n                // stop if item is pushed more than 10 times to break infinite loops\n                makePush = false;\n                break;\n            }\n            if (this.tryPattern[direction][0].call(this, itemCollision, gridsterItem)) {\n                this.pushedItemsOrder.push(itemCollision);\n                pushedItems.push(itemCollision);\n            }\n            else if (this.tryPattern[direction][1].call(this, itemCollision, gridsterItem)) {\n                this.pushedItemsOrder.push(itemCollision);\n                pushedItems.push(itemCollision);\n            }\n            else if (this.tryPattern[direction][2].call(this, itemCollision, gridsterItem)) {\n                this.pushedItemsOrder.push(itemCollision);\n                pushedItems.push(itemCollision);\n            }\n            else if (this.tryPattern[direction][3].call(this, itemCollision, gridsterItem)) {\n                this.pushedItemsOrder.push(itemCollision);\n                pushedItems.push(itemCollision);\n            }\n            else {\n                makePush = false;\n                break;\n            }\n        }\n        if (!makePush) {\n            i = this.pushedItemsOrder.lastIndexOf(pushedItems[0]);\n            if (i > -1) {\n                let j = this.pushedItemsOrder.length - 1;\n                for (; j >= i; j--) {\n                    itemCollision = this.pushedItemsOrder[j];\n                    this.pushedItemsOrder.pop();\n                    this.removeFromTempPushed(itemCollision);\n                    this.removeFromPushedItem(itemCollision);\n                }\n            }\n        }\n        this.iteration++;\n        return makePush;\n    }\n    trySouth(gridsterItemCollide, gridsterItem) {\n        if (!this.gridster.$options.pushDirections.south) {\n            return false;\n        }\n        this.addToTempPushed(gridsterItemCollide);\n        gridsterItemCollide.$item.y =\n            gridsterItem.$item.y + gridsterItem.$item.rows;\n        if (this.push(gridsterItemCollide, this.fromNorth)) {\n            gridsterItemCollide.setSize();\n            this.addToPushed(gridsterItemCollide);\n            return true;\n        }\n        else {\n            this.removeFromTempPushed(gridsterItemCollide);\n        }\n        return false;\n    }\n    tryNorth(gridsterItemCollide, gridsterItem) {\n        if (!this.gridster.$options.pushDirections.north) {\n            return false;\n        }\n        this.addToTempPushed(gridsterItemCollide);\n        gridsterItemCollide.$item.y =\n            gridsterItem.$item.y - gridsterItemCollide.$item.rows;\n        if (this.push(gridsterItemCollide, this.fromSouth)) {\n            gridsterItemCollide.setSize();\n            this.addToPushed(gridsterItemCollide);\n            return true;\n        }\n        else {\n            this.removeFromTempPushed(gridsterItemCollide);\n        }\n        return false;\n    }\n    tryEast(gridsterItemCollide, gridsterItem) {\n        if (!this.gridster.$options.pushDirections.east) {\n            return false;\n        }\n        this.addToTempPushed(gridsterItemCollide);\n        gridsterItemCollide.$item.x =\n            gridsterItem.$item.x + gridsterItem.$item.cols;\n        if (this.push(gridsterItemCollide, this.fromWest)) {\n            gridsterItemCollide.setSize();\n            this.addToPushed(gridsterItemCollide);\n            return true;\n        }\n        else {\n            this.removeFromTempPushed(gridsterItemCollide);\n        }\n        return false;\n    }\n    tryWest(gridsterItemCollide, gridsterItem) {\n        if (!this.gridster.$options.pushDirections.west) {\n            return false;\n        }\n        this.addToTempPushed(gridsterItemCollide);\n        gridsterItemCollide.$item.x =\n            gridsterItem.$item.x - gridsterItemCollide.$item.cols;\n        if (this.push(gridsterItemCollide, this.fromEast)) {\n            gridsterItemCollide.setSize();\n            this.addToPushed(gridsterItemCollide);\n            return true;\n        }\n        else {\n            this.removeFromTempPushed(gridsterItemCollide);\n        }\n        return false;\n    }\n    addToTempPushed(gridsterItem) {\n        let i = this.pushedItemsTemp.indexOf(gridsterItem);\n        if (i === -1) {\n            i = this.pushedItemsTemp.push(gridsterItem) - 1;\n            this.pushedItemsTempPath[i] = [];\n        }\n        this.pushedItemsTempPath[i].push({\n            x: gridsterItem.$item.x,\n            y: gridsterItem.$item.y\n        });\n    }\n    removeFromTempPushed(gridsterItem) {\n        const i = this.pushedItemsTemp.indexOf(gridsterItem);\n        const tempPosition = this.pushedItemsTempPath[i].pop();\n        if (!tempPosition) {\n            return;\n        }\n        gridsterItem.$item.x = tempPosition.x;\n        gridsterItem.$item.y = tempPosition.y;\n        gridsterItem.setSize();\n        if (!this.pushedItemsTempPath[i].length) {\n            this.pushedItemsTemp.splice(i, 1);\n            this.pushedItemsTempPath.splice(i, 1);\n        }\n    }\n    addToPushed(gridsterItem) {\n        if (this.pushedItems.indexOf(gridsterItem) < 0) {\n            this.pushedItems.push(gridsterItem);\n            this.pushedItemsPath.push([\n                { x: gridsterItem.item.x || 0, y: gridsterItem.item.y || 0 },\n                { x: gridsterItem.$item.x, y: gridsterItem.$item.y }\n            ]);\n        }\n        else {\n            const i = this.pushedItems.indexOf(gridsterItem);\n            this.pushedItemsPath[i].push({\n                x: gridsterItem.$item.x,\n                y: gridsterItem.$item.y\n            });\n        }\n    }\n    removeFromPushed(i) {\n        if (i > -1) {\n            this.pushedItems.splice(i, 1);\n            this.pushedItemsPath.splice(i, 1);\n        }\n    }\n    removeFromPushedItem(gridsterItem) {\n        const i = this.pushedItems.indexOf(gridsterItem);\n        if (i > -1) {\n            this.pushedItemsPath[i].pop();\n            if (!this.pushedItemsPath.length) {\n                this.pushedItems.splice(i, 1);\n                this.pushedItemsPath.splice(i, 1);\n            }\n        }\n    }\n    checkPushedItem(pushedItem, i) {\n        const path = this.pushedItemsPath[i];\n        let j = path.length - 2;\n        let lastPosition;\n        let x;\n        let y;\n        let change = false;\n        for (; j > -1; j--) {\n            lastPosition = path[j];\n            x = pushedItem.$item.x;\n            y = pushedItem.$item.y;\n            pushedItem.$item.x = lastPosition.x;\n            pushedItem.$item.y = lastPosition.y;\n            if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n                pushedItem.setSize();\n                path.splice(j + 1, path.length - j - 1);\n                change = true;\n            }\n            else {\n                pushedItem.$item.x = x;\n                pushedItem.$item.y = y;\n            }\n        }\n        if (path.length < 2) {\n            this.removeFromPushed(i);\n        }\n        return change;\n    }\n}\n\nlet scrollSensitivity;\nlet scrollSpeed;\nconst intervalDuration = 50;\nlet gridsterElement;\nlet resizeEvent;\nlet resizeEventType;\nlet intervalE;\nlet intervalW;\nlet intervalN;\nlet intervalS;\nfunction scroll(gridster, left, top, width, height, event, lastMouse, calculateItemPosition, resize, resizeEventScrollType) {\n    scrollSensitivity = gridster.$options.scrollSensitivity;\n    scrollSpeed = gridster.$options.scrollSpeed;\n    gridsterElement = gridster.el;\n    resizeEvent = resize;\n    resizeEventType = resizeEventScrollType;\n    const offsetWidth = gridsterElement.offsetWidth;\n    const offsetHeight = gridsterElement.offsetHeight;\n    const offsetLeft = gridsterElement.scrollLeft;\n    const offsetTop = gridsterElement.scrollTop;\n    const elemTopOffset = top - offsetTop;\n    const elemBottomOffset = offsetHeight + offsetTop - top - height;\n    const { clientX, clientY } = event;\n    if (!gridster.$options.disableScrollVertical) {\n        if (lastMouse.clientY < clientY && elemBottomOffset < scrollSensitivity) {\n            cancelN();\n            if ((resizeEvent && resizeEventType && !resizeEventType.south) ||\n                intervalS) {\n                return;\n            }\n            intervalS = startVertical(1, calculateItemPosition, lastMouse);\n        }\n        else if (lastMouse.clientY > clientY &&\n            offsetTop > 0 &&\n            elemTopOffset < scrollSensitivity) {\n            cancelS();\n            if ((resizeEvent && resizeEventType && !resizeEventType.north) ||\n                intervalN) {\n                return;\n            }\n            intervalN = startVertical(-1, calculateItemPosition, lastMouse);\n        }\n        else if (lastMouse.clientY !== clientY) {\n            cancelVertical();\n        }\n    }\n    const elemRightOffset = offsetLeft + offsetWidth - left - width;\n    const elemLeftOffset = left - offsetLeft;\n    if (!gridster.$options.disableScrollHorizontal) {\n        if (lastMouse.clientX < clientX && elemRightOffset <= scrollSensitivity) {\n            cancelW();\n            if ((resizeEvent && resizeEventType && !resizeEventType.east) ||\n                intervalE) {\n                return;\n            }\n            intervalE = startHorizontal(1, calculateItemPosition, lastMouse);\n        }\n        else if (lastMouse.clientX > clientX &&\n            offsetLeft > 0 &&\n            elemLeftOffset < scrollSensitivity) {\n            cancelE();\n            if ((resizeEvent && resizeEventType && !resizeEventType.west) ||\n                intervalW) {\n                return;\n            }\n            intervalW = startHorizontal(-1, calculateItemPosition, lastMouse);\n        }\n        else if (lastMouse.clientX !== clientX) {\n            cancelHorizontal();\n        }\n    }\n}\nfunction startVertical(sign, calculateItemPosition, lastMouse) {\n    let clientY = lastMouse.clientY;\n    return window.setInterval(() => {\n        if (!gridsterElement ||\n            (sign === -1 && gridsterElement.scrollTop - scrollSpeed < 0)) {\n            cancelVertical();\n        }\n        gridsterElement.scrollTop += sign * scrollSpeed;\n        clientY += sign * scrollSpeed;\n        calculateItemPosition({ clientX: lastMouse.clientX, clientY });\n    }, intervalDuration);\n}\nfunction startHorizontal(sign, calculateItemPosition, lastMouse) {\n    let clientX = lastMouse.clientX;\n    return window.setInterval(() => {\n        if (!gridsterElement ||\n            (sign === -1 && gridsterElement.scrollLeft - scrollSpeed < 0)) {\n            cancelHorizontal();\n        }\n        gridsterElement.scrollLeft += sign * scrollSpeed;\n        clientX += sign * scrollSpeed;\n        calculateItemPosition({ clientX, clientY: lastMouse.clientY });\n    }, intervalDuration);\n}\nfunction cancelScroll() {\n    cancelHorizontal();\n    cancelVertical();\n    gridsterElement = null;\n}\nfunction cancelHorizontal() {\n    cancelE();\n    cancelW();\n}\nfunction cancelVertical() {\n    cancelN();\n    cancelS();\n}\nfunction cancelE() {\n    if (intervalE) {\n        clearInterval(intervalE);\n        intervalE = 0;\n    }\n}\nfunction cancelW() {\n    if (intervalW) {\n        clearInterval(intervalW);\n        intervalW = 0;\n    }\n}\nfunction cancelS() {\n    if (intervalS) {\n        clearInterval(intervalS);\n        intervalS = 0;\n    }\n}\nfunction cancelN() {\n    if (intervalN) {\n        clearInterval(intervalN);\n        intervalN = 0;\n    }\n}\n\nclass GridsterSwap {\n    constructor(gridsterItem) {\n        this.gridsterItem = gridsterItem;\n        this.gridster = gridsterItem.gridster;\n    }\n    destroy() {\n        this.gridster = this.gridsterItem = this.swapedItem = null;\n    }\n    swapItems() {\n        if (this.gridster.$options.swap) {\n            this.checkSwapBack();\n            this.checkSwap(this.gridsterItem);\n        }\n    }\n    checkSwapBack() {\n        if (this.swapedItem) {\n            const x = this.swapedItem.$item.x;\n            const y = this.swapedItem.$item.y;\n            this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n            this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n            if (this.gridster.checkCollision(this.swapedItem.$item)) {\n                this.swapedItem.$item.x = x;\n                this.swapedItem.$item.y = y;\n            }\n            else {\n                this.swapedItem.setSize();\n                this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n                this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n                this.swapedItem = undefined;\n            }\n        }\n    }\n    restoreSwapItem() {\n        if (this.swapedItem) {\n            this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n            this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n            this.swapedItem.setSize();\n            this.swapedItem = undefined;\n        }\n    }\n    setSwapItem() {\n        if (this.swapedItem) {\n            this.swapedItem.checkItemChanges(this.swapedItem.$item, this.swapedItem.item);\n            this.swapedItem = undefined;\n        }\n    }\n    checkSwap(pushedBy) {\n        let gridsterItemCollision;\n        if (this.gridster.$options.swapWhileDragging) {\n            gridsterItemCollision = this.gridster.checkCollisionForSwaping(pushedBy.$item);\n        }\n        else {\n            gridsterItemCollision = this.gridster.checkCollision(pushedBy.$item);\n        }\n        if (gridsterItemCollision &&\n            gridsterItemCollision !== true &&\n            gridsterItemCollision.canBeDragged()) {\n            const gridsterItemCollide = gridsterItemCollision;\n            const copyCollisionX = gridsterItemCollide.$item.x;\n            const copyCollisionY = gridsterItemCollide.$item.y;\n            const copyX = pushedBy.$item.x;\n            const copyY = pushedBy.$item.y;\n            const diffX = copyX - copyCollisionX;\n            const diffY = copyY - copyCollisionY;\n            gridsterItemCollide.$item.x = pushedBy.item.x - diffX;\n            gridsterItemCollide.$item.y = pushedBy.item.y - diffY;\n            pushedBy.$item.x = gridsterItemCollide.item.x + diffX;\n            pushedBy.$item.y = gridsterItemCollide.item.y + diffY;\n            if (this.gridster.checkCollision(gridsterItemCollide.$item) ||\n                this.gridster.checkCollision(pushedBy.$item)) {\n                pushedBy.$item.x = copyX;\n                pushedBy.$item.y = copyY;\n                gridsterItemCollide.$item.x = copyCollisionX;\n                gridsterItemCollide.$item.y = copyCollisionY;\n            }\n            else {\n                gridsterItemCollide.setSize();\n                this.swapedItem = gridsterItemCollide;\n                if (this.gridster.$options.swapWhileDragging) {\n                    this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n                    this.setSwapItem();\n                }\n            }\n        }\n    }\n}\n\nconst GRIDSTER_ITEM_RESIZABLE_HANDLER_CLASS = 'gridster-item-resizable-handler';\nvar Direction;\n(function (Direction) {\n    Direction[\"UP\"] = \"UP\";\n    Direction[\"DOWN\"] = \"DOWN\";\n    Direction[\"LEFT\"] = \"LEFT\";\n    Direction[\"RIGHT\"] = \"RIGHT\";\n})(Direction || (Direction = {}));\nclass GridsterDraggable {\n    constructor(gridsterItem, gridster, zone) {\n        this.zone = zone;\n        this.collision = false;\n        this.dragMove = (e) => {\n            e.stopPropagation();\n            e.preventDefault();\n            GridsterUtils.checkTouchEvent(e);\n            // get the directions of the mouse event\n            let directions = this.getDirections(e);\n            if (this.gridster.options.enableBoundaryControl) {\n                // prevent moving up at the top of gridster\n                if (directions.includes(Direction.UP) &&\n                    this.gridsterItem.el.getBoundingClientRect().top <\n                        this.gridster.el.getBoundingClientRect().top +\n                            (this.outerMarginTop ?? this.margin)) {\n                    directions = directions.filter(direction => direction != Direction.UP);\n                    e = new MouseEvent(e.type, {\n                        clientX: e.clientX,\n                        clientY: this.lastMouse.clientY\n                    });\n                }\n                // prevent moving left at the leftmost column of gridster\n                if (directions.includes(Direction.LEFT) &&\n                    this.gridsterItem.el.getBoundingClientRect().left <\n                        this.gridster.el.getBoundingClientRect().left +\n                            (this.outerMarginLeft ?? this.margin)) {\n                    directions = directions.filter(direction => direction != Direction.LEFT);\n                    e = new MouseEvent(e.type, {\n                        clientX: this.lastMouse.clientX,\n                        clientY: e.clientY\n                    });\n                }\n                // prevent moving right at the rightmost column of gridster\n                if (directions.includes(Direction.RIGHT) &&\n                    this.gridsterItem.el.getBoundingClientRect().right >\n                        this.gridster.el.getBoundingClientRect().right -\n                            (this.outerMarginRight ?? this.margin)) {\n                    directions = directions.filter(direction => direction != Direction.RIGHT);\n                    e = new MouseEvent(e.type, {\n                        clientX: this.lastMouse.clientX,\n                        clientY: e.clientY\n                    });\n                }\n                // prevent moving down at the bottom of gridster\n                if (directions.includes(Direction.DOWN) &&\n                    this.gridsterItem.el.getBoundingClientRect().bottom >\n                        this.gridster.el.getBoundingClientRect().bottom -\n                            (this.outerMarginBottom ?? this.margin)) {\n                    directions = directions.filter(direction => direction != Direction.DOWN);\n                    e = new MouseEvent(e.type, {\n                        clientX: e.clientX,\n                        clientY: this.lastMouse.clientY\n                    });\n                }\n            }\n            // do not change item location when there is no direction to go\n            if (directions.length) {\n                this.offsetLeft =\n                    this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n                this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n                scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.calculateItemPositionFromMousePosition);\n                this.calculateItemPositionFromMousePosition(e);\n            }\n        };\n        this.calculateItemPositionFromMousePosition = (e) => {\n            if (this.gridster.options.scale) {\n                this.calculateItemPositionWithScale(e, this.gridster.options.scale);\n            }\n            else {\n                this.calculateItemPositionWithoutScale(e);\n            }\n            this.calculateItemPosition();\n            this.lastMouse.clientX = e.clientX;\n            this.lastMouse.clientY = e.clientY;\n            this.zone.run(() => {\n                this.gridster.updateGrid();\n            });\n        };\n        this.dragStop = (e) => {\n            e.stopPropagation();\n            e.preventDefault();\n            cancelScroll();\n            this.cancelOnBlur();\n            this.mousemove();\n            this.mouseup();\n            this.mouseleave();\n            this.touchmove();\n            this.touchend();\n            this.touchcancel();\n            this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-moving');\n            this.gridster.dragInProgress = false;\n            this.gridster.updateGrid();\n            this.path = [];\n            if (this.gridster.options.draggable &&\n                this.gridster.options.draggable.stop) {\n                Promise.resolve(this.gridster.options.draggable.stop(this.gridsterItem.item, this.gridsterItem, e)).then(this.makeDrag, this.cancelDrag);\n            }\n            else {\n                this.makeDrag();\n            }\n            setTimeout(() => {\n                if (this.gridster) {\n                    this.gridster.movingItem = null;\n                    this.gridster.previewStyle(true);\n                }\n            });\n        };\n        this.cancelDrag = () => {\n            this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n            this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n            this.gridsterItem.setSize();\n            if (this.push) {\n                this.push.restoreItems();\n            }\n            if (this.swap) {\n                this.swap.restoreSwapItem();\n            }\n            if (this.push) {\n                this.push.destroy();\n                this.push = null;\n            }\n            if (this.swap) {\n                this.swap.destroy();\n                this.swap = null;\n            }\n        };\n        this.makeDrag = () => {\n            if (this.gridster.$options.draggable.dropOverItems &&\n                this.gridster.options.draggable &&\n                this.gridster.options.draggable.dropOverItemsCallback &&\n                this.collision &&\n                this.collision !== true &&\n                this.collision.$item) {\n                this.gridster.options.draggable.dropOverItemsCallback(this.gridsterItem.item, this.collision.item, this.gridster);\n            }\n            this.collision = false;\n            this.gridsterItem.setSize();\n            this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n            if (this.push) {\n                this.push.setPushedItems();\n            }\n            if (this.swap) {\n                this.swap.setSwapItem();\n            }\n            if (this.push) {\n                this.push.destroy();\n                this.push = null;\n            }\n            if (this.swap) {\n                this.swap.destroy();\n                this.swap = null;\n            }\n        };\n        this.dragStartDelay = (e) => {\n            const target = e.target;\n            if (target.classList.contains(GRIDSTER_ITEM_RESIZABLE_HANDLER_CLASS)) {\n                return;\n            }\n            if (GridsterUtils.checkContentClassForEvent(this.gridster, e)) {\n                return;\n            }\n            GridsterUtils.checkTouchEvent(e);\n            if (!this.gridster.$options.draggable.delayStart) {\n                this.dragStart(e);\n                return;\n            }\n            const timeout = setTimeout(() => {\n                this.dragStart(e);\n                cancelDrag();\n            }, this.gridster.$options.draggable.delayStart);\n            const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n            const cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\n            const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n            const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n            const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n            const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n            function cancelMove(eventMove) {\n                GridsterUtils.checkTouchEvent(eventMove);\n                if (Math.abs(eventMove.clientX - e.clientX) > 9 ||\n                    Math.abs(eventMove.clientY - e.clientY) > 9) {\n                    cancelDrag();\n                }\n            }\n            function cancelDrag() {\n                clearTimeout(timeout);\n                cancelOnBlur();\n                cancelMouse();\n                cancelMouseLeave();\n                cancelTouchMove();\n                cancelTouchEnd();\n                cancelTouchCancel();\n            }\n        };\n        this.gridsterItem = gridsterItem;\n        this.gridster = gridster;\n        this.lastMouse = {\n            clientX: 0,\n            clientY: 0\n        };\n        this.path = [];\n    }\n    destroy() {\n        if (this.gridster.previewStyle) {\n            this.gridster.previewStyle(true);\n        }\n        this.gridsterItem = this.gridster = this.collision = null;\n        if (this.mousedown) {\n            this.mousedown();\n            this.touchstart();\n        }\n    }\n    dragStart(e) {\n        if (e.which && e.which !== 1) {\n            return;\n        }\n        if (this.gridster.options.draggable &&\n            this.gridster.options.draggable.start) {\n            this.gridster.options.draggable.start(this.gridsterItem.item, this.gridsterItem, e);\n        }\n        e.stopPropagation();\n        e.preventDefault();\n        this.zone.runOutsideAngular(() => {\n            this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragMove);\n            this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragMove);\n        });\n        this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStop);\n        this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStop);\n        this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStop);\n        this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStop);\n        this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStop);\n        this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-moving');\n        this.margin = this.gridster.$options.margin;\n        this.outerMarginTop = this.gridster.$options.outerMarginTop;\n        this.outerMarginRight = this.gridster.$options.outerMarginRight;\n        this.outerMarginBottom = this.gridster.$options.outerMarginBottom;\n        this.outerMarginLeft = this.gridster.$options.outerMarginLeft;\n        this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n        this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n        this.left = this.gridsterItem.left - this.margin;\n        this.top = this.gridsterItem.top - this.margin;\n        this.originalClientX = e.clientX;\n        this.originalClientY = e.clientY;\n        this.width = this.gridsterItem.width;\n        this.height = this.gridsterItem.height;\n        if (this.gridster.$options.dirType === DirTypes.RTL) {\n            this.diffLeft =\n                e.clientX - this.gridster.el.scrollWidth + this.gridsterItem.left;\n        }\n        else {\n            this.diffLeft = e.clientX + this.offsetLeft - this.margin - this.left;\n        }\n        this.diffTop = e.clientY + this.offsetTop - this.margin - this.top;\n        this.gridster.movingItem = this.gridsterItem.$item;\n        this.gridster.previewStyle(true);\n        this.push = new GridsterPush(this.gridsterItem);\n        this.swap = new GridsterSwap(this.gridsterItem);\n        this.gridster.dragInProgress = true;\n        this.gridster.updateGrid();\n        this.path.push({\n            x: this.gridsterItem.item.x || 0,\n            y: this.gridsterItem.item.y || 0\n        });\n    }\n    calculateItemPositionWithScale(e, scale) {\n        if (this.gridster.$options.dirType === DirTypes.RTL) {\n            this.left =\n                this.gridster.el.scrollWidth -\n                    this.originalClientX +\n                    (e.clientX - this.originalClientX) / scale +\n                    this.diffLeft;\n        }\n        else {\n            this.left =\n                this.originalClientX +\n                    (e.clientX - this.originalClientX) / scale +\n                    this.offsetLeft -\n                    this.diffLeft;\n        }\n        this.top =\n            this.originalClientY +\n                (e.clientY - this.originalClientY) / scale +\n                this.offsetTop -\n                this.diffTop;\n    }\n    calculateItemPositionWithoutScale(e) {\n        if (this.gridster.$options.dirType === DirTypes.RTL) {\n            this.left = this.gridster.el.scrollWidth - e.clientX + this.diffLeft;\n        }\n        else {\n            this.left = e.clientX + this.offsetLeft - this.diffLeft;\n        }\n        this.top = e.clientY + this.offsetTop - this.diffTop;\n    }\n    calculateItemPosition() {\n        this.gridster.movingItem = this.gridsterItem.$item;\n        this.positionX = this.gridster.pixelsToPositionX(this.left, Math.round);\n        this.positionY = this.gridster.pixelsToPositionY(this.top, Math.round);\n        this.positionXBackup = this.gridsterItem.$item.x;\n        this.positionYBackup = this.gridsterItem.$item.y;\n        this.gridsterItem.$item.x = this.positionX;\n        if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n            this.gridsterItem.$item.x = this.positionXBackup;\n        }\n        this.gridsterItem.$item.y = this.positionY;\n        if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n            this.gridsterItem.$item.y = this.positionYBackup;\n        }\n        this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, this.left, this.top);\n        if (this.positionXBackup !== this.gridsterItem.$item.x ||\n            this.positionYBackup !== this.gridsterItem.$item.y) {\n            const lastPosition = this.path[this.path.length - 1];\n            let direction = '';\n            if (lastPosition.x < this.gridsterItem.$item.x) {\n                direction = this.push.fromWest;\n            }\n            else if (lastPosition.x > this.gridsterItem.$item.x) {\n                direction = this.push.fromEast;\n            }\n            else if (lastPosition.y < this.gridsterItem.$item.y) {\n                direction = this.push.fromNorth;\n            }\n            else if (lastPosition.y > this.gridsterItem.$item.y) {\n                direction = this.push.fromSouth;\n            }\n            this.push.pushItems(direction, this.gridster.$options.disablePushOnDrag);\n            this.swap.swapItems();\n            this.collision = this.gridster.checkCollision(this.gridsterItem.$item);\n            if (this.collision) {\n                this.gridsterItem.$item.x = this.positionXBackup;\n                this.gridsterItem.$item.y = this.positionYBackup;\n                if (this.gridster.$options.draggable.dropOverItems &&\n                    this.collision !== true &&\n                    this.collision.$item) {\n                    this.gridster.movingItem = null;\n                }\n            }\n            else {\n                this.path.push({\n                    x: this.gridsterItem.$item.x,\n                    y: this.gridsterItem.$item.y\n                });\n            }\n            this.push.checkPushBack();\n        }\n        else {\n            // reset the collision when you drag and drop on an adjacent cell that is not empty\n            // and go back to the cell you were in from the beginning,\n            // this is to prevent `dropOverItemsCallback'\n            this.collision = false;\n        }\n        this.gridster.previewStyle(true);\n    }\n    toggle() {\n        const enableDrag = this.gridsterItem.canBeDragged();\n        if (!this.enabled && enableDrag) {\n            this.enabled = !this.enabled;\n            this.mousedown = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'mousedown', this.dragStartDelay);\n            this.touchstart = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'touchstart', this.dragStartDelay);\n        }\n        else if (this.enabled && !enableDrag) {\n            this.enabled = !this.enabled;\n            this.mousedown();\n            this.touchstart();\n        }\n    }\n    /**\n     * Returns the list of directions for given mouse event\n     * @param e Mouse event\n     * */\n    getDirections(e) {\n        const directions = [];\n        if (this.lastMouse.clientX === 0 && this.lastMouse.clientY === 0) {\n            this.lastMouse.clientY = e.clientY;\n            this.lastMouse.clientX = e.clientX;\n        }\n        if (this.lastMouse.clientY > e.clientY) {\n            directions.push(Direction.UP);\n        }\n        if (this.lastMouse.clientY < e.clientY) {\n            directions.push(Direction.DOWN);\n        }\n        if (this.lastMouse.clientX < e.clientX) {\n            directions.push(Direction.RIGHT);\n        }\n        if (this.lastMouse.clientX > e.clientX) {\n            directions.push(Direction.LEFT);\n        }\n        return directions;\n    }\n}\n\nclass GridsterPushResize {\n    constructor(gridsterItem) {\n        this.pushedItems = [];\n        this.pushedItemsPath = [];\n        this.gridsterItem = gridsterItem;\n        this.gridster = gridsterItem.gridster;\n        this.tryPattern = {\n            fromEast: this.tryWest,\n            fromWest: this.tryEast,\n            fromNorth: this.trySouth,\n            fromSouth: this.tryNorth\n        };\n        this.fromSouth = 'fromSouth';\n        this.fromNorth = 'fromNorth';\n        this.fromEast = 'fromEast';\n        this.fromWest = 'fromWest';\n    }\n    destroy() {\n        this.gridster = this.gridsterItem = null;\n    }\n    pushItems(direction) {\n        if (this.gridster.$options.pushResizeItems) {\n            return this.push(this.gridsterItem, direction);\n        }\n        else {\n            return false;\n        }\n    }\n    restoreItems() {\n        let i = 0;\n        const l = this.pushedItems.length;\n        let pushedItem;\n        for (; i < l; i++) {\n            pushedItem = this.pushedItems[i];\n            pushedItem.$item.x = pushedItem.item.x || 0;\n            pushedItem.$item.y = pushedItem.item.y || 0;\n            pushedItem.$item.cols = pushedItem.item.cols || 1;\n            pushedItem.$item.row = pushedItem.item.row || 1;\n            pushedItem.setSize();\n        }\n        this.pushedItems = [];\n        this.pushedItemsPath = [];\n    }\n    setPushedItems() {\n        let i = 0;\n        const l = this.pushedItems.length;\n        let pushedItem;\n        for (; i < l; i++) {\n            pushedItem = this.pushedItems[i];\n            pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n        }\n        this.pushedItems = [];\n        this.pushedItemsPath = [];\n    }\n    checkPushBack() {\n        let i = this.pushedItems.length - 1;\n        let change = false;\n        for (; i > -1; i--) {\n            if (this.checkPushedItem(this.pushedItems[i], i)) {\n                change = true;\n            }\n        }\n        if (change) {\n            this.checkPushBack();\n        }\n    }\n    push(gridsterItem, direction) {\n        const gridsterItemCollision = this.gridster.checkCollision(gridsterItem.$item);\n        if (gridsterItemCollision &&\n            gridsterItemCollision !== true &&\n            gridsterItemCollision !== this.gridsterItem &&\n            gridsterItemCollision.canBeResized()) {\n            if (this.tryPattern[direction].call(this, gridsterItemCollision, gridsterItem, direction)) {\n                return true;\n            }\n        }\n        else if (gridsterItemCollision === false) {\n            return true;\n        }\n        return false;\n    }\n    trySouth(gridsterItemCollide, gridsterItem, direction) {\n        const backUpY = gridsterItemCollide.$item.y;\n        const backUpRows = gridsterItemCollide.$item.rows;\n        gridsterItemCollide.$item.y =\n            gridsterItem.$item.y + gridsterItem.$item.rows;\n        gridsterItemCollide.$item.rows =\n            backUpRows + backUpY - gridsterItemCollide.$item.y;\n        if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) &&\n            !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n            gridsterItemCollide.setSize();\n            this.addToPushed(gridsterItemCollide);\n            this.push(gridsterItem, direction);\n            return true;\n        }\n        else {\n            gridsterItemCollide.$item.y = backUpY;\n            gridsterItemCollide.$item.rows = backUpRows;\n        }\n        return false;\n    }\n    tryNorth(gridsterItemCollide, gridsterItem, direction) {\n        const backUpRows = gridsterItemCollide.$item.rows;\n        gridsterItemCollide.$item.rows =\n            gridsterItem.$item.y - gridsterItemCollide.$item.y;\n        if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) &&\n            !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n            gridsterItemCollide.setSize();\n            this.addToPushed(gridsterItemCollide);\n            this.push(gridsterItem, direction);\n            return true;\n        }\n        else {\n            gridsterItemCollide.$item.rows = backUpRows;\n        }\n        return false;\n    }\n    tryEast(gridsterItemCollide, gridsterItem, direction) {\n        const backUpX = gridsterItemCollide.$item.x;\n        const backUpCols = gridsterItemCollide.$item.cols;\n        gridsterItemCollide.$item.x =\n            gridsterItem.$item.x + gridsterItem.$item.cols;\n        gridsterItemCollide.$item.cols =\n            backUpCols + backUpX - gridsterItemCollide.$item.x;\n        if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) &&\n            !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n            gridsterItemCollide.setSize();\n            this.addToPushed(gridsterItemCollide);\n            this.push(gridsterItem, direction);\n            return true;\n        }\n        else {\n            gridsterItemCollide.$item.x = backUpX;\n            gridsterItemCollide.$item.cols = backUpCols;\n        }\n        return false;\n    }\n    tryWest(gridsterItemCollide, gridsterItem, direction) {\n        const backUpCols = gridsterItemCollide.$item.cols;\n        gridsterItemCollide.$item.cols =\n            gridsterItem.$item.x - gridsterItemCollide.$item.x;\n        if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) &&\n            !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n            gridsterItemCollide.setSize();\n            this.addToPushed(gridsterItemCollide);\n            this.push(gridsterItem, direction);\n            return true;\n        }\n        else {\n            gridsterItemCollide.$item.cols = backUpCols;\n        }\n        return false;\n    }\n    addToPushed(gridsterItem) {\n        if (this.pushedItems.indexOf(gridsterItem) < 0) {\n            this.pushedItems.push(gridsterItem);\n            this.pushedItemsPath.push([\n                {\n                    x: gridsterItem.item.x || 0,\n                    y: gridsterItem.item.y || 0,\n                    cols: gridsterItem.item.cols || 0,\n                    rows: gridsterItem.item.rows || 0\n                },\n                {\n                    x: gridsterItem.$item.x,\n                    y: gridsterItem.$item.y,\n                    cols: gridsterItem.$item.cols,\n                    rows: gridsterItem.$item.rows\n                }\n            ]);\n        }\n        else {\n            const i = this.pushedItems.indexOf(gridsterItem);\n            this.pushedItemsPath[i].push({\n                x: gridsterItem.$item.x,\n                y: gridsterItem.$item.y,\n                cols: gridsterItem.$item.cols,\n                rows: gridsterItem.$item.rows\n            });\n        }\n    }\n    removeFromPushed(i) {\n        if (i > -1) {\n            this.pushedItems.splice(i, 1);\n            this.pushedItemsPath.splice(i, 1);\n        }\n    }\n    checkPushedItem(pushedItem, i) {\n        const path = this.pushedItemsPath[i];\n        let j = path.length - 2;\n        let lastPosition;\n        let x;\n        let y;\n        let cols;\n        let rows;\n        for (; j > -1; j--) {\n            lastPosition = path[j];\n            x = pushedItem.$item.x;\n            y = pushedItem.$item.y;\n            cols = pushedItem.$item.cols;\n            rows = pushedItem.$item.rows;\n            pushedItem.$item.x = lastPosition.x;\n            pushedItem.$item.y = lastPosition.y;\n            pushedItem.$item.cols = lastPosition.cols;\n            pushedItem.$item.rows = lastPosition.rows;\n            if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n                pushedItem.setSize();\n                path.splice(j + 1, path.length - 1 - j);\n            }\n            else {\n                pushedItem.$item.x = x;\n                pushedItem.$item.y = y;\n                pushedItem.$item.cols = cols;\n                pushedItem.$item.rows = rows;\n            }\n        }\n        if (path.length < 2) {\n            this.removeFromPushed(i);\n            return true;\n        }\n        return false;\n    }\n}\n\nclass GridsterResizable {\n    constructor(gridsterItem, gridster, zone) {\n        this.zone = zone;\n        /**\n         * The direction function may reference any of the `GridsterResizable` class methods, that are\n         * responsible for gridster resize when the `dragmove` event is being handled. E.g. it may reference\n         * the `handleNorth` method when the north handle is pressed and moved by a mouse.\n         */\n        this.directionFunction = null;\n        this.dragMove = (e) => {\n            if (this.directionFunction === null) {\n                throw new Error('The `directionFunction` has not been set before calling `dragMove`.');\n            }\n            e.stopPropagation();\n            e.preventDefault();\n            GridsterUtils.checkTouchEvent(e);\n            this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n            this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n            scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.directionFunction, true, this.resizeEventScrollType);\n            const scale = this.gridster.options.scale || 1;\n            this.directionFunction({\n                clientX: this.originalClientX + (e.clientX - this.originalClientX) / scale,\n                clientY: this.originalClientY + (e.clientY - this.originalClientY) / scale\n            });\n            this.lastMouse.clientX = e.clientX;\n            this.lastMouse.clientY = e.clientY;\n            this.zone.run(() => {\n                this.gridster.updateGrid();\n            });\n        };\n        this.dragStop = (e) => {\n            e.stopPropagation();\n            e.preventDefault();\n            cancelScroll();\n            this.mousemove();\n            this.mouseup();\n            this.mouseleave();\n            this.cancelOnBlur();\n            this.touchmove();\n            this.touchend();\n            this.touchcancel();\n            this.gridster.dragInProgress = false;\n            this.gridster.updateGrid();\n            if (this.gridster.options.resizable &&\n                this.gridster.options.resizable.stop) {\n                Promise.resolve(this.gridster.options.resizable.stop(this.gridsterItem.item, this.gridsterItem, e)).then(this.makeResize, this.cancelResize);\n            }\n            else {\n                this.makeResize();\n            }\n            setTimeout(() => {\n                this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-resizing');\n                if (this.gridster) {\n                    this.gridster.movingItem = null;\n                    this.gridster.previewStyle();\n                }\n            });\n        };\n        this.cancelResize = () => {\n            this.gridsterItem.$item.cols = this.gridsterItem.item.cols || 1;\n            this.gridsterItem.$item.rows = this.gridsterItem.item.rows || 1;\n            this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n            this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n            this.gridsterItem.setSize();\n            this.push.restoreItems();\n            this.pushResize.restoreItems();\n            this.push.destroy();\n            this.push = null;\n            this.pushResize.destroy();\n            this.pushResize = null;\n        };\n        this.makeResize = () => {\n            this.gridsterItem.setSize();\n            this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n            this.push.setPushedItems();\n            this.pushResize.setPushedItems();\n            this.push.destroy();\n            this.push = null;\n            this.pushResize.destroy();\n            this.pushResize = null;\n        };\n        this.handleNorth = (e) => {\n            this.top = e.clientY + this.offsetTop - this.diffTop;\n            this.height = this.bottom - this.top;\n            if (this.minHeight > this.height) {\n                this.height = this.minHeight;\n                this.top = this.bottom - this.minHeight;\n            }\n            else if (this.gridster.options.enableBoundaryControl) {\n                this.top = Math.max(0, this.top);\n                this.height = this.bottom - this.top;\n            }\n            const marginTop = this.gridster.options.pushItems ? this.margin : 0;\n            this.newPosition = this.gridster.pixelsToPositionY(this.top + marginTop, Math.floor);\n            if (this.gridsterItem.$item.y !== this.newPosition) {\n                this.itemBackup[1] = this.gridsterItem.$item.y;\n                this.itemBackup[3] = this.gridsterItem.$item.rows;\n                this.gridsterItem.$item.rows +=\n                    this.gridsterItem.$item.y - this.newPosition;\n                this.gridsterItem.$item.y = this.newPosition;\n                this.pushResize.pushItems(this.pushResize.fromSouth);\n                this.push.pushItems(this.push.fromSouth, this.gridster.$options.disablePushOnResize);\n                if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n                    this.gridsterItem.$item.y = this.itemBackup[1];\n                    this.gridsterItem.$item.rows = this.itemBackup[3];\n                    this.top = this.gridster.positionYToPixels(this.gridsterItem.$item.y);\n                    this.setItemTop(this.gridster.positionYToPixels(this.gridsterItem.$item.y));\n                    this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) -\n                        this.margin);\n                    return;\n                }\n                else {\n                    this.gridster.previewStyle();\n                }\n                this.pushResize.checkPushBack();\n                this.push.checkPushBack();\n            }\n            this.setItemTop(this.top);\n            this.setItemHeight(this.height);\n        };\n        this.handleWest = (e) => {\n            const clientX = this.gridster.$options.dirType === DirTypes.RTL\n                ? this.originalClientX + (this.originalClientX - e.clientX)\n                : e.clientX;\n            this.left = clientX + this.offsetLeft - this.diffLeft;\n            this.width = this.right - this.left;\n            if (this.minWidth > this.width) {\n                this.width = this.minWidth;\n                this.left = this.right - this.minWidth;\n            }\n            else if (this.gridster.options.enableBoundaryControl) {\n                this.left = Math.max(0, this.left);\n                this.width = this.right - this.left;\n            }\n            const marginLeft = this.gridster.options.pushItems ? this.margin : 0;\n            this.newPosition = this.gridster.pixelsToPositionX(this.left + marginLeft, Math.floor);\n            if (this.gridsterItem.$item.x !== this.newPosition) {\n                this.itemBackup[0] = this.gridsterItem.$item.x;\n                this.itemBackup[2] = this.gridsterItem.$item.cols;\n                this.gridsterItem.$item.cols +=\n                    this.gridsterItem.$item.x - this.newPosition;\n                this.gridsterItem.$item.x = this.newPosition;\n                this.pushResize.pushItems(this.pushResize.fromEast);\n                this.push.pushItems(this.push.fromEast, this.gridster.$options.disablePushOnResize);\n                if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n                    this.gridsterItem.$item.x = this.itemBackup[0];\n                    this.gridsterItem.$item.cols = this.itemBackup[2];\n                    this.left = this.gridster.positionXToPixels(this.gridsterItem.$item.x);\n                    this.setItemLeft(this.gridster.positionXToPixels(this.gridsterItem.$item.x));\n                    this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) -\n                        this.margin);\n                    return;\n                }\n                else {\n                    this.gridster.previewStyle();\n                }\n                this.pushResize.checkPushBack();\n                this.push.checkPushBack();\n            }\n            this.setItemLeft(this.left);\n            this.setItemWidth(this.width);\n        };\n        this.handleSouth = (e) => {\n            this.height = e.clientY + this.offsetTop - this.diffBottom - this.top;\n            if (this.minHeight > this.height) {\n                this.height = this.minHeight;\n            }\n            this.bottom = this.top + this.height;\n            if (this.gridster.options.enableBoundaryControl) {\n                const margin = this.outerMarginBottom ?? this.margin;\n                const box = this.gridster.el.getBoundingClientRect();\n                this.bottom = Math.min(this.bottom, box.bottom - box.top - 2 * margin);\n                this.height = this.bottom - this.top;\n            }\n            const marginBottom = this.gridster.options.pushItems ? 0 : this.margin;\n            this.newPosition = this.gridster.pixelsToPositionY(this.bottom + marginBottom, Math.ceil);\n            if (this.gridsterItem.$item.y + this.gridsterItem.$item.rows !==\n                this.newPosition) {\n                this.itemBackup[3] = this.gridsterItem.$item.rows;\n                this.gridsterItem.$item.rows =\n                    this.newPosition - this.gridsterItem.$item.y;\n                this.pushResize.pushItems(this.pushResize.fromNorth);\n                this.push.pushItems(this.push.fromNorth, this.gridster.$options.disablePushOnResize);\n                if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n                    this.gridsterItem.$item.rows = this.itemBackup[3];\n                    this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) -\n                        this.margin);\n                    return;\n                }\n                else {\n                    this.gridster.previewStyle();\n                }\n                this.pushResize.checkPushBack();\n                this.push.checkPushBack();\n            }\n            this.setItemHeight(this.height);\n        };\n        this.handleEast = (e) => {\n            const clientX = this.gridster.$options.dirType === DirTypes.RTL\n                ? this.originalClientX + (this.originalClientX - e.clientX)\n                : e.clientX;\n            this.width = clientX + this.offsetLeft - this.diffRight - this.left;\n            if (this.minWidth > this.width) {\n                this.width = this.minWidth;\n            }\n            this.right = this.left + this.width;\n            if (this.gridster.options.enableBoundaryControl) {\n                const margin = this.outerMarginRight ?? this.margin;\n                const box = this.gridster.el.getBoundingClientRect();\n                this.right = Math.min(this.right, box.right - box.left - 2 * margin);\n                this.width = this.right - this.left;\n            }\n            const marginRight = this.gridster.options.pushItems ? 0 : this.margin;\n            this.newPosition = this.gridster.pixelsToPositionX(this.right + marginRight, Math.ceil);\n            if (this.gridsterItem.$item.x + this.gridsterItem.$item.cols !==\n                this.newPosition) {\n                this.itemBackup[2] = this.gridsterItem.$item.cols;\n                this.gridsterItem.$item.cols =\n                    this.newPosition - this.gridsterItem.$item.x;\n                this.pushResize.pushItems(this.pushResize.fromWest);\n                this.push.pushItems(this.push.fromWest, this.gridster.$options.disablePushOnResize);\n                if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n                    this.gridsterItem.$item.cols = this.itemBackup[2];\n                    this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) -\n                        this.margin);\n                    return;\n                }\n                else {\n                    this.gridster.previewStyle();\n                }\n                this.pushResize.checkPushBack();\n                this.push.checkPushBack();\n            }\n            this.setItemWidth(this.width);\n        };\n        this.handleNorthWest = (e) => {\n            this.handleNorth(e);\n            this.handleWest(e);\n        };\n        this.handleNorthEast = (e) => {\n            this.handleNorth(e);\n            this.handleEast(e);\n        };\n        this.handleSouthWest = (e) => {\n            this.handleSouth(e);\n            this.handleWest(e);\n        };\n        this.handleSouthEast = (e) => {\n            this.handleSouth(e);\n            this.handleEast(e);\n        };\n        this.gridsterItem = gridsterItem;\n        this.gridster = gridster;\n        this.lastMouse = {\n            clientX: 0,\n            clientY: 0\n        };\n        this.itemBackup = [0, 0, 0, 0];\n        this.resizeEventScrollType = {\n            west: false,\n            east: false,\n            north: false,\n            south: false\n        };\n    }\n    destroy() {\n        this.gridster?.previewStyle();\n        this.gridster = this.gridsterItem = null;\n    }\n    dragStart(e) {\n        if (e.which && e.which !== 1) {\n            return;\n        }\n        if (this.gridster.options.resizable &&\n            this.gridster.options.resizable.start) {\n            this.gridster.options.resizable.start(this.gridsterItem.item, this.gridsterItem, e);\n        }\n        e.stopPropagation();\n        e.preventDefault();\n        this.zone.runOutsideAngular(() => {\n            this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragMove);\n            this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragMove);\n        });\n        this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStop);\n        this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStop);\n        this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStop);\n        this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStop);\n        this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStop);\n        this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-resizing');\n        this.lastMouse.clientX = e.clientX;\n        this.lastMouse.clientY = e.clientY;\n        this.left = this.gridsterItem.left;\n        this.top = this.gridsterItem.top;\n        this.originalClientX = e.clientX;\n        this.originalClientY = e.clientY;\n        this.width = this.gridsterItem.width;\n        this.height = this.gridsterItem.height;\n        this.bottom = this.gridsterItem.top + this.gridsterItem.height;\n        this.right = this.gridsterItem.left + this.gridsterItem.width;\n        this.margin = this.gridster.$options.margin;\n        this.outerMarginTop = this.gridster.$options.outerMarginTop;\n        this.outerMarginRight = this.gridster.$options.outerMarginRight;\n        this.outerMarginBottom = this.gridster.$options.outerMarginBottom;\n        this.outerMarginLeft = this.gridster.$options.outerMarginLeft;\n        this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n        this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n        this.diffLeft = e.clientX + this.offsetLeft - this.left;\n        this.diffRight = e.clientX + this.offsetLeft - this.right;\n        this.diffTop = e.clientY + this.offsetTop - this.top;\n        this.diffBottom = e.clientY + this.offsetTop - this.bottom;\n        this.minHeight =\n            this.gridster.positionYToPixels(this.gridsterItem.$item.minItemRows ||\n                this.gridster.$options.minItemRows) - this.margin;\n        this.minWidth =\n            this.gridster.positionXToPixels(this.gridsterItem.$item.minItemCols ||\n                this.gridster.$options.minItemCols) - this.margin;\n        this.gridster.movingItem = this.gridsterItem.$item;\n        this.gridster.previewStyle();\n        this.push = new GridsterPush(this.gridsterItem);\n        this.pushResize = new GridsterPushResize(this.gridsterItem);\n        this.gridster.dragInProgress = true;\n        this.gridster.updateGrid();\n        const { classList } = e.target;\n        if (classList.contains('handle-n')) {\n            this.resizeEventScrollType.north = true;\n            this.directionFunction = this.handleNorth;\n        }\n        else if (classList.contains('handle-w')) {\n            if (this.gridster.$options.dirType === DirTypes.RTL) {\n                this.resizeEventScrollType.east = true;\n                this.directionFunction = this.handleEast;\n            }\n            else {\n                this.resizeEventScrollType.west = true;\n                this.directionFunction = this.handleWest;\n            }\n        }\n        else if (classList.contains('handle-s')) {\n            this.resizeEventScrollType.south = true;\n            this.directionFunction = this.handleSouth;\n        }\n        else if (classList.contains('handle-e')) {\n            if (this.gridster.$options.dirType === DirTypes.RTL) {\n                this.resizeEventScrollType.west = true;\n                this.directionFunction = this.handleWest;\n            }\n            else {\n                this.resizeEventScrollType.east = true;\n                this.directionFunction = this.handleEast;\n            }\n        }\n        else if (classList.contains('handle-nw')) {\n            if (this.gridster.$options.dirType === DirTypes.RTL) {\n                this.resizeEventScrollType.north = true;\n                this.resizeEventScrollType.east = true;\n                this.directionFunction = this.handleNorthEast;\n            }\n            else {\n                this.resizeEventScrollType.north = true;\n                this.resizeEventScrollType.west = true;\n                this.directionFunction = this.handleNorthWest;\n            }\n        }\n        else if (classList.contains('handle-ne')) {\n            if (this.gridster.$options.dirType === DirTypes.RTL) {\n                this.resizeEventScrollType.north = true;\n                this.resizeEventScrollType.west = true;\n                this.directionFunction = this.handleNorthWest;\n            }\n            else {\n                this.resizeEventScrollType.north = true;\n                this.resizeEventScrollType.east = true;\n                this.directionFunction = this.handleNorthEast;\n            }\n        }\n        else if (classList.contains('handle-sw')) {\n            if (this.gridster.$options.dirType === DirTypes.RTL) {\n                this.resizeEventScrollType.south = true;\n                this.resizeEventScrollType.east = true;\n                this.directionFunction = this.handleSouthEast;\n            }\n            else {\n                this.resizeEventScrollType.south = true;\n                this.resizeEventScrollType.west = true;\n                this.directionFunction = this.handleSouthWest;\n            }\n        }\n        else if (classList.contains('handle-se')) {\n            if (this.gridster.$options.dirType === DirTypes.RTL) {\n                this.resizeEventScrollType.south = true;\n                this.resizeEventScrollType.west = true;\n                this.directionFunction = this.handleSouthWest;\n            }\n            else {\n                this.resizeEventScrollType.south = true;\n                this.resizeEventScrollType.east = true;\n                this.directionFunction = this.handleSouthEast;\n            }\n        }\n    }\n    toggle() {\n        this.resizeEnabled = this.gridsterItem.canBeResized();\n        this.resizableHandles = this.gridsterItem.getResizableHandles();\n    }\n    dragStartDelay(e) {\n        GridsterUtils.checkTouchEvent(e);\n        if (!this.gridster.$options.resizable.delayStart) {\n            this.dragStart(e);\n            return;\n        }\n        const timeout = setTimeout(() => {\n            this.dragStart(e);\n            cancelDrag();\n        }, this.gridster.$options.resizable.delayStart);\n        const { cancelMouse, cancelMouseLeave, cancelOnBlur, cancelTouchMove, cancelTouchEnd, cancelTouchCancel } = this.zone.runOutsideAngular(() => {\n            // Note: all of these events are being added within the `<root>` zone since they all\n            // don't do any view updates and don't require Angular running change detection.\n            // All event listeners call `cancelDrag` once the event is dispatched, the `cancelDrag`\n            // is responsible only for removing event listeners.\n            const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n            const cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\n            const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n            const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n            const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n            const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n            return {\n                cancelMouse,\n                cancelMouseLeave,\n                cancelOnBlur,\n                cancelTouchMove,\n                cancelTouchEnd,\n                cancelTouchCancel\n            };\n        });\n        function cancelMove(eventMove) {\n            GridsterUtils.checkTouchEvent(eventMove);\n            if (Math.abs(eventMove.clientX - e.clientX) > 9 ||\n                Math.abs(eventMove.clientY - e.clientY) > 9) {\n                cancelDrag();\n            }\n        }\n        function cancelDrag() {\n            clearTimeout(timeout);\n            cancelOnBlur();\n            cancelMouse();\n            cancelMouseLeave();\n            cancelTouchMove();\n            cancelTouchEnd();\n            cancelTouchCancel();\n        }\n    }\n    setItemTop(top) {\n        this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, this.left, top);\n    }\n    setItemLeft(left) {\n        this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, left, this.top);\n    }\n    setItemHeight(height) {\n        this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'height', height + 'px');\n    }\n    setItemWidth(width) {\n        this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'width', width + 'px');\n    }\n}\n\nclass GridsterItemComponent {\n    get zIndex() {\n        return this.getLayerIndex() + this.gridster.$options.baseLayerIndex;\n    }\n    constructor(el, gridster, renderer, zone) {\n        this.renderer = renderer;\n        this.zone = zone;\n        this.itemInit = new EventEmitter();\n        this.itemChange = new EventEmitter();\n        this.itemResize = new EventEmitter();\n        this.el = el.nativeElement;\n        this.$item = {\n            cols: -1,\n            rows: -1,\n            x: -1,\n            y: -1\n        };\n        this.gridster = gridster;\n        this.drag = new GridsterDraggable(this, gridster, this.zone);\n        this.resize = new GridsterResizable(this, gridster, this.zone);\n    }\n    ngOnInit() {\n        this.gridster.addItem(this);\n    }\n    ngOnChanges(changes) {\n        if (changes.item) {\n            this.updateOptions();\n            if (!this.init) {\n                this.gridster.calculateLayout$.next();\n            }\n        }\n        if (changes.item && changes.item.previousValue) {\n            this.setSize();\n        }\n    }\n    updateOptions() {\n        this.$item = GridsterUtils.merge(this.$item, this.item, {\n            cols: undefined,\n            rows: undefined,\n            x: undefined,\n            y: undefined,\n            layerIndex: undefined,\n            dragEnabled: undefined,\n            resizeEnabled: undefined,\n            compactEnabled: undefined,\n            maxItemRows: undefined,\n            minItemRows: undefined,\n            maxItemCols: undefined,\n            minItemCols: undefined,\n            maxItemArea: undefined,\n            minItemArea: undefined,\n            resizableHandles: {\n                s: undefined,\n                e: undefined,\n                n: undefined,\n                w: undefined,\n                se: undefined,\n                ne: undefined,\n                sw: undefined,\n                nw: undefined\n            }\n        });\n    }\n    ngOnDestroy() {\n        this.gridster.removeItem(this);\n        this.drag.destroy();\n        this.resize.destroy();\n        this.gridster = this.drag = this.resize = null;\n    }\n    setSize() {\n        this.renderer.setStyle(this.el, 'display', this.notPlaced ? '' : 'block');\n        this.gridster.gridRenderer.updateItem(this.el, this.$item, this.renderer);\n        this.updateItemSize();\n    }\n    updateItemSize() {\n        const top = this.$item.y * this.gridster.curRowHeight;\n        const left = this.$item.x * this.gridster.curColWidth;\n        const width = this.$item.cols * this.gridster.curColWidth -\n            this.gridster.$options.margin;\n        const height = this.$item.rows * this.gridster.curRowHeight -\n            this.gridster.$options.margin;\n        this.top = top;\n        this.left = left;\n        if (!this.init && width > 0 && height > 0) {\n            this.init = true;\n            if (this.item.initCallback) {\n                this.item.initCallback(this.item, this);\n            }\n            if (this.gridster.options.itemInitCallback) {\n                this.gridster.options.itemInitCallback(this.item, this);\n            }\n            this.itemInit.next({ item: this.item, itemComponent: this });\n            if (this.gridster.$options.scrollToNewItems) {\n                this.el.scrollIntoView(false);\n            }\n        }\n        if (width !== this.width || height !== this.height) {\n            this.width = width;\n            this.height = height;\n            if (this.gridster.options.itemResizeCallback) {\n                this.gridster.options.itemResizeCallback(this.item, this);\n            }\n            this.itemResize.next({ item: this.item, itemComponent: this });\n        }\n    }\n    itemChanged() {\n        if (this.gridster.options.itemChangeCallback) {\n            this.gridster.options.itemChangeCallback(this.item, this);\n        }\n        this.itemChange.next({ item: this.item, itemComponent: this });\n    }\n    checkItemChanges(newValue, oldValue) {\n        if (newValue.rows === oldValue.rows &&\n            newValue.cols === oldValue.cols &&\n            newValue.x === oldValue.x &&\n            newValue.y === oldValue.y) {\n            return;\n        }\n        if (this.gridster.checkCollision(this.$item)) {\n            this.$item.x = oldValue.x || 0;\n            this.$item.y = oldValue.y || 0;\n            this.$item.cols = oldValue.cols || 1;\n            this.$item.rows = oldValue.rows || 1;\n            this.setSize();\n        }\n        else {\n            this.item.cols = this.$item.cols;\n            this.item.rows = this.$item.rows;\n            this.item.x = this.$item.x;\n            this.item.y = this.$item.y;\n            this.gridster.calculateLayout$.next();\n            this.itemChanged();\n        }\n    }\n    canBeDragged() {\n        const gridDragEnabled = this.gridster.$options.draggable.enabled;\n        const itemDragEnabled = this.$item.dragEnabled === undefined\n            ? gridDragEnabled\n            : this.$item.dragEnabled;\n        return !this.gridster.mobile && gridDragEnabled && itemDragEnabled;\n    }\n    canBeResized() {\n        const gridResizable = this.gridster.$options.resizable.enabled;\n        const itemResizable = this.$item.resizeEnabled === undefined\n            ? gridResizable\n            : this.$item.resizeEnabled;\n        return !this.gridster.mobile && gridResizable && itemResizable;\n    }\n    getResizableHandles() {\n        const gridResizableHandles = this.gridster.$options.resizable.handles;\n        const itemResizableHandles = this.$item.resizableHandles;\n        // use grid settings if no settings are provided for the item.\n        if (itemResizableHandles === undefined) {\n            return gridResizableHandles;\n        }\n        // else merge the settings\n        return {\n            ...gridResizableHandles,\n            ...itemResizableHandles\n        };\n    }\n    bringToFront(offset) {\n        if (offset && offset <= 0) {\n            return;\n        }\n        const layerIndex = this.getLayerIndex();\n        const topIndex = this.gridster.$options.maxLayerIndex;\n        if (layerIndex < topIndex) {\n            const targetIndex = offset ? layerIndex + offset : topIndex;\n            this.item.layerIndex = this.$item.layerIndex =\n                targetIndex > topIndex ? topIndex : targetIndex;\n        }\n    }\n    sendToBack(offset) {\n        if (offset && offset <= 0) {\n            return;\n        }\n        const layerIndex = this.getLayerIndex();\n        if (layerIndex > 0) {\n            const targetIndex = offset ? layerIndex - offset : 0;\n            this.item.layerIndex = this.$item.layerIndex =\n                targetIndex < 0 ? 0 : targetIndex;\n        }\n    }\n    getLayerIndex() {\n        if (this.item.layerIndex !== undefined) {\n            return this.item.layerIndex;\n        }\n        if (this.gridster.$options.defaultLayerIndex !== undefined) {\n            return this.gridster.$options.defaultLayerIndex;\n        }\n        return 0;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.3\", ngImport: i0, type: GridsterItemComponent, deps: [{ token: ElementRef }, { token: GridsterComponent }, { token: Renderer2 }, { token: NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.3\", type: GridsterItemComponent, isStandalone: true, selector: \"gridster-item\", inputs: { item: \"item\" }, outputs: { itemInit: \"itemInit\", itemChange: \"itemChange\", itemResize: \"itemResize\" }, host: { properties: { \"style.z-index\": \"this.zIndex\" } }, usesOnChanges: true, ngImport: i0, template: \"<ng-content></ng-content>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"resize.resizableHandles?.s && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-s\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"resize.resizableHandles?.e && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-e\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"resize.resizableHandles?.n && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-n\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"resize.resizableHandles?.w && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-w\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"resize.resizableHandles?.se && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-se\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"resize.resizableHandles?.ne && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-ne\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"resize.resizableHandles?.sw && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-sw\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"resize.resizableHandles?.nw && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-nw\\\"\\n></div>\\n\", styles: [\"gridster-item{box-sizing:border-box;z-index:1;position:absolute;overflow:hidden;transition:.3s;display:none;background:white;-webkit-user-select:text;user-select:text}gridster-item.gridster-item-moving{cursor:move}gridster-item.gridster-item-resizing,gridster-item.gridster-item-moving{transition:0s;z-index:2;box-shadow:0 0 5px 5px #0003,0 6px 10px #00000024,0 1px 18px #0000001f}.gridster-item-resizable-handler{position:absolute;z-index:2}.gridster-item-resizable-handler.handle-n{cursor:ns-resize;height:10px;right:0;top:0;left:0}.gridster-item-resizable-handler.handle-e{cursor:ew-resize;width:10px;bottom:0;right:0;top:0}.gridster-item-resizable-handler.handle-s{cursor:ns-resize;height:10px;right:0;bottom:0;left:0}.gridster-item-resizable-handler.handle-w{cursor:ew-resize;width:10px;left:0;top:0;bottom:0}.gridster-item-resizable-handler.handle-ne{cursor:ne-resize;width:10px;height:10px;right:0;top:0}.gridster-item-resizable-handler.handle-nw{cursor:nw-resize;width:10px;height:10px;left:0;top:0}.gridster-item-resizable-handler.handle-se{cursor:se-resize;width:0;height:0;right:0;bottom:0;border-style:solid;border-width:0 0 10px 10px;border-color:transparent}.gridster-item-resizable-handler.handle-sw{cursor:sw-resize;width:10px;height:10px;left:0;bottom:0}gridster-item:hover .gridster-item-resizable-handler.handle-se{border-color:transparent transparent #ccc}\\n\"], dependencies: [{ kind: \"directive\", type: NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.3\", ngImport: i0, type: GridsterItemComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'gridster-item', encapsulation: ViewEncapsulation.None, standalone: true, imports: [NgIf], template: \"<ng-content></ng-content>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"resize.resizableHandles?.s && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-s\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"resize.resizableHandles?.e && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-e\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"resize.resizableHandles?.n && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-n\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"resize.resizableHandles?.w && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-w\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"resize.resizableHandles?.se && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-se\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"resize.resizableHandles?.ne && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-ne\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"resize.resizableHandles?.sw && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-sw\\\"\\n></div>\\n<div\\n  (mousedown)=\\\"resize.dragStartDelay($event)\\\"\\n  (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n  *ngIf=\\\"resize.resizableHandles?.nw && resize.resizeEnabled\\\"\\n  class=\\\"gridster-item-resizable-handler handle-nw\\\"\\n></div>\\n\", styles: [\"gridster-item{box-sizing:border-box;z-index:1;position:absolute;overflow:hidden;transition:.3s;display:none;background:white;-webkit-user-select:text;user-select:text}gridster-item.gridster-item-moving{cursor:move}gridster-item.gridster-item-resizing,gridster-item.gridster-item-moving{transition:0s;z-index:2;box-shadow:0 0 5px 5px #0003,0 6px 10px #00000024,0 1px 18px #0000001f}.gridster-item-resizable-handler{position:absolute;z-index:2}.gridster-item-resizable-handler.handle-n{cursor:ns-resize;height:10px;right:0;top:0;left:0}.gridster-item-resizable-handler.handle-e{cursor:ew-resize;width:10px;bottom:0;right:0;top:0}.gridster-item-resizable-handler.handle-s{cursor:ns-resize;height:10px;right:0;bottom:0;left:0}.gridster-item-resizable-handler.handle-w{cursor:ew-resize;width:10px;left:0;top:0;bottom:0}.gridster-item-resizable-handler.handle-ne{cursor:ne-resize;width:10px;height:10px;right:0;top:0}.gridster-item-resizable-handler.handle-nw{cursor:nw-resize;width:10px;height:10px;left:0;top:0}.gridster-item-resizable-handler.handle-se{cursor:se-resize;width:0;height:0;right:0;bottom:0;border-style:solid;border-width:0 0 10px 10px;border-color:transparent}.gridster-item-resizable-handler.handle-sw{cursor:sw-resize;width:10px;height:10px;left:0;bottom:0}gridster-item:hover .gridster-item-resizable-handler.handle-se{border-color:transparent transparent #ccc}\\n\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef, decorators: [{\n                    type: Inject,\n                    args: [ElementRef]\n                }] }, { type: GridsterComponent }, { type: i0.Renderer2, decorators: [{\n                    type: Inject,\n                    args: [Renderer2]\n                }] }, { type: i0.NgZone, decorators: [{\n                    type: Inject,\n                    args: [NgZone]\n                }] }], propDecorators: { item: [{\n                type: Input\n            }], itemInit: [{\n                type: Output\n            }], itemChange: [{\n                type: Output\n            }], itemResize: [{\n                type: Output\n            }], zIndex: [{\n                type: HostBinding,\n                args: ['style.z-index']\n            }] } });\n\nclass GridsterItemComponentInterface {\n}\n\nclass GridsterComponentInterface {\n}\n\nclass GridsterModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.3\", ngImport: i0, type: GridsterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.3\", ngImport: i0, type: GridsterModule, imports: [GridsterComponent, GridsterItemComponent], exports: [GridsterComponent, GridsterItemComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.3\", ngImport: i0, type: GridsterModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.3\", ngImport: i0, type: GridsterModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [GridsterComponent, GridsterItemComponent],\n                    exports: [GridsterComponent, GridsterItemComponent]\n                }]\n        }] });\n\n/*\n * Public API Surface of gridster\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CompactType, DirTypes, DisplayGrid, GridType, GridsterComponent, GridsterComponentInterface, GridsterConfigService, GridsterItemComponent, GridsterItemComponentInterface, GridsterModule, GridsterPush, GridsterPushResize, GridsterSwap };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}