{"ast":null,"code":"import { geometry as geom } from '@progress/kendo-drawing';\nimport Point from './point';\nimport { X, Y, TOP, BOTTOM, LEFT, RIGHT, CENTER, WIDTH, HEIGHT } from '../common/constants';\nimport { Class, defined, getSpacing, inArray, isArray, rad } from '../common';\nclass Box extends Class {\n  constructor(x1, y1, x2, y2) {\n    super();\n    this.x1 = x1 || 0;\n    this.y1 = y1 || 0;\n    this.x2 = x2 || 0;\n    this.y2 = y2 || 0;\n  }\n  equals(box) {\n    return this.x1 === box.x1 && this.x2 === box.x2 && this.y1 === box.y1 && this.y2 === box.y2;\n  }\n  width() {\n    return this.x2 - this.x1;\n  }\n  height() {\n    return this.y2 - this.y1;\n  }\n  translate(dx, dy) {\n    this.x1 += dx;\n    this.x2 += dx;\n    this.y1 += dy;\n    this.y2 += dy;\n    return this;\n  }\n  move(x, y) {\n    const height = this.height();\n    const width = this.width();\n    if (defined(x)) {\n      this.x1 = x;\n      this.x2 = this.x1 + width;\n    }\n    if (defined(y)) {\n      this.y1 = y;\n      this.y2 = this.y1 + height;\n    }\n    return this;\n  }\n  wrap(targetBox) {\n    this.x1 = Math.min(this.x1, targetBox.x1);\n    this.y1 = Math.min(this.y1, targetBox.y1);\n    this.x2 = Math.max(this.x2, targetBox.x2);\n    this.y2 = Math.max(this.y2, targetBox.y2);\n    return this;\n  }\n  wrapPoint(point) {\n    const arrayPoint = isArray(point);\n    const x = arrayPoint ? point[0] : point.x;\n    const y = arrayPoint ? point[1] : point.y;\n    this.wrap(new Box(x, y, x, y));\n    return this;\n  }\n  snapTo(targetBox, axis) {\n    if (axis === X || !axis) {\n      this.x1 = targetBox.x1;\n      this.x2 = targetBox.x2;\n    }\n    if (axis === Y || !axis) {\n      this.y1 = targetBox.y1;\n      this.y2 = targetBox.y2;\n    }\n    return this;\n  }\n  alignTo(targetBox, anchor) {\n    const height = this.height();\n    const width = this.width();\n    const axis = anchor === TOP || anchor === BOTTOM ? Y : X;\n    const offset = axis === Y ? height : width;\n    if (anchor === CENTER) {\n      const targetCenter = targetBox.center();\n      const center = this.center();\n      this.x1 += targetCenter.x - center.x;\n      this.y1 += targetCenter.y - center.y;\n    } else if (anchor === TOP || anchor === LEFT) {\n      this[axis + 1] = targetBox[axis + 1] - offset;\n    } else {\n      this[axis + 1] = targetBox[axis + 2];\n    }\n    this.x2 = this.x1 + width;\n    this.y2 = this.y1 + height;\n    return this;\n  }\n  shrink(dw, dh) {\n    this.x2 -= dw;\n    this.y2 -= dh;\n    return this;\n  }\n  expand(dw, dh) {\n    this.shrink(-dw, -dh);\n    return this;\n  }\n  pad(padding) {\n    const spacing = getSpacing(padding);\n    this.x1 -= spacing.left;\n    this.x2 += spacing.right;\n    this.y1 -= spacing.top;\n    this.y2 += spacing.bottom;\n    return this;\n  }\n  unpad(padding) {\n    const spacing = getSpacing(padding);\n    spacing.left = -spacing.left;\n    spacing.top = -spacing.top;\n    spacing.right = -spacing.right;\n    spacing.bottom = -spacing.bottom;\n    return this.pad(spacing);\n  }\n  clone() {\n    return new Box(this.x1, this.y1, this.x2, this.y2);\n  }\n  center() {\n    return new Point(this.x1 + this.width() / 2, this.y1 + this.height() / 2);\n  }\n  containsPoint(point) {\n    return point.x >= this.x1 && point.x <= this.x2 && point.y >= this.y1 && point.y <= this.y2;\n  }\n  points() {\n    return [new Point(this.x1, this.y1), new Point(this.x2, this.y1), new Point(this.x2, this.y2), new Point(this.x1, this.y2)];\n  }\n  getHash() {\n    return [this.x1, this.y1, this.x2, this.y2].join(\",\");\n  }\n  overlaps(box) {\n    return !(box.y2 < this.y1 || this.y2 < box.y1 || box.x2 < this.x1 || this.x2 < box.x1);\n  }\n  rotate(rotation) {\n    let width = this.width();\n    let height = this.height();\n    const {\n      x: cx,\n      y: cy\n    } = this.center();\n    const r1 = rotatePoint(0, 0, cx, cy, rotation);\n    const r2 = rotatePoint(width, 0, cx, cy, rotation);\n    const r3 = rotatePoint(width, height, cx, cy, rotation);\n    const r4 = rotatePoint(0, height, cx, cy, rotation);\n    width = Math.max(r1.x, r2.x, r3.x, r4.x) - Math.min(r1.x, r2.x, r3.x, r4.x);\n    height = Math.max(r1.y, r2.y, r3.y, r4.y) - Math.min(r1.y, r2.y, r3.y, r4.y);\n    this.x2 = this.x1 + width;\n    this.y2 = this.y1 + height;\n    return this;\n  }\n  toRect() {\n    return new geom.Rect([this.x1, this.y1], [this.width(), this.height()]);\n  }\n  hasSize() {\n    return this.width() !== 0 && this.height() !== 0;\n  }\n  align(targetBox, axis, alignment) {\n    const c1 = axis + 1;\n    const c2 = axis + 2;\n    const sizeFunc = axis === X ? WIDTH : HEIGHT;\n    const size = this[sizeFunc]();\n    if (inArray(alignment, [LEFT, TOP])) {\n      this[c1] = targetBox[c1];\n      this[c2] = this[c1] + size;\n    } else if (inArray(alignment, [RIGHT, BOTTOM])) {\n      this[c2] = targetBox[c2];\n      this[c1] = this[c2] - size;\n    } else if (alignment === CENTER) {\n      this[c1] = targetBox[c1] + (targetBox[sizeFunc]() - size) / 2;\n      this[c2] = this[c1] + size;\n    }\n  }\n}\nfunction rotatePoint(x, y, cx, cy, angle) {\n  const theta = rad(angle);\n  return new Point(cx + (x - cx) * Math.cos(theta) + (y - cy) * Math.sin(theta), cy - (x - cx) * Math.sin(theta) + (y - cy) * Math.cos(theta));\n}\nexport default Box;","map":{"version":3,"names":["geometry","geom","Point","X","Y","TOP","BOTTOM","LEFT","RIGHT","CENTER","WIDTH","HEIGHT","Class","defined","getSpacing","inArray","isArray","rad","Box","constructor","x1","y1","x2","y2","equals","box","width","height","translate","dx","dy","move","x","y","wrap","targetBox","Math","min","max","wrapPoint","point","arrayPoint","snapTo","axis","alignTo","anchor","offset","targetCenter","center","shrink","dw","dh","expand","pad","padding","spacing","left","right","top","bottom","unpad","clone","containsPoint","points","getHash","join","overlaps","rotate","rotation","cx","cy","r1","rotatePoint","r2","r3","r4","toRect","Rect","hasSize","align","alignment","c1","c2","sizeFunc","size","angle","theta","cos","sin"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-charts/dist/es2015/core/box.js"],"sourcesContent":["import { geometry as geom } from '@progress/kendo-drawing';\n\nimport Point from './point';\n\nimport { X, Y, TOP, BOTTOM, LEFT, RIGHT, CENTER, WIDTH, HEIGHT } from '../common/constants';\nimport { Class, defined, getSpacing, inArray, isArray, rad } from '../common';\n\nclass Box extends Class {\n    constructor(x1, y1, x2, y2) {\n        super();\n\n        this.x1 = x1 || 0;\n        this.y1 = y1 || 0;\n        this.x2 = x2 || 0;\n        this.y2 = y2 || 0;\n    }\n\n    equals(box) {\n        return this.x1 === box.x1 && this.x2 === box.x2 &&\n            this.y1 === box.y1 && this.y2 === box.y2;\n    }\n\n    width() {\n        return this.x2 - this.x1;\n    }\n\n    height() {\n        return this.y2 - this.y1;\n    }\n\n    translate(dx, dy) {\n        this.x1 += dx;\n        this.x2 += dx;\n        this.y1 += dy;\n        this.y2 += dy;\n\n        return this;\n    }\n\n    move(x, y) {\n        const height = this.height();\n        const width = this.width();\n\n        if (defined(x)) {\n            this.x1 = x;\n            this.x2 = this.x1 + width;\n        }\n\n        if (defined(y)) {\n            this.y1 = y;\n            this.y2 = this.y1 + height;\n        }\n\n        return this;\n    }\n\n    wrap(targetBox) {\n        this.x1 = Math.min(this.x1, targetBox.x1);\n        this.y1 = Math.min(this.y1, targetBox.y1);\n        this.x2 = Math.max(this.x2, targetBox.x2);\n        this.y2 = Math.max(this.y2, targetBox.y2);\n\n        return this;\n    }\n\n    wrapPoint(point) {\n        const arrayPoint = isArray(point);\n        const x = arrayPoint ? point[0] : point.x;\n        const y = arrayPoint ? point[1] : point.y;\n        this.wrap(new Box(x, y, x, y));\n\n        return this;\n    }\n\n    snapTo(targetBox, axis) {\n\n        if (axis === X || !axis) {\n            this.x1 = targetBox.x1;\n            this.x2 = targetBox.x2;\n        }\n\n        if (axis === Y || !axis) {\n            this.y1 = targetBox.y1;\n            this.y2 = targetBox.y2;\n        }\n\n        return this;\n    }\n\n    alignTo(targetBox, anchor) {\n        const height = this.height();\n        const width = this.width();\n        const axis = anchor === TOP || anchor === BOTTOM ? Y : X;\n        const offset = axis === Y ? height : width;\n\n        if (anchor === CENTER) {\n            const targetCenter = targetBox.center();\n            const center = this.center();\n\n            this.x1 += targetCenter.x - center.x;\n            this.y1 += targetCenter.y - center.y;\n        } else if (anchor === TOP || anchor === LEFT) {\n            this[axis + 1] = targetBox[axis + 1] - offset;\n        } else {\n            this[axis + 1] = targetBox[axis + 2];\n        }\n\n        this.x2 = this.x1 + width;\n        this.y2 = this.y1 + height;\n\n        return this;\n    }\n\n    shrink(dw, dh) {\n\n        this.x2 -= dw;\n        this.y2 -= dh;\n\n        return this;\n    }\n\n    expand(dw, dh) {\n        this.shrink(-dw, -dh);\n        return this;\n    }\n\n    pad(padding) {\n        const spacing = getSpacing(padding);\n\n        this.x1 -= spacing.left;\n        this.x2 += spacing.right;\n        this.y1 -= spacing.top;\n        this.y2 += spacing.bottom;\n\n        return this;\n    }\n\n    unpad(padding) {\n        const spacing = getSpacing(padding);\n\n        spacing.left = -spacing.left;\n        spacing.top = -spacing.top;\n        spacing.right = -spacing.right;\n        spacing.bottom = -spacing.bottom;\n\n        return this.pad(spacing);\n    }\n\n    clone() {\n        return new Box(this.x1, this.y1, this.x2, this.y2);\n    }\n\n    center() {\n        return new Point(\n            this.x1 + this.width() / 2,\n            this.y1 + this.height() / 2\n        );\n    }\n\n    containsPoint(point) {\n\n        return point.x >= this.x1 && point.x <= this.x2 &&\n               point.y >= this.y1 && point.y <= this.y2;\n    }\n\n    points() {\n        return [\n            new Point(this.x1, this.y1),\n            new Point(this.x2, this.y1),\n            new Point(this.x2, this.y2),\n            new Point(this.x1, this.y2)\n        ];\n    }\n\n    getHash() {\n        return [ this.x1, this.y1, this.x2, this.y2 ].join(\",\");\n    }\n\n    overlaps(box) {\n        return !(box.y2 < this.y1 || this.y2 < box.y1 || box.x2 < this.x1 || this.x2 < box.x1);\n    }\n\n    rotate(rotation) {\n        let width = this.width();\n        let height = this.height();\n        const { x: cx, y: cy } = this.center();\n\n        const r1 = rotatePoint(0, 0, cx, cy, rotation);\n        const r2 = rotatePoint(width, 0, cx, cy, rotation);\n        const r3 = rotatePoint(width, height, cx, cy, rotation);\n        const r4 = rotatePoint(0, height, cx, cy, rotation);\n\n        width = Math.max(r1.x, r2.x, r3.x, r4.x) - Math.min(r1.x, r2.x, r3.x, r4.x);\n        height = Math.max(r1.y, r2.y, r3.y, r4.y) - Math.min(r1.y, r2.y, r3.y, r4.y);\n\n        this.x2 = this.x1 + width;\n        this.y2 = this.y1 + height;\n\n        return this;\n    }\n\n    toRect() {\n        return new geom.Rect([ this.x1, this.y1 ], [ this.width(), this.height() ]);\n    }\n\n    hasSize() {\n        return this.width() !== 0 && this.height() !== 0;\n    }\n\n    align(targetBox, axis, alignment) {\n        const c1 = axis + 1;\n        const c2 = axis + 2;\n        const sizeFunc = axis === X ? WIDTH : HEIGHT;\n        const size = this[sizeFunc]();\n\n        if (inArray(alignment, [ LEFT, TOP ])) {\n            this[c1] = targetBox[c1];\n            this[c2] = this[c1] + size;\n        } else if (inArray(alignment, [ RIGHT, BOTTOM ])) {\n            this[c2] = targetBox[c2];\n            this[c1] = this[c2] - size;\n        } else if (alignment === CENTER) {\n            this[c1] = targetBox[c1] + (targetBox[sizeFunc]() - size) / 2;\n            this[c2] = this[c1] + size;\n        }\n    }\n}\n\nfunction rotatePoint(x, y, cx, cy, angle) {\n    const theta = rad(angle);\n\n    return new Point(\n        cx + (x - cx) * Math.cos(theta) + (y - cy) * Math.sin(theta),\n        cy - (x - cx) * Math.sin(theta) + (y - cy) * Math.cos(theta)\n    );\n}\n\nexport default Box;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}