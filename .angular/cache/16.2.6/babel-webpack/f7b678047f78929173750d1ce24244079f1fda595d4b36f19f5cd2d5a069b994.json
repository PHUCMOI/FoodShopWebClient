{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { forkJoin, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./product.service\";\nimport * as i3 from \"./category.service\";\nexport class TreeViewService {\n  constructor(http, productService, categoryService) {\n    this.http = http;\n    this.productService = productService;\n    this.categoryService = categoryService;\n    this.products = [];\n    this.categories = [];\n    this.filterEvent = new EventEmitter();\n  }\n  MergeTreeViewData() {\n    return forkJoin(this.productService.getProductList(), this.categoryService.getCategoryList()).pipe(map(([products, categories]) => {\n      return categories.map(category => {\n        const categoryNode = {\n          text: category.categoryName,\n          icon: 'fastfood',\n          items: products.filter(product => product.productCategory === category.categoryName).map(product => ({\n            text: product.productName,\n            icon: 'restaurant'\n          }))\n        };\n        return categoryNode;\n      });\n    }));\n  }\n  static #_ = this.ɵfac = function TreeViewService_Factory(t) {\n    return new (t || TreeViewService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ProductService), i0.ɵɵinject(i3.CategoryService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TreeViewService,\n    factory: TreeViewService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["EventEmitter","forkJoin","map","TreeViewService","constructor","http","productService","categoryService","products","categories","filterEvent","MergeTreeViewData","getProductList","getCategoryList","pipe","category","categoryNode","text","categoryName","icon","items","filter","product","productCategory","productName","_","i0","ɵɵinject","i1","HttpClient","i2","ProductService","i3","CategoryService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Internship\\FoodShopUI\\src\\app\\services\\treeView.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/internal/Observable';\r\nimport { Product } from '../models/Product';\r\nimport { ProductService } from './product.service';\r\nimport { CategoryService } from './category.service';\r\nimport { Category } from '../models/Category';\r\nimport { forkJoin, map } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TreeViewService {\r\n    products: Product[] = [];\r\n    categories: Category[] = [];\r\n    minPrice !: number;\r\n    maxPrice !: number;\r\n    public filterEvent = new EventEmitter<{ minPrice: number | undefined, maxPrice: number | undefined }>();\r\n\r\n    constructor(private http: HttpClient, private productService: ProductService, private categoryService: CategoryService) { }\r\n\r\n    public MergeTreeViewData(): Observable<any> {\r\n        return forkJoin(\r\n            this.productService.getProductList(),\r\n            this.categoryService.getCategoryList()\r\n        ).pipe(\r\n            map(([products, categories]) => {\r\n                return categories.map(category => {\r\n                    const categoryNode = {\r\n                        text: category.categoryName, icon: 'fastfood',\r\n                        items: products\r\n                            .filter(product => product.productCategory === category.categoryName)\r\n                            .map(product => ({\r\n                                text: product.productName,\r\n                                icon: 'restaurant'\r\n                            }))\r\n                    };\r\n                    return categoryNode;\r\n                });\r\n            })\r\n        )\r\n    }    \r\n    \r\n}"],"mappings":"AAAA,SAASA,YAAY,QAAoB,eAAe;AAOxD,SAASC,QAAQ,EAAEC,GAAG,QAAQ,MAAM;;;;;AAKpC,OAAM,MAAOC,eAAe;EAOxBC,YAAoBC,IAAgB,EAAUC,cAA8B,EAAUC,eAAgC;IAAlG,KAAAF,IAAI,GAAJA,IAAI;IAAsB,KAAAC,cAAc,GAAdA,cAAc;IAA0B,KAAAC,eAAe,GAAfA,eAAe;IANrG,KAAAC,QAAQ,GAAc,EAAE;IACxB,KAAAC,UAAU,GAAe,EAAE;IAGpB,KAAAC,WAAW,GAAG,IAAIV,YAAY,EAAkE;EAEmB;EAEnHW,iBAAiBA,CAAA;IACpB,OAAOV,QAAQ,CACX,IAAI,CAACK,cAAc,CAACM,cAAc,EAAE,EACpC,IAAI,CAACL,eAAe,CAACM,eAAe,EAAE,CACzC,CAACC,IAAI,CACFZ,GAAG,CAAC,CAAC,CAACM,QAAQ,EAAEC,UAAU,CAAC,KAAI;MAC3B,OAAOA,UAAU,CAACP,GAAG,CAACa,QAAQ,IAAG;QAC7B,MAAMC,YAAY,GAAG;UACjBC,IAAI,EAAEF,QAAQ,CAACG,YAAY;UAAEC,IAAI,EAAE,UAAU;UAC7CC,KAAK,EAAEZ,QAAQ,CACVa,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACC,eAAe,KAAKR,QAAQ,CAACG,YAAY,CAAC,CACpEhB,GAAG,CAACoB,OAAO,KAAK;YACbL,IAAI,EAAEK,OAAO,CAACE,WAAW;YACzBL,IAAI,EAAE;WACT,CAAC;SACT;QACD,OAAOH,YAAY;MACvB,CAAC,CAAC;IACN,CAAC,CAAC,CACL;EACL;EAAC,QAAAS,CAAA,G;qBA7BQtB,eAAe,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,cAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,eAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAf/B,eAAe;IAAAgC,OAAA,EAAfhC,eAAe,CAAAiC,IAAA;IAAAC,UAAA,EAFZ;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}