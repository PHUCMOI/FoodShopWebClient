{"ast":null,"code":"import Axis from './axis';\nimport AxisLabel from './axis-label';\nimport Box from './box';\nimport { BLACK, DEFAULT_PRECISION, COORD_PRECISION } from '../common/constants';\nimport { deepExtend, defined, limitValue, round, setDefaultOptions, valueOrDefault } from '../common';\nimport autoMajorUnit from './utils/auto-major-unit';\nimport autoAxisMin from './utils/auto-axis-min';\nimport autoAxisMax from './utils/auto-axis-max';\nimport floor from './utils/floor';\nimport ceil from './utils/ceil';\nimport limitCoordinate from './utils/limit-coordinate';\nconst MIN_VALUE_RANGE = Math.pow(10, -DEFAULT_PRECISION + 1);\nclass NumericAxis extends Axis {\n  constructor(seriesMin, seriesMax, options, chartService) {\n    super(Object.assign({}, options, {\n      seriesMin: seriesMin,\n      seriesMax: seriesMax\n    }), chartService);\n  }\n  initUserOptions(options) {\n    const autoOptions = autoAxisOptions(options.seriesMin, options.seriesMax, options);\n    this.totalOptions = totalAxisOptions(autoOptions, options);\n    return axisOptions(autoOptions, options);\n  }\n  initFields() {\n    this.totalMin = this.totalOptions.min;\n    this.totalMax = this.totalOptions.max;\n    this.totalMajorUnit = this.totalOptions.majorUnit;\n    this.seriesMin = this.options.seriesMin;\n    this.seriesMax = this.options.seriesMax;\n  }\n  clone() {\n    return new NumericAxis(this.seriesMin, this.seriesMax, Object.assign({}, this.options), this.chartService);\n  }\n  startValue() {\n    return 0;\n  }\n  range() {\n    const options = this.options;\n    return {\n      min: options.min,\n      max: options.max\n    };\n  }\n  getDivisions(stepValue) {\n    if (stepValue === 0) {\n      return 1;\n    }\n    const options = this.options;\n    const range = options.max - options.min;\n    return Math.floor(round(range / stepValue, COORD_PRECISION)) + 1;\n  }\n  getTickPositions(unit, skipUnit) {\n    const options = this.options;\n    const {\n      axisDir,\n      axisOrigin,\n      lineBox,\n      lineSize\n    } = this.lineInfo();\n    const range = options.max - options.min;\n    const scale = lineSize / range;\n    const step = unit * scale;\n    const divisions = this.getDivisions(unit);\n    const positions = [];\n    let pos = lineBox[axisOrigin];\n    let skipStep = 0;\n    if (skipUnit) {\n      skipStep = skipUnit / unit;\n    }\n    for (let idx = 0; idx < divisions; idx++) {\n      if (idx % skipStep !== 0) {\n        positions.push(round(pos, COORD_PRECISION));\n      }\n      pos = pos + step * axisDir;\n    }\n    return positions;\n  }\n  getMajorTickPositions() {\n    return this.getTickPositions(this.options.majorUnit);\n  }\n  getMinorTickPositions() {\n    return this.getTickPositions(this.options.minorUnit);\n  }\n  getSlot(a, b, limit = false) {\n    const options = this.options;\n    const {\n      axis,\n      axisDir,\n      lineBox,\n      lineSize,\n      lineStart\n    } = this.lineInfo();\n    const step = axisDir * (lineSize / (options.max - options.min));\n    let start = valueOrDefault(a, b || 0);\n    let end = valueOrDefault(b, a || 0);\n    if (limit) {\n      start = limitValue(start, options.min, options.max);\n      end = limitValue(end, options.min, options.max);\n    }\n    const p1 = Math.min(start, end) - options.min;\n    const p2 = Math.max(start, end) - options.min;\n    const slotBox = new Box(lineBox.x1, lineBox.y1, lineBox.x1, lineBox.y1);\n    slotBox[axis + 1] = limitCoordinate(lineStart + step * (axisDir > 0 ? p1 : p2));\n    slotBox[axis + 2] = limitCoordinate(lineStart + step * (axisDir > 0 ? p2 : p1));\n    return slotBox;\n  }\n  getValue(point) {\n    const options = this.options;\n    const max = Number(options.max);\n    const min = Number(options.min);\n    const offset = this.pointOffset(point);\n    const valueOffset = offset * (max - min);\n    if (offset < 0 || offset > 1) {\n      return null;\n    }\n    const value = min + valueOffset;\n    return round(value, DEFAULT_PRECISION);\n  }\n  translateRange(delta) {\n    const options = this.options;\n    const {\n      vertical,\n      reverse,\n      max,\n      min\n    } = options;\n    const {\n      lineSize\n    } = this.lineInfo();\n    const range = max - min;\n    const scale = lineSize / range;\n    let offset = round(delta / scale, DEFAULT_PRECISION);\n    if ((vertical || reverse) && !(vertical && reverse)) {\n      offset = -offset;\n    }\n    return {\n      min: min + offset,\n      max: max + offset,\n      offset: offset\n    };\n  }\n  labelsCount() {\n    return this.getDivisions(this.options.majorUnit);\n  }\n  createAxisLabel(index, labelOptions, labelContext) {\n    const options = this.options;\n    const value = round(options.min + index * options.majorUnit, DEFAULT_PRECISION);\n    const text = this.axisLabelText(value, labelOptions, labelContext);\n    return new AxisLabel(value, text, index, null, labelOptions);\n  }\n  shouldRenderNote(value) {\n    const range = this.range();\n    return range.min <= value && value <= range.max;\n  }\n  pan(delta) {\n    const range = this.translateRange(delta);\n    return this.limitRange(range.min, range.max, this.totalMin, this.totalMax, range.offset);\n  }\n  pointsRange(start, end) {\n    const startValue = this.getValue(start);\n    const endValue = this.getValue(end);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    if (this.isValidRange(min, max)) {\n      return {\n        min: min,\n        max: max\n      };\n    }\n  }\n  scaleRange(scale, cursor) {\n    const position = Math.abs(this.pointOffset(cursor));\n    const range = this.options.max - this.options.min;\n    const delta = this.scaleToDelta(scale, range);\n    const minDelta = position * delta;\n    const maxDelta = (1 - position) * delta;\n    const min = round(this.options.min + minDelta, DEFAULT_PRECISION);\n    let max = round(this.options.max - maxDelta, DEFAULT_PRECISION);\n    if (max - min < MIN_VALUE_RANGE) {\n      max = min + MIN_VALUE_RANGE;\n    }\n    return {\n      min: min,\n      max: max\n    };\n  }\n  zoomRange(scale, cursor) {\n    const {\n      totalMin,\n      totalMax\n    } = this;\n    const range = this.scaleRange(scale, cursor);\n    return {\n      min: limitValue(range.min, totalMin, totalMax),\n      max: limitValue(range.max, totalMin, totalMax),\n      narrowRange: false\n    };\n  }\n  isValidRange(min, max) {\n    return max - min > MIN_VALUE_RANGE;\n  }\n}\nfunction autoAxisOptions(seriesMin, seriesMax, options) {\n  const narrowRange = options.narrowRange;\n  let autoMin = autoAxisMin(seriesMin, seriesMax, narrowRange);\n  let autoMax = autoAxisMax(seriesMin, seriesMax, narrowRange);\n  const majorUnit = autoMajorUnit(autoMin, autoMax);\n  const autoOptions = {\n    majorUnit: majorUnit\n  };\n  if (options.roundToMajorUnit !== false) {\n    if (autoMin < 0 && remainderClose(autoMin, majorUnit, 1 / 3)) {\n      autoMin -= majorUnit;\n    }\n    if (autoMax > 0 && remainderClose(autoMax, majorUnit, 1 / 3)) {\n      autoMax += majorUnit;\n    }\n  }\n  autoOptions.min = floor(autoMin, majorUnit);\n  autoOptions.max = ceil(autoMax, majorUnit);\n  return autoOptions;\n}\nfunction totalAxisOptions(autoOptions, options) {\n  return {\n    min: defined(options.min) ? Math.min(autoOptions.min, options.min) : autoOptions.min,\n    max: defined(options.max) ? Math.max(autoOptions.max, options.max) : autoOptions.max,\n    majorUnit: autoOptions.majorUnit\n  };\n}\nfunction clearNullValues(options, fields) {\n  for (let idx = 0; idx < fields.length; idx++) {\n    const field = fields[idx];\n    if (options[field] === null) {\n      options[field] = undefined;\n    }\n  }\n}\nfunction axisOptions(autoOptions, userOptions) {\n  let options = userOptions;\n  let userSetMin, userSetMax;\n  if (userOptions) {\n    clearNullValues(userOptions, ['min', 'max']);\n    userSetMin = defined(userOptions.min);\n    userSetMax = defined(userOptions.max);\n    const userSetLimits = userSetMin || userSetMax;\n    if (userSetLimits) {\n      if (userOptions.min === userOptions.max) {\n        if (userOptions.min > 0) {\n          userOptions.min = 0;\n        } else {\n          userOptions.max = 1;\n        }\n      }\n    }\n    if (userOptions.majorUnit) {\n      autoOptions.min = floor(autoOptions.min, userOptions.majorUnit);\n      autoOptions.max = ceil(autoOptions.max, userOptions.majorUnit);\n    } else if (userSetLimits) {\n      options = deepExtend(autoOptions, userOptions);\n\n      // Determine an auto major unit after min/max have been set\n      autoOptions.majorUnit = autoMajorUnit(options.min, options.max);\n    }\n  }\n  autoOptions.minorUnit = (options.majorUnit || autoOptions.majorUnit) / 5;\n  const result = deepExtend(autoOptions, options);\n  if (result.min >= result.max) {\n    if (userSetMin && !userSetMax) {\n      result.max = result.min + result.majorUnit;\n    } else if (!userSetMin && userSetMax) {\n      result.min = result.max - result.majorUnit;\n    }\n  }\n  return result;\n}\nfunction remainderClose(value, divisor, ratio) {\n  const remainder = round(Math.abs(value % divisor), DEFAULT_PRECISION);\n  const threshold = divisor * (1 - ratio);\n  return remainder === 0 || remainder > threshold;\n}\nsetDefaultOptions(NumericAxis, {\n  type: \"numeric\",\n  min: 0,\n  max: 1,\n  vertical: true,\n  majorGridLines: {\n    visible: true,\n    width: 1,\n    color: BLACK\n  },\n  labels: {\n    format: \"#.####################\"\n  },\n  zIndex: 1\n});\nexport default NumericAxis;","map":{"version":3,"names":["Axis","AxisLabel","Box","BLACK","DEFAULT_PRECISION","COORD_PRECISION","deepExtend","defined","limitValue","round","setDefaultOptions","valueOrDefault","autoMajorUnit","autoAxisMin","autoAxisMax","floor","ceil","limitCoordinate","MIN_VALUE_RANGE","Math","pow","NumericAxis","constructor","seriesMin","seriesMax","options","chartService","Object","assign","initUserOptions","autoOptions","autoAxisOptions","totalOptions","totalAxisOptions","axisOptions","initFields","totalMin","min","totalMax","max","totalMajorUnit","majorUnit","clone","startValue","range","getDivisions","stepValue","getTickPositions","unit","skipUnit","axisDir","axisOrigin","lineBox","lineSize","lineInfo","scale","step","divisions","positions","pos","skipStep","idx","push","getMajorTickPositions","getMinorTickPositions","minorUnit","getSlot","a","b","limit","axis","lineStart","start","end","p1","p2","slotBox","x1","y1","getValue","point","Number","offset","pointOffset","valueOffset","value","translateRange","delta","vertical","reverse","labelsCount","createAxisLabel","index","labelOptions","labelContext","text","axisLabelText","shouldRenderNote","pan","limitRange","pointsRange","endValue","isValidRange","scaleRange","cursor","position","abs","scaleToDelta","minDelta","maxDelta","zoomRange","narrowRange","autoMin","autoMax","roundToMajorUnit","remainderClose","clearNullValues","fields","length","field","undefined","userOptions","userSetMin","userSetMax","userSetLimits","result","divisor","ratio","remainder","threshold","type","majorGridLines","visible","width","color","labels","format","zIndex"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-charts/dist/es2015/core/numeric-axis.js"],"sourcesContent":["\nimport Axis from './axis';\nimport AxisLabel from './axis-label';\nimport Box from './box';\n\nimport { BLACK, DEFAULT_PRECISION, COORD_PRECISION } from '../common/constants';\nimport { deepExtend, defined, limitValue, round, setDefaultOptions, valueOrDefault } from '../common';\n\nimport autoMajorUnit from './utils/auto-major-unit';\nimport autoAxisMin from './utils/auto-axis-min';\nimport autoAxisMax from './utils/auto-axis-max';\nimport floor from './utils/floor';\nimport ceil from './utils/ceil';\nimport limitCoordinate from './utils/limit-coordinate';\n\nconst MIN_VALUE_RANGE = Math.pow(10, -DEFAULT_PRECISION + 1);\n\nclass NumericAxis extends Axis {\n\n    constructor(seriesMin, seriesMax, options, chartService) {\n        super(Object.assign({}, options, {\n            seriesMin: seriesMin,\n            seriesMax: seriesMax\n        }), chartService);\n    }\n\n    initUserOptions(options) {\n        const autoOptions = autoAxisOptions(options.seriesMin, options.seriesMax, options);\n        this.totalOptions = totalAxisOptions(autoOptions, options);\n\n        return axisOptions(autoOptions, options);\n    }\n\n    initFields() {\n        this.totalMin = this.totalOptions.min;\n        this.totalMax = this.totalOptions.max;\n        this.totalMajorUnit = this.totalOptions.majorUnit;\n        this.seriesMin = this.options.seriesMin;\n        this.seriesMax = this.options.seriesMax;\n    }\n\n    clone() {\n        return new NumericAxis(\n            this.seriesMin,\n            this.seriesMax,\n            Object.assign({}, this.options),\n            this.chartService\n        );\n    }\n\n    startValue() {\n        return 0;\n    }\n\n    range() {\n        const options = this.options;\n        return { min: options.min, max: options.max };\n    }\n\n    getDivisions(stepValue) {\n        if (stepValue === 0) {\n            return 1;\n        }\n\n        const options = this.options;\n        const range = options.max - options.min;\n\n        return Math.floor(round(range / stepValue, COORD_PRECISION)) + 1;\n    }\n\n    getTickPositions(unit, skipUnit) {\n        const options = this.options;\n        const { axisDir, axisOrigin, lineBox, lineSize } = this.lineInfo();\n        const range = options.max - options.min;\n        const scale = lineSize / range;\n        const step = unit * scale;\n        const divisions = this.getDivisions(unit);\n        const positions = [];\n        let pos = lineBox[axisOrigin];\n        let skipStep = 0;\n\n        if (skipUnit) {\n            skipStep = skipUnit / unit;\n        }\n\n        for (let idx = 0; idx < divisions; idx++) {\n            if (idx % skipStep !== 0) {\n                positions.push(round(pos, COORD_PRECISION));\n            }\n\n            pos = pos + step * axisDir;\n        }\n\n        return positions;\n    }\n\n    getMajorTickPositions() {\n        return this.getTickPositions(this.options.majorUnit);\n    }\n\n    getMinorTickPositions() {\n        return this.getTickPositions(this.options.minorUnit);\n    }\n\n    getSlot(a, b, limit = false) {\n        const options = this.options;\n        const { axis, axisDir, lineBox, lineSize, lineStart } = this.lineInfo();\n        const step = axisDir * (lineSize / (options.max - options.min));\n\n        let start = valueOrDefault(a, b || 0);\n        let end = valueOrDefault(b, a || 0);\n\n        if (limit) {\n            start = limitValue(start, options.min, options.max);\n            end = limitValue(end, options.min, options.max);\n        }\n\n        const p1 = Math.min(start, end) - options.min;\n        const p2 = Math.max(start, end) - options.min;\n\n        const slotBox = new Box(lineBox.x1, lineBox.y1, lineBox.x1, lineBox.y1);\n        slotBox[axis + 1] = limitCoordinate(lineStart + step * (axisDir > 0 ? p1 : p2));\n        slotBox[axis + 2] = limitCoordinate(lineStart + step * (axisDir > 0 ? p2 : p1));\n\n        return slotBox;\n    }\n\n    getValue(point) {\n        const options = this.options;\n        const max = Number(options.max);\n        const min = Number(options.min);\n        const offset = this.pointOffset(point);\n        const valueOffset = offset * (max - min);\n\n        if (offset < 0 || offset > 1) {\n            return null;\n        }\n\n        const value = min + valueOffset;\n        return round(value, DEFAULT_PRECISION);\n    }\n\n    translateRange(delta) {\n        const options = this.options;\n        const { vertical, reverse, max, min } = options;\n        const { lineSize } = this.lineInfo();\n        const range = max - min;\n        const scale = lineSize / range;\n        let offset = round(delta / scale, DEFAULT_PRECISION);\n\n        if ((vertical || reverse) && !(vertical && reverse )) {\n            offset = -offset;\n        }\n\n        return {\n            min: min + offset,\n            max: max + offset,\n            offset: offset\n        };\n    }\n\n    labelsCount() {\n        return this.getDivisions(this.options.majorUnit);\n    }\n\n    createAxisLabel(index, labelOptions, labelContext) {\n        const options = this.options;\n        const value = round(options.min + (index * options.majorUnit), DEFAULT_PRECISION);\n        const text = this.axisLabelText(value, labelOptions, labelContext);\n\n        return new AxisLabel(value, text, index, null, labelOptions);\n    }\n\n    shouldRenderNote(value) {\n        const range = this.range();\n        return range.min <= value && value <= range.max;\n    }\n\n    pan(delta) {\n        const range = this.translateRange(delta);\n        return this.limitRange(range.min, range.max, this.totalMin, this.totalMax, range.offset);\n    }\n\n    pointsRange(start, end) {\n        const startValue = this.getValue(start);\n        const endValue = this.getValue(end);\n        const min = Math.min(startValue, endValue);\n        const max = Math.max(startValue, endValue);\n\n        if (this.isValidRange(min, max)) {\n            return {\n                min: min,\n                max: max\n            };\n        }\n    }\n\n    scaleRange(scale, cursor) {\n        const position = Math.abs(this.pointOffset(cursor));\n        const range = this.options.max - this.options.min;\n        const delta = this.scaleToDelta(scale, range);\n        const minDelta = position * delta;\n        const maxDelta = (1 - position) * delta;\n        const min = round(this.options.min + minDelta, DEFAULT_PRECISION);\n        let max = round(this.options.max - maxDelta, DEFAULT_PRECISION);\n\n        if (max - min < MIN_VALUE_RANGE) {\n            max = min + MIN_VALUE_RANGE;\n        }\n\n        return {\n            min: min,\n            max: max\n        };\n    }\n\n    zoomRange(scale, cursor) {\n        const { totalMin, totalMax } = this;\n        const range = this.scaleRange(scale, cursor);\n\n        return {\n            min: limitValue(range.min, totalMin, totalMax),\n            max: limitValue(range.max, totalMin, totalMax),\n            narrowRange: false\n        };\n    }\n\n    isValidRange(min, max) {\n        return max - min > MIN_VALUE_RANGE;\n    }\n}\n\nfunction autoAxisOptions(seriesMin, seriesMax, options) {\n    const narrowRange = options.narrowRange;\n\n    let autoMin = autoAxisMin(seriesMin, seriesMax, narrowRange);\n    let autoMax = autoAxisMax(seriesMin, seriesMax, narrowRange);\n\n    const majorUnit = autoMajorUnit(autoMin, autoMax);\n    const autoOptions = {\n        majorUnit: majorUnit\n    };\n\n    if (options.roundToMajorUnit !== false) {\n        if (autoMin < 0 && remainderClose(autoMin, majorUnit, 1 / 3)) {\n            autoMin -= majorUnit;\n        }\n\n        if (autoMax > 0 && remainderClose(autoMax, majorUnit, 1 / 3)) {\n            autoMax += majorUnit;\n        }\n    }\n\n    autoOptions.min = floor(autoMin, majorUnit);\n    autoOptions.max = ceil(autoMax, majorUnit);\n\n    return autoOptions;\n}\n\nfunction totalAxisOptions(autoOptions, options) {\n    return {\n        min: defined(options.min) ? Math.min(autoOptions.min, options.min) : autoOptions.min,\n        max: defined(options.max) ? Math.max(autoOptions.max, options.max) : autoOptions.max,\n        majorUnit: autoOptions.majorUnit\n    };\n}\n\nfunction clearNullValues(options, fields) {\n    for (let idx = 0; idx < fields.length; idx++) {\n        const field = fields[idx];\n        if (options[field] === null) {\n            options[field] = undefined;\n        }\n    }\n}\n\nfunction axisOptions(autoOptions, userOptions) {\n    let options = userOptions;\n    let userSetMin, userSetMax;\n\n    if (userOptions) {\n        clearNullValues(userOptions, [ 'min', 'max' ]);\n\n        userSetMin = defined(userOptions.min);\n        userSetMax = defined(userOptions.max);\n\n        const userSetLimits = userSetMin || userSetMax;\n\n        if (userSetLimits) {\n            if (userOptions.min === userOptions.max) {\n                if (userOptions.min > 0) {\n                    userOptions.min = 0;\n                } else {\n                    userOptions.max = 1;\n                }\n            }\n        }\n\n        if (userOptions.majorUnit) {\n            autoOptions.min = floor(autoOptions.min, userOptions.majorUnit);\n            autoOptions.max = ceil(autoOptions.max, userOptions.majorUnit);\n        } else if (userSetLimits) {\n            options = deepExtend(autoOptions, userOptions);\n\n            // Determine an auto major unit after min/max have been set\n            autoOptions.majorUnit = autoMajorUnit(options.min, options.max);\n        }\n    }\n\n    autoOptions.minorUnit = (options.majorUnit || autoOptions.majorUnit) / 5;\n\n    const result = deepExtend(autoOptions, options);\n    if (result.min >= result.max) {\n        if (userSetMin && !userSetMax) {\n            result.max = result.min + result.majorUnit;\n        } else if (!userSetMin && userSetMax) {\n            result.min = result.max - result.majorUnit;\n        }\n    }\n\n    return result;\n}\n\nfunction remainderClose(value, divisor, ratio) {\n    const remainder = round(Math.abs(value % divisor), DEFAULT_PRECISION);\n    const threshold = divisor * (1 - ratio);\n\n    return remainder === 0 || remainder > threshold;\n}\n\nsetDefaultOptions(NumericAxis, {\n    type: \"numeric\",\n    min: 0,\n    max: 1,\n    vertical: true,\n    majorGridLines: {\n        visible: true,\n        width: 1,\n        color: BLACK\n    },\n    labels: {\n        format: \"#.####################\"\n    },\n    zIndex: 1\n});\n\nexport default NumericAxis;\n"],"mappings":"AACA,OAAOA,IAAI,MAAM,QAAQ;AACzB,OAAOC,SAAS,MAAM,cAAc;AACpC,OAAOC,GAAG,MAAM,OAAO;AAEvB,SAASC,KAAK,EAAEC,iBAAiB,EAAEC,eAAe,QAAQ,qBAAqB;AAC/E,SAASC,UAAU,EAAEC,OAAO,EAAEC,UAAU,EAAEC,KAAK,EAAEC,iBAAiB,EAAEC,cAAc,QAAQ,WAAW;AAErG,OAAOC,aAAa,MAAM,yBAAyB;AACnD,OAAOC,WAAW,MAAM,uBAAuB;AAC/C,OAAOC,WAAW,MAAM,uBAAuB;AAC/C,OAAOC,KAAK,MAAM,eAAe;AACjC,OAAOC,IAAI,MAAM,cAAc;AAC/B,OAAOC,eAAe,MAAM,0BAA0B;AAEtD,MAAMC,eAAe,GAAGC,IAAI,CAACC,GAAG,CAAC,EAAE,EAAE,CAAChB,iBAAiB,GAAG,CAAC,CAAC;AAE5D,MAAMiB,WAAW,SAASrB,IAAI,CAAC;EAE3BsB,WAAWA,CAACC,SAAS,EAAEC,SAAS,EAAEC,OAAO,EAAEC,YAAY,EAAE;IACrD,KAAK,CAACC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEH,OAAO,EAAE;MAC7BF,SAAS,EAAEA,SAAS;MACpBC,SAAS,EAAEA;IACf,CAAC,CAAC,EAAEE,YAAY,CAAC;EACrB;EAEAG,eAAeA,CAACJ,OAAO,EAAE;IACrB,MAAMK,WAAW,GAAGC,eAAe,CAACN,OAAO,CAACF,SAAS,EAAEE,OAAO,CAACD,SAAS,EAAEC,OAAO,CAAC;IAClF,IAAI,CAACO,YAAY,GAAGC,gBAAgB,CAACH,WAAW,EAAEL,OAAO,CAAC;IAE1D,OAAOS,WAAW,CAACJ,WAAW,EAAEL,OAAO,CAAC;EAC5C;EAEAU,UAAUA,CAAA,EAAG;IACT,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACJ,YAAY,CAACK,GAAG;IACrC,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACN,YAAY,CAACO,GAAG;IACrC,IAAI,CAACC,cAAc,GAAG,IAAI,CAACR,YAAY,CAACS,SAAS;IACjD,IAAI,CAAClB,SAAS,GAAG,IAAI,CAACE,OAAO,CAACF,SAAS;IACvC,IAAI,CAACC,SAAS,GAAG,IAAI,CAACC,OAAO,CAACD,SAAS;EAC3C;EAEAkB,KAAKA,CAAA,EAAG;IACJ,OAAO,IAAIrB,WAAW,CAClB,IAAI,CAACE,SAAS,EACd,IAAI,CAACC,SAAS,EACdG,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAACH,OAAO,CAAC,EAC/B,IAAI,CAACC,YACT,CAAC;EACL;EAEAiB,UAAUA,CAAA,EAAG;IACT,OAAO,CAAC;EACZ;EAEAC,KAAKA,CAAA,EAAG;IACJ,MAAMnB,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,OAAO;MAAEY,GAAG,EAAEZ,OAAO,CAACY,GAAG;MAAEE,GAAG,EAAEd,OAAO,CAACc;IAAI,CAAC;EACjD;EAEAM,YAAYA,CAACC,SAAS,EAAE;IACpB,IAAIA,SAAS,KAAK,CAAC,EAAE;MACjB,OAAO,CAAC;IACZ;IAEA,MAAMrB,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,MAAMmB,KAAK,GAAGnB,OAAO,CAACc,GAAG,GAAGd,OAAO,CAACY,GAAG;IAEvC,OAAOlB,IAAI,CAACJ,KAAK,CAACN,KAAK,CAACmC,KAAK,GAAGE,SAAS,EAAEzC,eAAe,CAAC,CAAC,GAAG,CAAC;EACpE;EAEA0C,gBAAgBA,CAACC,IAAI,EAAEC,QAAQ,EAAE;IAC7B,MAAMxB,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,MAAM;MAAEyB,OAAO;MAAEC,UAAU;MAAEC,OAAO;MAAEC;IAAS,CAAC,GAAG,IAAI,CAACC,QAAQ,CAAC,CAAC;IAClE,MAAMV,KAAK,GAAGnB,OAAO,CAACc,GAAG,GAAGd,OAAO,CAACY,GAAG;IACvC,MAAMkB,KAAK,GAAGF,QAAQ,GAAGT,KAAK;IAC9B,MAAMY,IAAI,GAAGR,IAAI,GAAGO,KAAK;IACzB,MAAME,SAAS,GAAG,IAAI,CAACZ,YAAY,CAACG,IAAI,CAAC;IACzC,MAAMU,SAAS,GAAG,EAAE;IACpB,IAAIC,GAAG,GAAGP,OAAO,CAACD,UAAU,CAAC;IAC7B,IAAIS,QAAQ,GAAG,CAAC;IAEhB,IAAIX,QAAQ,EAAE;MACVW,QAAQ,GAAGX,QAAQ,GAAGD,IAAI;IAC9B;IAEA,KAAK,IAAIa,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGJ,SAAS,EAAEI,GAAG,EAAE,EAAE;MACtC,IAAIA,GAAG,GAAGD,QAAQ,KAAK,CAAC,EAAE;QACtBF,SAAS,CAACI,IAAI,CAACrD,KAAK,CAACkD,GAAG,EAAEtD,eAAe,CAAC,CAAC;MAC/C;MAEAsD,GAAG,GAAGA,GAAG,GAAGH,IAAI,GAAGN,OAAO;IAC9B;IAEA,OAAOQ,SAAS;EACpB;EAEAK,qBAAqBA,CAAA,EAAG;IACpB,OAAO,IAAI,CAAChB,gBAAgB,CAAC,IAAI,CAACtB,OAAO,CAACgB,SAAS,CAAC;EACxD;EAEAuB,qBAAqBA,CAAA,EAAG;IACpB,OAAO,IAAI,CAACjB,gBAAgB,CAAC,IAAI,CAACtB,OAAO,CAACwC,SAAS,CAAC;EACxD;EAEAC,OAAOA,CAACC,CAAC,EAAEC,CAAC,EAAEC,KAAK,GAAG,KAAK,EAAE;IACzB,MAAM5C,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,MAAM;MAAE6C,IAAI;MAAEpB,OAAO;MAAEE,OAAO;MAAEC,QAAQ;MAAEkB;IAAU,CAAC,GAAG,IAAI,CAACjB,QAAQ,CAAC,CAAC;IACvE,MAAME,IAAI,GAAGN,OAAO,IAAIG,QAAQ,IAAI5B,OAAO,CAACc,GAAG,GAAGd,OAAO,CAACY,GAAG,CAAC,CAAC;IAE/D,IAAImC,KAAK,GAAG7D,cAAc,CAACwD,CAAC,EAAEC,CAAC,IAAI,CAAC,CAAC;IACrC,IAAIK,GAAG,GAAG9D,cAAc,CAACyD,CAAC,EAAED,CAAC,IAAI,CAAC,CAAC;IAEnC,IAAIE,KAAK,EAAE;MACPG,KAAK,GAAGhE,UAAU,CAACgE,KAAK,EAAE/C,OAAO,CAACY,GAAG,EAAEZ,OAAO,CAACc,GAAG,CAAC;MACnDkC,GAAG,GAAGjE,UAAU,CAACiE,GAAG,EAAEhD,OAAO,CAACY,GAAG,EAAEZ,OAAO,CAACc,GAAG,CAAC;IACnD;IAEA,MAAMmC,EAAE,GAAGvD,IAAI,CAACkB,GAAG,CAACmC,KAAK,EAAEC,GAAG,CAAC,GAAGhD,OAAO,CAACY,GAAG;IAC7C,MAAMsC,EAAE,GAAGxD,IAAI,CAACoB,GAAG,CAACiC,KAAK,EAAEC,GAAG,CAAC,GAAGhD,OAAO,CAACY,GAAG;IAE7C,MAAMuC,OAAO,GAAG,IAAI1E,GAAG,CAACkD,OAAO,CAACyB,EAAE,EAAEzB,OAAO,CAAC0B,EAAE,EAAE1B,OAAO,CAACyB,EAAE,EAAEzB,OAAO,CAAC0B,EAAE,CAAC;IACvEF,OAAO,CAACN,IAAI,GAAG,CAAC,CAAC,GAAGrD,eAAe,CAACsD,SAAS,GAAGf,IAAI,IAAIN,OAAO,GAAG,CAAC,GAAGwB,EAAE,GAAGC,EAAE,CAAC,CAAC;IAC/EC,OAAO,CAACN,IAAI,GAAG,CAAC,CAAC,GAAGrD,eAAe,CAACsD,SAAS,GAAGf,IAAI,IAAIN,OAAO,GAAG,CAAC,GAAGyB,EAAE,GAAGD,EAAE,CAAC,CAAC;IAE/E,OAAOE,OAAO;EAClB;EAEAG,QAAQA,CAACC,KAAK,EAAE;IACZ,MAAMvD,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,MAAMc,GAAG,GAAG0C,MAAM,CAACxD,OAAO,CAACc,GAAG,CAAC;IAC/B,MAAMF,GAAG,GAAG4C,MAAM,CAACxD,OAAO,CAACY,GAAG,CAAC;IAC/B,MAAM6C,MAAM,GAAG,IAAI,CAACC,WAAW,CAACH,KAAK,CAAC;IACtC,MAAMI,WAAW,GAAGF,MAAM,IAAI3C,GAAG,GAAGF,GAAG,CAAC;IAExC,IAAI6C,MAAM,GAAG,CAAC,IAAIA,MAAM,GAAG,CAAC,EAAE;MAC1B,OAAO,IAAI;IACf;IAEA,MAAMG,KAAK,GAAGhD,GAAG,GAAG+C,WAAW;IAC/B,OAAO3E,KAAK,CAAC4E,KAAK,EAAEjF,iBAAiB,CAAC;EAC1C;EAEAkF,cAAcA,CAACC,KAAK,EAAE;IAClB,MAAM9D,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,MAAM;MAAE+D,QAAQ;MAAEC,OAAO;MAAElD,GAAG;MAAEF;IAAI,CAAC,GAAGZ,OAAO;IAC/C,MAAM;MAAE4B;IAAS,CAAC,GAAG,IAAI,CAACC,QAAQ,CAAC,CAAC;IACpC,MAAMV,KAAK,GAAGL,GAAG,GAAGF,GAAG;IACvB,MAAMkB,KAAK,GAAGF,QAAQ,GAAGT,KAAK;IAC9B,IAAIsC,MAAM,GAAGzE,KAAK,CAAC8E,KAAK,GAAGhC,KAAK,EAAEnD,iBAAiB,CAAC;IAEpD,IAAI,CAACoF,QAAQ,IAAIC,OAAO,KAAK,EAAED,QAAQ,IAAIC,OAAO,CAAE,EAAE;MAClDP,MAAM,GAAG,CAACA,MAAM;IACpB;IAEA,OAAO;MACH7C,GAAG,EAAEA,GAAG,GAAG6C,MAAM;MACjB3C,GAAG,EAAEA,GAAG,GAAG2C,MAAM;MACjBA,MAAM,EAAEA;IACZ,CAAC;EACL;EAEAQ,WAAWA,CAAA,EAAG;IACV,OAAO,IAAI,CAAC7C,YAAY,CAAC,IAAI,CAACpB,OAAO,CAACgB,SAAS,CAAC;EACpD;EAEAkD,eAAeA,CAACC,KAAK,EAAEC,YAAY,EAAEC,YAAY,EAAE;IAC/C,MAAMrE,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,MAAM4D,KAAK,GAAG5E,KAAK,CAACgB,OAAO,CAACY,GAAG,GAAIuD,KAAK,GAAGnE,OAAO,CAACgB,SAAU,EAAErC,iBAAiB,CAAC;IACjF,MAAM2F,IAAI,GAAG,IAAI,CAACC,aAAa,CAACX,KAAK,EAAEQ,YAAY,EAAEC,YAAY,CAAC;IAElE,OAAO,IAAI7F,SAAS,CAACoF,KAAK,EAAEU,IAAI,EAAEH,KAAK,EAAE,IAAI,EAAEC,YAAY,CAAC;EAChE;EAEAI,gBAAgBA,CAACZ,KAAK,EAAE;IACpB,MAAMzC,KAAK,GAAG,IAAI,CAACA,KAAK,CAAC,CAAC;IAC1B,OAAOA,KAAK,CAACP,GAAG,IAAIgD,KAAK,IAAIA,KAAK,IAAIzC,KAAK,CAACL,GAAG;EACnD;EAEA2D,GAAGA,CAACX,KAAK,EAAE;IACP,MAAM3C,KAAK,GAAG,IAAI,CAAC0C,cAAc,CAACC,KAAK,CAAC;IACxC,OAAO,IAAI,CAACY,UAAU,CAACvD,KAAK,CAACP,GAAG,EAAEO,KAAK,CAACL,GAAG,EAAE,IAAI,CAACH,QAAQ,EAAE,IAAI,CAACE,QAAQ,EAAEM,KAAK,CAACsC,MAAM,CAAC;EAC5F;EAEAkB,WAAWA,CAAC5B,KAAK,EAAEC,GAAG,EAAE;IACpB,MAAM9B,UAAU,GAAG,IAAI,CAACoC,QAAQ,CAACP,KAAK,CAAC;IACvC,MAAM6B,QAAQ,GAAG,IAAI,CAACtB,QAAQ,CAACN,GAAG,CAAC;IACnC,MAAMpC,GAAG,GAAGlB,IAAI,CAACkB,GAAG,CAACM,UAAU,EAAE0D,QAAQ,CAAC;IAC1C,MAAM9D,GAAG,GAAGpB,IAAI,CAACoB,GAAG,CAACI,UAAU,EAAE0D,QAAQ,CAAC;IAE1C,IAAI,IAAI,CAACC,YAAY,CAACjE,GAAG,EAAEE,GAAG,CAAC,EAAE;MAC7B,OAAO;QACHF,GAAG,EAAEA,GAAG;QACRE,GAAG,EAAEA;MACT,CAAC;IACL;EACJ;EAEAgE,UAAUA,CAAChD,KAAK,EAAEiD,MAAM,EAAE;IACtB,MAAMC,QAAQ,GAAGtF,IAAI,CAACuF,GAAG,CAAC,IAAI,CAACvB,WAAW,CAACqB,MAAM,CAAC,CAAC;IACnD,MAAM5D,KAAK,GAAG,IAAI,CAACnB,OAAO,CAACc,GAAG,GAAG,IAAI,CAACd,OAAO,CAACY,GAAG;IACjD,MAAMkD,KAAK,GAAG,IAAI,CAACoB,YAAY,CAACpD,KAAK,EAAEX,KAAK,CAAC;IAC7C,MAAMgE,QAAQ,GAAGH,QAAQ,GAAGlB,KAAK;IACjC,MAAMsB,QAAQ,GAAG,CAAC,CAAC,GAAGJ,QAAQ,IAAIlB,KAAK;IACvC,MAAMlD,GAAG,GAAG5B,KAAK,CAAC,IAAI,CAACgB,OAAO,CAACY,GAAG,GAAGuE,QAAQ,EAAExG,iBAAiB,CAAC;IACjE,IAAImC,GAAG,GAAG9B,KAAK,CAAC,IAAI,CAACgB,OAAO,CAACc,GAAG,GAAGsE,QAAQ,EAAEzG,iBAAiB,CAAC;IAE/D,IAAImC,GAAG,GAAGF,GAAG,GAAGnB,eAAe,EAAE;MAC7BqB,GAAG,GAAGF,GAAG,GAAGnB,eAAe;IAC/B;IAEA,OAAO;MACHmB,GAAG,EAAEA,GAAG;MACRE,GAAG,EAAEA;IACT,CAAC;EACL;EAEAuE,SAASA,CAACvD,KAAK,EAAEiD,MAAM,EAAE;IACrB,MAAM;MAAEpE,QAAQ;MAAEE;IAAS,CAAC,GAAG,IAAI;IACnC,MAAMM,KAAK,GAAG,IAAI,CAAC2D,UAAU,CAAChD,KAAK,EAAEiD,MAAM,CAAC;IAE5C,OAAO;MACHnE,GAAG,EAAE7B,UAAU,CAACoC,KAAK,CAACP,GAAG,EAAED,QAAQ,EAAEE,QAAQ,CAAC;MAC9CC,GAAG,EAAE/B,UAAU,CAACoC,KAAK,CAACL,GAAG,EAAEH,QAAQ,EAAEE,QAAQ,CAAC;MAC9CyE,WAAW,EAAE;IACjB,CAAC;EACL;EAEAT,YAAYA,CAACjE,GAAG,EAAEE,GAAG,EAAE;IACnB,OAAOA,GAAG,GAAGF,GAAG,GAAGnB,eAAe;EACtC;AACJ;AAEA,SAASa,eAAeA,CAACR,SAAS,EAAEC,SAAS,EAAEC,OAAO,EAAE;EACpD,MAAMsF,WAAW,GAAGtF,OAAO,CAACsF,WAAW;EAEvC,IAAIC,OAAO,GAAGnG,WAAW,CAACU,SAAS,EAAEC,SAAS,EAAEuF,WAAW,CAAC;EAC5D,IAAIE,OAAO,GAAGnG,WAAW,CAACS,SAAS,EAAEC,SAAS,EAAEuF,WAAW,CAAC;EAE5D,MAAMtE,SAAS,GAAG7B,aAAa,CAACoG,OAAO,EAAEC,OAAO,CAAC;EACjD,MAAMnF,WAAW,GAAG;IAChBW,SAAS,EAAEA;EACf,CAAC;EAED,IAAIhB,OAAO,CAACyF,gBAAgB,KAAK,KAAK,EAAE;IACpC,IAAIF,OAAO,GAAG,CAAC,IAAIG,cAAc,CAACH,OAAO,EAAEvE,SAAS,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE;MAC1DuE,OAAO,IAAIvE,SAAS;IACxB;IAEA,IAAIwE,OAAO,GAAG,CAAC,IAAIE,cAAc,CAACF,OAAO,EAAExE,SAAS,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE;MAC1DwE,OAAO,IAAIxE,SAAS;IACxB;EACJ;EAEAX,WAAW,CAACO,GAAG,GAAGtB,KAAK,CAACiG,OAAO,EAAEvE,SAAS,CAAC;EAC3CX,WAAW,CAACS,GAAG,GAAGvB,IAAI,CAACiG,OAAO,EAAExE,SAAS,CAAC;EAE1C,OAAOX,WAAW;AACtB;AAEA,SAASG,gBAAgBA,CAACH,WAAW,EAAEL,OAAO,EAAE;EAC5C,OAAO;IACHY,GAAG,EAAE9B,OAAO,CAACkB,OAAO,CAACY,GAAG,CAAC,GAAGlB,IAAI,CAACkB,GAAG,CAACP,WAAW,CAACO,GAAG,EAAEZ,OAAO,CAACY,GAAG,CAAC,GAAGP,WAAW,CAACO,GAAG;IACpFE,GAAG,EAAEhC,OAAO,CAACkB,OAAO,CAACc,GAAG,CAAC,GAAGpB,IAAI,CAACoB,GAAG,CAACT,WAAW,CAACS,GAAG,EAAEd,OAAO,CAACc,GAAG,CAAC,GAAGT,WAAW,CAACS,GAAG;IACpFE,SAAS,EAAEX,WAAW,CAACW;EAC3B,CAAC;AACL;AAEA,SAAS2E,eAAeA,CAAC3F,OAAO,EAAE4F,MAAM,EAAE;EACtC,KAAK,IAAIxD,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGwD,MAAM,CAACC,MAAM,EAAEzD,GAAG,EAAE,EAAE;IAC1C,MAAM0D,KAAK,GAAGF,MAAM,CAACxD,GAAG,CAAC;IACzB,IAAIpC,OAAO,CAAC8F,KAAK,CAAC,KAAK,IAAI,EAAE;MACzB9F,OAAO,CAAC8F,KAAK,CAAC,GAAGC,SAAS;IAC9B;EACJ;AACJ;AAEA,SAAStF,WAAWA,CAACJ,WAAW,EAAE2F,WAAW,EAAE;EAC3C,IAAIhG,OAAO,GAAGgG,WAAW;EACzB,IAAIC,UAAU,EAAEC,UAAU;EAE1B,IAAIF,WAAW,EAAE;IACbL,eAAe,CAACK,WAAW,EAAE,CAAE,KAAK,EAAE,KAAK,CAAE,CAAC;IAE9CC,UAAU,GAAGnH,OAAO,CAACkH,WAAW,CAACpF,GAAG,CAAC;IACrCsF,UAAU,GAAGpH,OAAO,CAACkH,WAAW,CAAClF,GAAG,CAAC;IAErC,MAAMqF,aAAa,GAAGF,UAAU,IAAIC,UAAU;IAE9C,IAAIC,aAAa,EAAE;MACf,IAAIH,WAAW,CAACpF,GAAG,KAAKoF,WAAW,CAAClF,GAAG,EAAE;QACrC,IAAIkF,WAAW,CAACpF,GAAG,GAAG,CAAC,EAAE;UACrBoF,WAAW,CAACpF,GAAG,GAAG,CAAC;QACvB,CAAC,MAAM;UACHoF,WAAW,CAAClF,GAAG,GAAG,CAAC;QACvB;MACJ;IACJ;IAEA,IAAIkF,WAAW,CAAChF,SAAS,EAAE;MACvBX,WAAW,CAACO,GAAG,GAAGtB,KAAK,CAACe,WAAW,CAACO,GAAG,EAAEoF,WAAW,CAAChF,SAAS,CAAC;MAC/DX,WAAW,CAACS,GAAG,GAAGvB,IAAI,CAACc,WAAW,CAACS,GAAG,EAAEkF,WAAW,CAAChF,SAAS,CAAC;IAClE,CAAC,MAAM,IAAImF,aAAa,EAAE;MACtBnG,OAAO,GAAGnB,UAAU,CAACwB,WAAW,EAAE2F,WAAW,CAAC;;MAE9C;MACA3F,WAAW,CAACW,SAAS,GAAG7B,aAAa,CAACa,OAAO,CAACY,GAAG,EAAEZ,OAAO,CAACc,GAAG,CAAC;IACnE;EACJ;EAEAT,WAAW,CAACmC,SAAS,GAAG,CAACxC,OAAO,CAACgB,SAAS,IAAIX,WAAW,CAACW,SAAS,IAAI,CAAC;EAExE,MAAMoF,MAAM,GAAGvH,UAAU,CAACwB,WAAW,EAAEL,OAAO,CAAC;EAC/C,IAAIoG,MAAM,CAACxF,GAAG,IAAIwF,MAAM,CAACtF,GAAG,EAAE;IAC1B,IAAImF,UAAU,IAAI,CAACC,UAAU,EAAE;MAC3BE,MAAM,CAACtF,GAAG,GAAGsF,MAAM,CAACxF,GAAG,GAAGwF,MAAM,CAACpF,SAAS;IAC9C,CAAC,MAAM,IAAI,CAACiF,UAAU,IAAIC,UAAU,EAAE;MAClCE,MAAM,CAACxF,GAAG,GAAGwF,MAAM,CAACtF,GAAG,GAAGsF,MAAM,CAACpF,SAAS;IAC9C;EACJ;EAEA,OAAOoF,MAAM;AACjB;AAEA,SAASV,cAAcA,CAAC9B,KAAK,EAAEyC,OAAO,EAAEC,KAAK,EAAE;EAC3C,MAAMC,SAAS,GAAGvH,KAAK,CAACU,IAAI,CAACuF,GAAG,CAACrB,KAAK,GAAGyC,OAAO,CAAC,EAAE1H,iBAAiB,CAAC;EACrE,MAAM6H,SAAS,GAAGH,OAAO,IAAI,CAAC,GAAGC,KAAK,CAAC;EAEvC,OAAOC,SAAS,KAAK,CAAC,IAAIA,SAAS,GAAGC,SAAS;AACnD;AAEAvH,iBAAiB,CAACW,WAAW,EAAE;EAC3B6G,IAAI,EAAE,SAAS;EACf7F,GAAG,EAAE,CAAC;EACNE,GAAG,EAAE,CAAC;EACNiD,QAAQ,EAAE,IAAI;EACd2C,cAAc,EAAE;IACZC,OAAO,EAAE,IAAI;IACbC,KAAK,EAAE,CAAC;IACRC,KAAK,EAAEnI;EACX,CAAC;EACDoI,MAAM,EAAE;IACJC,MAAM,EAAE;EACZ,CAAC;EACDC,MAAM,EAAE;AACZ,CAAC,CAAC;AAEF,eAAepH,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}