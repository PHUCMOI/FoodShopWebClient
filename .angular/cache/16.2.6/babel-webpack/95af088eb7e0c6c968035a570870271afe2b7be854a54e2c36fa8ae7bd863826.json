{"ast":null,"code":"function calculateSlope(sourceValues, valueGetter) {\n  let x = 0;\n  let y = 0;\n  let x2 = 0;\n  let xy = 0;\n  let count = 0;\n  let slope, intercept;\n  let xMin = Number.MAX_VALUE;\n  let xMax = Number.MIN_VALUE;\n  for (let i = 0; i < sourceValues.length; i++) {\n    const value = sourceValues[i];\n    const {\n      xValue,\n      yValue\n    } = valueGetter(value);\n    if (isFinite(xValue) && xValue !== null && isFinite(yValue) && yValue !== null) {\n      xMin = Math.min(xValue, xMin);\n      xMax = Math.max(xValue, xMax);\n      count++;\n      x += xValue;\n      y += yValue;\n      x2 += Math.pow(xValue, 2);\n      xy += xValue * yValue;\n    }\n  }\n  if (count > 0) {\n    slope = (count * xy - x * y) / (count * x2 - Math.pow(x, 2));\n    intercept = (y - slope * x) / count;\n  }\n  return {\n    slope,\n    intercept,\n    count,\n    xMin,\n    xMax\n  };\n}\nexport default calculateSlope;","map":{"version":3,"names":["calculateSlope","sourceValues","valueGetter","x","y","x2","xy","count","slope","intercept","xMin","Number","MAX_VALUE","xMax","MIN_VALUE","i","length","value","xValue","yValue","isFinite","Math","min","max","pow"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-charts/dist/es2015/chart/trendlines/calculate-slope.js"],"sourcesContent":["function calculateSlope(sourceValues, valueGetter) {\n    let x = 0;\n    let y = 0;\n    let x2 = 0;\n    let xy = 0;\n    let count = 0;\n    let slope, intercept;\n    let xMin = Number.MAX_VALUE;\n    let xMax = Number.MIN_VALUE;\n\n    for (let i = 0; i < sourceValues.length; i++) {\n        const value = sourceValues[i];\n        const { xValue, yValue } = valueGetter(value);\n\n        if (isFinite(xValue) && xValue !== null && isFinite(yValue) && yValue !== null) {\n            xMin = Math.min(xValue, xMin);\n            xMax = Math.max(xValue, xMax);\n\n            count++;\n            x += xValue;\n            y += yValue;\n            x2 += Math.pow(xValue, 2);\n            xy += xValue * yValue;\n        }\n    }\n\n    if (count > 0) {\n        slope = (count * xy - x * y) / (count * x2 - Math.pow(x, 2));\n        intercept = (y - slope * x) / count;\n    }\n\n    return { slope, intercept, count, xMin, xMax };\n}\n\nexport default calculateSlope;\n"],"mappings":"AAAA,SAASA,cAAcA,CAACC,YAAY,EAAEC,WAAW,EAAE;EAC/C,IAAIC,CAAC,GAAG,CAAC;EACT,IAAIC,CAAC,GAAG,CAAC;EACT,IAAIC,EAAE,GAAG,CAAC;EACV,IAAIC,EAAE,GAAG,CAAC;EACV,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,KAAK,EAAEC,SAAS;EACpB,IAAIC,IAAI,GAAGC,MAAM,CAACC,SAAS;EAC3B,IAAIC,IAAI,GAAGF,MAAM,CAACG,SAAS;EAE3B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,YAAY,CAACe,MAAM,EAAED,CAAC,EAAE,EAAE;IAC1C,MAAME,KAAK,GAAGhB,YAAY,CAACc,CAAC,CAAC;IAC7B,MAAM;MAAEG,MAAM;MAAEC;IAAO,CAAC,GAAGjB,WAAW,CAACe,KAAK,CAAC;IAE7C,IAAIG,QAAQ,CAACF,MAAM,CAAC,IAAIA,MAAM,KAAK,IAAI,IAAIE,QAAQ,CAACD,MAAM,CAAC,IAAIA,MAAM,KAAK,IAAI,EAAE;MAC5ET,IAAI,GAAGW,IAAI,CAACC,GAAG,CAACJ,MAAM,EAAER,IAAI,CAAC;MAC7BG,IAAI,GAAGQ,IAAI,CAACE,GAAG,CAACL,MAAM,EAAEL,IAAI,CAAC;MAE7BN,KAAK,EAAE;MACPJ,CAAC,IAAIe,MAAM;MACXd,CAAC,IAAIe,MAAM;MACXd,EAAE,IAAIgB,IAAI,CAACG,GAAG,CAACN,MAAM,EAAE,CAAC,CAAC;MACzBZ,EAAE,IAAIY,MAAM,GAAGC,MAAM;IACzB;EACJ;EAEA,IAAIZ,KAAK,GAAG,CAAC,EAAE;IACXC,KAAK,GAAG,CAACD,KAAK,GAAGD,EAAE,GAAGH,CAAC,GAAGC,CAAC,KAAKG,KAAK,GAAGF,EAAE,GAAGgB,IAAI,CAACG,GAAG,CAACrB,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5DM,SAAS,GAAG,CAACL,CAAC,GAAGI,KAAK,GAAGL,CAAC,IAAII,KAAK;EACvC;EAEA,OAAO;IAAEC,KAAK;IAAEC,SAAS;IAAEF,KAAK;IAAEG,IAAI;IAAEG;EAAK,CAAC;AAClD;AAEA,eAAeb,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}