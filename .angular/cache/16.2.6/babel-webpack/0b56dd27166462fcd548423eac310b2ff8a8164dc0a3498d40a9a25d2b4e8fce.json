{"ast":null,"code":"import TemplateService from './services/template-service';\nimport getter from './utils/getter';\nimport map from './utils/map';\nfunction defaultGroupHeaderTemplate(data) {\n  return `${data.title}: ${data.value}`;\n}\nfunction createArray(length, callback) {\n  const result = [];\n  for (let idx = 0; idx < length; idx++) {\n    result.push(callback(idx));\n  }\n  return result;\n}\nfunction defaultItemId(item) {\n  return item.id;\n}\nclass ExcelExporter {\n  constructor(options) {\n    options.columns = this._trimColumns(options.columns || []);\n    this.allColumns = map(this._leafColumns(options.columns || []), this._prepareColumn);\n    this.columns = this._visibleColumns(this.allColumns);\n    this.options = options;\n    this.data = options.data || [];\n    this.aggregates = options.aggregates || {};\n    this.groups = [].concat(options.groups || []);\n    this.hasGroups = this.groups.length > 0;\n    this.hierarchy = options.hierarchy;\n    this.hasGroupHeaderColumn = this.columns.some(column => column.groupHeaderColumnTemplate);\n    this.collapsible = this.options.collapsible;\n  }\n  workbook() {\n    const workbook = {\n      sheets: [{\n        columns: this._columns(),\n        rows: this.hierarchy ? this._hierarchyRows() : this._rows(),\n        freezePane: this._freezePane(),\n        filter: this._filter()\n      }]\n    };\n    return workbook;\n  }\n  _trimColumns(columns) {\n    return columns.filter(column => {\n      let result = Boolean(column.field);\n      if (!result && column.columns) {\n        result = this._trimColumns(column.columns).length > 0;\n      }\n      return result;\n    });\n  }\n  _leafColumns(columns) {\n    let result = [];\n    for (let idx = 0; idx < columns.length; idx++) {\n      if (!columns[idx].columns) {\n        result.push(columns[idx]);\n      } else {\n        result = result.concat(this._leafColumns(columns[idx].columns));\n      }\n    }\n    return result;\n  }\n  _prepareColumn(column) {\n    if (!column.field) {\n      return null;\n    }\n    let value = function (dataItem) {\n      return getter(column.field, true)(dataItem);\n    };\n    let values = null;\n    if (column.values) {\n      values = {};\n      column.values.forEach(function (item) {\n        values[item.value] = item.text;\n      });\n      value = function (dataItem) {\n        return values[getter(column.field, true)(dataItem)];\n      };\n    }\n    return Object.assign({}, column, {\n      value: value,\n      values: values,\n      groupHeaderTemplate: column.groupHeaderTemplate ? TemplateService.compile(column.groupHeaderTemplate) : defaultGroupHeaderTemplate,\n      groupHeaderColumnTemplate: column.groupHeaderColumnTemplate ? TemplateService.compile(column.groupHeaderColumnTemplate) : null,\n      groupFooterTemplate: column.groupFooterTemplate ? TemplateService.compile(column.groupFooterTemplate) : null,\n      footerTemplate: column.footerTemplate ? TemplateService.compile(column.footerTemplate) : null\n    });\n  }\n  _filter() {\n    if (!this.options.filterable) {\n      return null;\n    }\n    const depth = this._depth();\n    return {\n      from: depth,\n      to: depth + this.columns.length - 1\n    };\n  }\n  _createPaddingCells(length) {\n    return createArray(length, () => Object.assign({\n      background: \"#dfdfdf\",\n      color: \"#333\"\n    }, this.options.paddingCellOptions));\n  }\n  _dataRow(dataItem, level, depth) {\n    let cells = this._createPaddingCells(level);\n\n    // grouped\n    if (this.hasGroups && depth && dataItem.items) {\n      cells = cells.concat(this._groupHeaderCells(dataItem, level, depth));\n      const rows = this._dataRows(dataItem.items, level + 1);\n      rows.unshift({\n        type: \"group-header\",\n        cells: cells,\n        level: this.collapsible ? level : null\n      });\n      return rows.concat(this._footer(dataItem, level));\n    }\n    const dataCells = [];\n    for (let cellIdx = 0; cellIdx < this.columns.length; cellIdx++) {\n      dataCells[cellIdx] = this._cell(dataItem, this.columns[cellIdx]);\n    }\n    if (this.hierarchy) {\n      dataCells[0].colSpan = depth - level + 1;\n    }\n    return [{\n      type: \"data\",\n      cells: cells.concat(dataCells),\n      level: this.collapsible ? level : null\n    }];\n  }\n  _groupHeaderCells(dataItem, level, depth) {\n    const cells = [];\n    const column = this.allColumns.filter(function (column) {\n      return column.field === dataItem.field;\n    })[0] || {};\n    const title = column && column.title ? column.title : dataItem.field;\n    const template = column ? column.groupHeaderTemplate || column.groupHeaderColumnTemplate : null;\n    const group = Object.assign({\n      title: title,\n      field: dataItem.field,\n      value: column && column.values ? column.values[dataItem.value] : dataItem.value,\n      aggregates: dataItem.aggregates,\n      items: dataItem.items\n    }, dataItem.aggregates[dataItem.field]);\n    const value = template ? template(group) : `${title}: ${dataItem.value}`;\n    cells.push(Object.assign({\n      value: value,\n      background: \"#dfdfdf\",\n      color: \"#333\",\n      colSpan: (this.hasGroupHeaderColumn ? 1 : this.columns.length) + depth - level\n    }, column.groupHeaderCellOptions));\n    if (this.hasGroupHeaderColumn) {\n      this.columns.forEach(function (column, index) {\n        if (index > 0) {\n          cells.push(Object.assign({\n            background: \"#dfdfdf\",\n            color: \"#333\",\n            value: column.groupHeaderColumnTemplate ? column.groupHeaderColumnTemplate(Object.assign({\n              group: group\n            }, group, dataItem.aggregates[column.field])) : undefined\n          }, column.groupHeaderCellOptions));\n        }\n      });\n    }\n    return cells;\n  }\n  _dataRows(dataItems, level) {\n    const depth = this._depth();\n    const rows = [];\n    for (let idx = 0; idx < dataItems.length; idx++) {\n      rows.push.apply(rows, this._dataRow(dataItems[idx], level, depth));\n    }\n    return rows;\n  }\n  _hierarchyRows() {\n    const depth = this._depth();\n    const data = this.data;\n    const itemLevel = this.hierarchy.itemLevel;\n    const itemId = this.hierarchy.itemId || defaultItemId;\n    const hasFooter = this._hasFooterTemplate();\n    const rows = [];\n    const parents = [];\n    let previousLevel = 0;\n    let previousItemId;\n    if (!hasFooter) {\n      this.collapsible = false;\n    }\n    for (let idx = 0; idx < data.length; idx++) {\n      const item = data[idx];\n      const level = itemLevel(item, idx);\n      if (hasFooter) {\n        if (level > previousLevel) {\n          parents.push({\n            id: previousItemId,\n            level: previousLevel\n          });\n        } else if (level < previousLevel) {\n          rows.push.apply(rows, this._hierarchyFooterRows(parents, level, depth));\n        }\n        previousLevel = level;\n        previousItemId = itemId(item, idx);\n      }\n      rows.push.apply(rows, this._dataRow(item, level + 1, depth));\n    }\n    if (hasFooter) {\n      rows.push.apply(rows, this._hierarchyFooterRows(parents, 0, depth));\n      const rootAggregate = data.length ? this.aggregates[data[0].parentId] : {};\n      rows.push(this._hierarchyFooter(rootAggregate, 0, depth));\n    }\n    this._prependHeaderRows(rows);\n    return rows;\n  }\n  _hierarchyFooterRows(parents, currentLevel, depth) {\n    const rows = [];\n    while (parents.length && parents[parents.length - 1].level >= currentLevel) {\n      const parent = parents.pop();\n      rows.push(this._hierarchyFooter(this.aggregates[parent.id], parent.level + 1, depth));\n    }\n    return rows;\n  }\n  _hasFooterTemplate() {\n    const columns = this.columns;\n    for (let idx = 0; idx < columns.length; idx++) {\n      if (columns[idx].footerTemplate) {\n        return true;\n      }\n    }\n  }\n  _hierarchyFooter(aggregates, level, depth) {\n    const cells = this.columns.map(function (column, index) {\n      const colSpan = index ? 1 : depth - level + 1;\n      if (column.footerTemplate) {\n        const fieldAggregates = (aggregates || {})[column.field];\n        return Object.assign({\n          background: \"#dfdfdf\",\n          color: \"#333\",\n          colSpan: colSpan,\n          value: column.footerTemplate(Object.assign({\n            aggregates: aggregates\n          }, fieldAggregates))\n        }, column.footerCellOptions);\n      }\n      return Object.assign({\n        background: \"#dfdfdf\",\n        color: \"#333\",\n        colSpan: colSpan\n      }, column.footerCellOptions);\n    });\n    return {\n      type: \"footer\",\n      cells: this._createPaddingCells(level).concat(cells),\n      level: this.collapsible ? level : null\n    };\n  }\n  _footer(dataItem, level) {\n    const rows = [];\n    const footer = this.columns.some(column => column.groupFooterTemplate);\n    let templateData, group;\n    if (footer) {\n      group = {\n        group: {\n          items: dataItem.items,\n          field: dataItem.field,\n          value: dataItem.value\n        }\n      };\n      templateData = {};\n      Object.keys(dataItem.aggregates).forEach(key => {\n        templateData[key] = Object.assign({}, dataItem.aggregates[key], group);\n      });\n    }\n    const cells = this.columns.map(column => {\n      if (column.groupFooterTemplate) {\n        let data = Object.assign({}, templateData, dataItem.aggregates[column.field], group);\n        return Object.assign({\n          background: \"#dfdfdf\",\n          color: \"#333\",\n          value: column.groupFooterTemplate(data)\n        }, column.groupFooterCellOptions);\n      }\n      return Object.assign({\n        background: \"#dfdfdf\",\n        color: \"#333\"\n      }, column.groupFooterCellOptions);\n    });\n    if (footer) {\n      rows.push({\n        type: \"group-footer\",\n        cells: this._createPaddingCells(this.groups.length).concat(cells),\n        level: this.collapsible ? level : null\n      });\n    }\n    return rows;\n  }\n  _isColumnVisible(column) {\n    return this._visibleColumns([column]).length > 0 && (column.field || column.columns);\n  }\n  _visibleColumns(columns) {\n    return columns.filter(column => {\n      let exportable = column.exportable;\n      if (typeof exportable === 'object') {\n        exportable = column.exportable.excel;\n      }\n      const visibleInExport = !column.hidden && exportable !== false;\n      const visibleInExportOnly = column.hidden && exportable === true;\n      let visible = visibleInExport || visibleInExportOnly;\n      if (visible && column.columns) {\n        visible = this._visibleColumns(column.columns).length > 0;\n      }\n      return visible;\n    });\n  }\n  _headerRow(row, groups) {\n    const headers = row.cells.map(function (cell) {\n      return Object.assign(cell, {\n        colSpan: cell.colSpan > 1 ? cell.colSpan : 1,\n        rowSpan: row.rowSpan > 1 && !cell.colSpan ? row.rowSpan : 1\n      });\n    });\n    if (this.hierarchy && headers[0].firstCell) {\n      headers[0].colSpan += this._depth();\n    }\n    return {\n      type: \"header\",\n      cells: createArray(groups.length, () => Object.assign({\n        background: \"#7a7a7a\",\n        color: \"#fff\"\n      }, this.options.headerPaddingCellOptions)).concat(headers)\n    };\n  }\n  _prependHeaderRows(rows) {\n    const groups = this.groups;\n    const headerRows = [{\n      rowSpan: 1,\n      cells: [],\n      index: 0\n    }];\n    this._prepareHeaderRows(headerRows, this.options.columns);\n    for (let idx = headerRows.length - 1; idx >= 0; idx--) {\n      rows.unshift(this._headerRow(headerRows[idx], groups));\n    }\n  }\n  _prepareHeaderRows(rows, columns, parentCell, parentRow) {\n    const row = parentRow || rows[rows.length - 1];\n    let childRow = rows[row.index + 1];\n    let totalColSpan = 0;\n    for (let idx = 0; idx < columns.length; idx++) {\n      const column = columns[idx];\n      if (this._isColumnVisible(column)) {\n        const cell = Object.assign({\n          background: \"#7a7a7a\",\n          color: \"#fff\",\n          value: column.title || column.field,\n          colSpan: 0,\n          firstCell: idx === 0 && (!parentCell || parentCell.firstCell)\n        }, column.headerCellOptions);\n        row.cells.push(cell);\n        if (column.columns && column.columns.length) {\n          if (!childRow) {\n            childRow = {\n              rowSpan: 0,\n              cells: [],\n              index: rows.length\n            };\n            rows.push(childRow);\n          }\n          cell.colSpan = this._trimColumns(this._visibleColumns(column.columns)).length;\n          this._prepareHeaderRows(rows, column.columns, cell, childRow);\n          totalColSpan += cell.colSpan - 1;\n          row.rowSpan = rows.length - row.index;\n        }\n      }\n    }\n    if (parentCell) {\n      parentCell.colSpan += totalColSpan;\n    }\n  }\n  _rows() {\n    const rows = this._dataRows(this.data, 0);\n    if (this.columns.length) {\n      this._prependHeaderRows(rows);\n      let footer = false;\n      const cells = this.columns.map(column => {\n        if (column.footerTemplate) {\n          footer = true;\n          return Object.assign({\n            background: \"#dfdfdf\",\n            color: \"#333\",\n            value: column.footerTemplate(Object.assign({}, this.aggregates, this.aggregates[column.field]))\n          }, column.footerCellOptions);\n        }\n        return Object.assign({\n          background: \"#dfdfdf\",\n          color: \"#333\"\n        }, column.footerCellOptions);\n      });\n      if (footer) {\n        rows.push({\n          type: \"footer\",\n          cells: this._createPaddingCells(this.groups.length).concat(cells)\n        });\n      }\n    }\n    return rows;\n  }\n  _headerDepth(columns) {\n    const result = 1;\n    let max = 0;\n    for (let idx = 0; idx < columns.length; idx++) {\n      if (columns[idx].columns) {\n        const temp = this._headerDepth(columns[idx].columns);\n        if (temp > max) {\n          max = temp;\n        }\n      }\n    }\n    return result + max;\n  }\n  _freezePane() {\n    const columns = this._visibleColumns(this.options.columns || []);\n    const colSplit = this._visibleColumns(this._trimColumns(this._leafColumns(columns.filter(function (column) {\n      return column.locked;\n    })))).length;\n    return {\n      rowSplit: this._headerDepth(columns),\n      colSplit: colSplit ? colSplit + this.groups.length : 0\n    };\n  }\n  _cell(dataItem, column) {\n    return Object.assign({\n      value: column.value(dataItem)\n    }, column.cellOptions);\n  }\n  _depth() {\n    let depth = 0;\n    if (this.hierarchy) {\n      depth = this.hierarchy.depth;\n    } else {\n      depth = this.groups.length;\n    }\n    return depth;\n  }\n  _columns() {\n    const depth = this._depth();\n    const columns = createArray(depth, () => ({\n      width: 20\n    }));\n    return columns.concat(this.columns.map(function (column) {\n      return {\n        width: parseInt(column.width, 10),\n        autoWidth: column.width ? false : true\n      };\n    }));\n  }\n}\nexport default ExcelExporter;","map":{"version":3,"names":["TemplateService","getter","map","defaultGroupHeaderTemplate","data","title","value","createArray","length","callback","result","idx","push","defaultItemId","item","id","ExcelExporter","constructor","options","columns","_trimColumns","allColumns","_leafColumns","_prepareColumn","_visibleColumns","aggregates","groups","concat","hasGroups","hierarchy","hasGroupHeaderColumn","some","column","groupHeaderColumnTemplate","collapsible","workbook","sheets","_columns","rows","_hierarchyRows","_rows","freezePane","_freezePane","filter","_filter","Boolean","field","dataItem","values","forEach","text","Object","assign","groupHeaderTemplate","compile","groupFooterTemplate","footerTemplate","filterable","depth","_depth","from","to","_createPaddingCells","background","color","paddingCellOptions","_dataRow","level","cells","items","_groupHeaderCells","_dataRows","unshift","type","_footer","dataCells","cellIdx","_cell","colSpan","template","group","groupHeaderCellOptions","index","undefined","dataItems","apply","itemLevel","itemId","hasFooter","_hasFooterTemplate","parents","previousLevel","previousItemId","_hierarchyFooterRows","rootAggregate","parentId","_hierarchyFooter","_prependHeaderRows","currentLevel","parent","pop","fieldAggregates","footerCellOptions","footer","templateData","keys","key","groupFooterCellOptions","_isColumnVisible","exportable","excel","visibleInExport","hidden","visibleInExportOnly","visible","_headerRow","row","headers","cell","rowSpan","firstCell","headerPaddingCellOptions","headerRows","_prepareHeaderRows","parentCell","parentRow","childRow","totalColSpan","headerCellOptions","_headerDepth","max","temp","colSplit","locked","rowSplit","cellOptions","width","parseInt","autoWidth"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-ooxml/dist/es2015/excel-exporter.js"],"sourcesContent":["import TemplateService from './services/template-service';\nimport getter from './utils/getter';\nimport map from './utils/map';\n\nfunction defaultGroupHeaderTemplate(data) {\n    return `${ data.title }: ${ data.value }`;\n}\n\nfunction createArray(length, callback) {\n    const result = [];\n\n    for (let idx = 0; idx < length; idx++) {\n        result.push(callback(idx));\n    }\n\n    return result;\n}\n\nfunction defaultItemId(item) {\n    return item.id;\n}\n\nclass ExcelExporter {\n    constructor(options) {\n        options.columns = this._trimColumns(options.columns || []);\n\n        this.allColumns = map(this._leafColumns(options.columns || []), this._prepareColumn);\n\n        this.columns = this._visibleColumns(this.allColumns);\n\n        this.options = options;\n        this.data = options.data || [];\n        this.aggregates = options.aggregates || {};\n        this.groups = [].concat(options.groups || []);\n        this.hasGroups = this.groups.length > 0;\n        this.hierarchy = options.hierarchy;\n        this.hasGroupHeaderColumn = this.columns.some(column => column.groupHeaderColumnTemplate);\n        this.collapsible = this.options.collapsible;\n    }\n\n    workbook() {\n        const workbook = {\n            sheets: [ {\n                columns: this._columns(),\n                rows: this.hierarchy ? this._hierarchyRows() : this._rows(),\n                freezePane: this._freezePane(),\n                filter: this._filter()\n            } ]\n        };\n\n        return workbook;\n    }\n\n    _trimColumns(columns) {\n        return columns.filter((column) => {\n            let result = Boolean(column.field);\n\n            if (!result && column.columns) {\n                result = this._trimColumns(column.columns).length > 0;\n            }\n\n            return result;\n        });\n    }\n\n    _leafColumns(columns) {\n        let result = [];\n\n        for (let idx = 0; idx < columns.length; idx++) {\n            if (!columns[idx].columns) {\n                result.push(columns[idx]);\n            } else {\n                result = result.concat(this._leafColumns(columns[idx].columns));\n            }\n        }\n\n        return result;\n    }\n\n    _prepareColumn(column) {\n        if (!column.field) {\n            return null;\n        }\n\n        let value = function(dataItem) {\n            return getter(column.field, true)(dataItem);\n        };\n\n        let values = null;\n\n        if (column.values) {\n            values = {};\n\n            column.values.forEach(function(item) {\n                values[item.value] = item.text;\n            });\n\n            value = function(dataItem) {\n                return values[getter(column.field, true)(dataItem)];\n            };\n        }\n\n        return Object.assign({}, column, {\n            value: value,\n            values: values,\n            groupHeaderTemplate: column.groupHeaderTemplate ? TemplateService.compile(column.groupHeaderTemplate) : defaultGroupHeaderTemplate,\n            groupHeaderColumnTemplate: column.groupHeaderColumnTemplate ? TemplateService.compile(column.groupHeaderColumnTemplate) : null,\n            groupFooterTemplate: column.groupFooterTemplate ? TemplateService.compile(column.groupFooterTemplate) : null,\n            footerTemplate: column.footerTemplate ? TemplateService.compile(column.footerTemplate) : null\n        });\n    }\n\n    _filter() {\n        if (!this.options.filterable) {\n            return null;\n        }\n\n        const depth = this._depth();\n\n        return {\n            from: depth,\n            to: depth + this.columns.length - 1\n        };\n    }\n\n    _createPaddingCells(length) {\n        return createArray(length, () => Object.assign({\n            background: \"#dfdfdf\",\n            color: \"#333\"\n        }, this.options.paddingCellOptions));\n    }\n\n    _dataRow(dataItem, level, depth) {\n        let cells = this._createPaddingCells(level);\n\n        // grouped\n        if (this.hasGroups && depth && dataItem.items) {\n            cells = cells.concat(this._groupHeaderCells(dataItem, level, depth));\n            const rows = this._dataRows(dataItem.items, level + 1);\n\n            rows.unshift({\n                type: \"group-header\",\n                cells: cells,\n                level: this.collapsible ? level : null\n            });\n\n            return rows.concat(this._footer(dataItem, level));\n        }\n\n        const dataCells = [];\n\n        for (let cellIdx = 0; cellIdx < this.columns.length; cellIdx++) {\n            dataCells[cellIdx] = this._cell(dataItem, this.columns[cellIdx]);\n        }\n\n        if (this.hierarchy) {\n            dataCells[0].colSpan = depth - level + 1;\n        }\n\n        return [ {\n            type: \"data\",\n            cells: cells.concat(dataCells),\n            level: this.collapsible ? level : null\n        } ];\n    }\n\n    _groupHeaderCells(dataItem, level, depth) {\n        const cells = [];\n\n        const column = this.allColumns.filter(function(column) {\n            return column.field === dataItem.field;\n        })[0] || {};\n\n        const title = column && column.title ? column.title : dataItem.field;\n        const template = column ? column.groupHeaderTemplate || column.groupHeaderColumnTemplate : null;\n        const group = Object.assign({\n            title: title,\n            field: dataItem.field,\n            value: column && column.values ? column.values[dataItem.value] : dataItem.value,\n            aggregates: dataItem.aggregates,\n            items: dataItem.items\n        }, dataItem.aggregates[dataItem.field]);\n\n        const value = template ? template(group) : `${ title }: ${ dataItem.value }`;\n\n        cells.push(Object.assign({\n            value: value,\n            background: \"#dfdfdf\",\n            color: \"#333\",\n            colSpan: (this.hasGroupHeaderColumn ? 1 : this.columns.length) + depth - level\n        }, column.groupHeaderCellOptions));\n\n        if (this.hasGroupHeaderColumn) {\n            this.columns.forEach(function(column, index) {\n                if (index > 0) {\n                    cells.push(Object.assign({\n                        background: \"#dfdfdf\",\n                        color: \"#333\",\n                        value: column.groupHeaderColumnTemplate ?\n                            column.groupHeaderColumnTemplate(Object.assign({ group: group }, group, dataItem.aggregates[column.field])) :\n                            undefined\n                    }, column.groupHeaderCellOptions));\n                }\n            });\n        }\n\n        return cells;\n    }\n\n    _dataRows(dataItems, level) {\n        const depth = this._depth();\n        const rows = [];\n\n        for (let idx = 0; idx < dataItems.length; idx++) {\n            rows.push.apply(rows, this._dataRow(dataItems[idx], level, depth));\n        }\n\n        return rows;\n    }\n\n    _hierarchyRows() {\n        const depth = this._depth();\n        const data = this.data;\n        const itemLevel = this.hierarchy.itemLevel;\n        const itemId = this.hierarchy.itemId || defaultItemId;\n        const hasFooter = this._hasFooterTemplate();\n        const rows = [];\n        const parents = [];\n        let previousLevel = 0;\n        let previousItemId;\n\n        if (!hasFooter) {\n            this.collapsible = false;\n        }\n\n        for (let idx = 0; idx < data.length; idx++) {\n            const item = data[idx];\n            const level = itemLevel(item, idx);\n\n            if (hasFooter) {\n                if (level > previousLevel) {\n                    parents.push({ id: previousItemId, level: previousLevel });\n                } else if (level < previousLevel) {\n                    rows.push.apply(rows, this._hierarchyFooterRows(parents, level, depth));\n                }\n\n                previousLevel = level;\n                previousItemId = itemId(item, idx);\n            }\n\n            rows.push.apply(rows, this._dataRow(item, level + 1, depth));\n        }\n\n        if (hasFooter) {\n            rows.push.apply(rows, this._hierarchyFooterRows(parents, 0, depth));\n\n            const rootAggregate = data.length ? this.aggregates[data[0].parentId] : {};\n            rows.push(this._hierarchyFooter(rootAggregate, 0, depth));\n        }\n\n        this._prependHeaderRows(rows);\n\n        return rows;\n    }\n\n    _hierarchyFooterRows(parents, currentLevel, depth) {\n        const rows = [];\n        while (parents.length && parents[parents.length - 1].level >= currentLevel) {\n            const parent = parents.pop();\n            rows.push(this._hierarchyFooter(this.aggregates[parent.id], parent.level + 1, depth));\n        }\n\n        return rows;\n    }\n\n    _hasFooterTemplate() {\n        const columns = this.columns;\n        for (let idx = 0; idx < columns.length; idx++) {\n            if (columns[idx].footerTemplate) {\n                return true;\n            }\n        }\n    }\n\n    _hierarchyFooter(aggregates, level, depth) {\n        const cells = this.columns.map(function(column, index) {\n            const colSpan = index ? 1 : depth - level + 1;\n            if (column.footerTemplate) {\n                const fieldAggregates = (aggregates || {})[column.field];\n                return Object.assign({\n                    background: \"#dfdfdf\",\n                    color: \"#333\",\n                    colSpan: colSpan,\n                    value: column.footerTemplate(Object.assign({ aggregates: aggregates }, fieldAggregates))\n                }, column.footerCellOptions);\n            }\n\n            return Object.assign({\n                background: \"#dfdfdf\",\n                color: \"#333\",\n                colSpan: colSpan\n            }, column.footerCellOptions);\n        });\n\n        return {\n            type: \"footer\",\n            cells: this._createPaddingCells(level).concat(cells),\n            level: this.collapsible ? level : null\n        };\n    }\n\n    _footer(dataItem, level) {\n        const rows = [];\n        const footer = this.columns.some(column => column.groupFooterTemplate);\n\n        let templateData, group;\n        if (footer) {\n            group = {\n                group: { items: dataItem.items,\n                         field: dataItem.field,\n                         value: dataItem.value }\n            };\n            templateData = {};\n            Object.keys(dataItem.aggregates).forEach(key => {\n                templateData[key] = Object.assign({}, dataItem.aggregates[key], group);\n            });\n        }\n\n        const cells = this.columns.map((column) => {\n            if (column.groupFooterTemplate) {\n                let data = Object.assign({}, templateData, dataItem.aggregates[column.field], group);\n                return Object.assign({\n                    background: \"#dfdfdf\",\n                    color: \"#333\",\n                    value: column.groupFooterTemplate(data)\n                }, column.groupFooterCellOptions);\n            }\n\n            return Object.assign({\n                background: \"#dfdfdf\",\n                color: \"#333\"\n            }, column.groupFooterCellOptions);\n        });\n\n        if (footer) {\n            rows.push({\n                type: \"group-footer\",\n                cells: this._createPaddingCells(this.groups.length).concat(cells),\n                level: this.collapsible ? level : null\n            });\n        }\n\n        return rows;\n    }\n\n    _isColumnVisible(column) {\n        return this._visibleColumns([ column ]).length > 0 && (column.field || column.columns);\n    }\n\n    _visibleColumns(columns) {\n        return columns.filter((column) => {\n            let exportable = column.exportable;\n            if (typeof exportable === 'object') {\n                exportable = column.exportable.excel;\n            }\n\n            const visibleInExport = !column.hidden && exportable !== false;\n            const visibleInExportOnly = column.hidden && exportable === true;\n            let visible = visibleInExport || visibleInExportOnly;\n            if (visible && column.columns) {\n                visible = this._visibleColumns(column.columns).length > 0;\n            }\n            return visible;\n        });\n    }\n\n    _headerRow(row, groups) {\n        const headers = row.cells.map(function(cell) {\n            return Object.assign(cell, {\n                colSpan: cell.colSpan > 1 ? cell.colSpan : 1,\n                rowSpan: row.rowSpan > 1 && !cell.colSpan ? row.rowSpan : 1\n            });\n        });\n\n        if (this.hierarchy && headers[0].firstCell) {\n            headers[0].colSpan += this._depth();\n        }\n\n        return {\n            type: \"header\",\n            cells: createArray(groups.length, () => Object.assign({\n                background: \"#7a7a7a\",\n                color: \"#fff\"\n            }, this.options.headerPaddingCellOptions)).concat(headers)\n        };\n    }\n\n    _prependHeaderRows(rows) {\n        const groups = this.groups;\n\n        const headerRows = [ { rowSpan: 1, cells: [], index: 0 } ];\n\n        this._prepareHeaderRows(headerRows, this.options.columns);\n\n        for (let idx = headerRows.length - 1; idx >= 0; idx--) {\n            rows.unshift(this._headerRow(headerRows[idx], groups));\n        }\n    }\n\n    _prepareHeaderRows(rows, columns, parentCell, parentRow) {\n        const row = parentRow || rows[rows.length - 1];\n        let childRow = rows[row.index + 1];\n        let totalColSpan = 0;\n\n        for (let idx = 0; idx < columns.length; idx++) {\n            const column = columns[idx];\n            if (this._isColumnVisible(column)) {\n\n                const cell = Object.assign({\n                    background: \"#7a7a7a\",\n                    color: \"#fff\",\n                    value: column.title || column.field,\n                    colSpan: 0,\n                    firstCell: idx === 0 && (!parentCell || parentCell.firstCell)\n                }, column.headerCellOptions);\n                row.cells.push(cell);\n\n                if (column.columns && column.columns.length) {\n                    if (!childRow) {\n                        childRow = { rowSpan: 0, cells: [], index: rows.length };\n                        rows.push(childRow);\n                    }\n                    cell.colSpan = this._trimColumns(this._visibleColumns(column.columns)).length;\n                    this._prepareHeaderRows(rows, column.columns, cell, childRow);\n                    totalColSpan += cell.colSpan - 1;\n                    row.rowSpan = rows.length - row.index;\n                }\n            }\n        }\n\n        if (parentCell) {\n            parentCell.colSpan += totalColSpan;\n        }\n    }\n\n    _rows() {\n        const rows = this._dataRows(this.data, 0);\n\n        if (this.columns.length) {\n            this._prependHeaderRows(rows);\n            let footer = false;\n\n            const cells = this.columns.map((column) => {\n                if (column.footerTemplate) {\n                    footer = true;\n\n                    return Object.assign({\n                        background: \"#dfdfdf\",\n                        color: \"#333\",\n                        value: column.footerTemplate(Object.assign({}, this.aggregates, this.aggregates[column.field]))\n                    }, column.footerCellOptions);\n                }\n\n                return Object.assign({\n                    background: \"#dfdfdf\",\n                    color: \"#333\"\n                }, column.footerCellOptions);\n            });\n\n            if (footer) {\n                rows.push({\n                    type: \"footer\",\n                    cells: this._createPaddingCells(this.groups.length).concat(cells)\n                });\n            }\n        }\n\n        return rows;\n    }\n\n    _headerDepth(columns) {\n        const result = 1;\n        let max = 0;\n\n        for (let idx = 0; idx < columns.length; idx++) {\n            if (columns[idx].columns) {\n                const temp = this._headerDepth(columns[idx].columns);\n                if (temp > max) {\n                    max = temp;\n                }\n            }\n        }\n        return result + max;\n    }\n\n    _freezePane() {\n        const columns = this._visibleColumns(this.options.columns || []);\n\n        const colSplit = this._visibleColumns(this._trimColumns(this._leafColumns(columns.filter(function(column) {\n            return column.locked;\n        })))).length;\n\n        return {\n            rowSplit: this._headerDepth(columns),\n            colSplit: colSplit ? colSplit + this.groups.length : 0\n        };\n    }\n\n    _cell(dataItem, column) {\n        return Object.assign({\n            value: column.value(dataItem)\n        }, column.cellOptions);\n    }\n\n    _depth() {\n        let depth = 0;\n\n        if (this.hierarchy) {\n            depth = this.hierarchy.depth;\n        } else {\n            depth = this.groups.length;\n        }\n\n        return depth;\n    }\n\n    _columns() {\n        const depth = this._depth();\n        const columns = createArray(depth, () => ({ width: 20 }));\n\n        return columns.concat(this.columns.map(function(column) {\n            return {\n                width: parseInt(column.width, 10),\n                autoWidth: column.width ? false : true\n            };\n        }));\n    }\n}\n\nexport default ExcelExporter;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}