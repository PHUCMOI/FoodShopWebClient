{"ast":null,"code":"import Node from './node';\nimport { defined, isTransparent } from '../util';\nimport { DASH_ARRAYS, SOLID, BUTT } from '../core/constants';\nimport { NONE, POINT_DIGITS } from './constants';\nimport renderAllAttr from './utils/render-all-attributes';\nimport renderAttr from './utils/render-attribute';\nconst ATTRIBUTE_MAP = {\n  \"fill.opacity\": \"fill-opacity\",\n  \"stroke.color\": \"stroke\",\n  \"stroke.width\": \"stroke-width\",\n  \"stroke.opacity\": \"stroke-opacity\"\n};\nclass PathNode extends Node {\n  geometryChange() {\n    this.attr(\"d\", this.renderData());\n    this.invalidate();\n  }\n  optionsChange(e) {\n    switch (e.field) {\n      case \"fill\":\n        if (e.value) {\n          this.allAttr(this.mapFill(e.value));\n        } else {\n          this.removeAttr(\"fill\");\n        }\n        break;\n      case \"fill.color\":\n        this.allAttr(this.mapFill({\n          color: e.value\n        }));\n        break;\n      case \"stroke\":\n        if (e.value) {\n          this.allAttr(this.mapStroke(e.value));\n        } else {\n          this.removeAttr(\"stroke\");\n        }\n        break;\n      case \"transform\":\n        this.transformChange(e.value);\n        break;\n      default:\n        const name = ATTRIBUTE_MAP[e.field];\n        if (name) {\n          this.attr(name, e.value);\n        }\n        break;\n    }\n    this.accessibilityOptionsChange(e);\n    super.optionsChange(e);\n  }\n  content() {\n    if (this.element) {\n      this.element.textContent = this.srcElement.content();\n    }\n  }\n  renderData() {\n    return this.srcElement.toString(POINT_DIGITS) || undefined;\n  }\n  mapStroke(stroke) {\n    const attrs = [];\n    if (stroke && !isTransparent(stroke.color)) {\n      attrs.push([\"stroke\", stroke.color]);\n      attrs.push([\"stroke-width\", stroke.width]);\n      attrs.push([\"stroke-linecap\", this.renderLinecap(stroke)]);\n      attrs.push([\"stroke-linejoin\", stroke.lineJoin]);\n      if (defined(stroke.opacity)) {\n        attrs.push([\"stroke-opacity\", stroke.opacity]);\n      }\n      if (defined(stroke.dashType)) {\n        attrs.push([\"stroke-dasharray\", this.renderDashType(stroke)]);\n      }\n    } else {\n      attrs.push([\"stroke\", NONE]);\n    }\n    return attrs;\n  }\n  renderStroke() {\n    return renderAllAttr(this.mapStroke(this.srcElement.options.stroke));\n  }\n  renderDashType(stroke) {\n    const {\n      dashType,\n      width = 1\n    } = stroke;\n    if (dashType && dashType !== SOLID) {\n      const dashArray = DASH_ARRAYS[dashType.toLowerCase()];\n      const result = [];\n      for (let i = 0; i < dashArray.length; i++) {\n        result.push(dashArray[i] * width);\n      }\n      return result.join(\" \");\n    }\n  }\n  renderLinecap(stroke) {\n    const {\n      dashType,\n      lineCap\n    } = stroke;\n    return dashType && dashType !== \"solid\" ? BUTT : lineCap;\n  }\n  mapFill(fill) {\n    const attrs = [];\n    if (!(fill && fill.nodeType === \"Gradient\")) {\n      if (fill && !isTransparent(fill.color)) {\n        attrs.push([\"fill\", fill.color]);\n        if (defined(fill.opacity)) {\n          attrs.push([\"fill-opacity\", fill.opacity]);\n        }\n      } else {\n        attrs.push([\"fill\", NONE]);\n      }\n    }\n    return attrs;\n  }\n  renderFill() {\n    return renderAllAttr(this.mapFill(this.srcElement.options.fill));\n  }\n  template() {\n    return `<path ${this.renderId()} ${this.renderStyle()} ${this.renderOpacity()} ${renderAttr('d', this.renderData())}` + `${this.renderStroke()}${this.renderFill()}${this.renderDefinitions()}${this.renderTransform()}` + `${this.renderClassName()} ${this.renderRole()}` + `${this.renderAriaLabel()} ${this.renderAriaRoleDescription()}></path>`;\n  }\n}\nexport default PathNode;","map":{"version":3,"names":["Node","defined","isTransparent","DASH_ARRAYS","SOLID","BUTT","NONE","POINT_DIGITS","renderAllAttr","renderAttr","ATTRIBUTE_MAP","PathNode","geometryChange","attr","renderData","invalidate","optionsChange","e","field","value","allAttr","mapFill","removeAttr","color","mapStroke","transformChange","name","accessibilityOptionsChange","content","element","textContent","srcElement","toString","undefined","stroke","attrs","push","width","renderLinecap","lineJoin","opacity","dashType","renderDashType","renderStroke","options","dashArray","toLowerCase","result","i","length","join","lineCap","fill","nodeType","renderFill","template","renderId","renderStyle","renderOpacity","renderDefinitions","renderTransform","renderClassName","renderRole","renderAriaLabel","renderAriaRoleDescription"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-drawing/dist/es2015/svg/path-node.js"],"sourcesContent":["import Node from './node';\nimport { defined, isTransparent } from '../util';\nimport { DASH_ARRAYS, SOLID, BUTT } from '../core/constants';\nimport { NONE, POINT_DIGITS } from './constants';\nimport renderAllAttr from './utils/render-all-attributes';\nimport renderAttr from './utils/render-attribute';\n\nconst ATTRIBUTE_MAP = {\n    \"fill.opacity\": \"fill-opacity\",\n    \"stroke.color\": \"stroke\",\n    \"stroke.width\": \"stroke-width\",\n    \"stroke.opacity\": \"stroke-opacity\"\n};\n\nclass PathNode extends Node {\n\n    geometryChange() {\n        this.attr(\"d\", this.renderData());\n        this.invalidate();\n    }\n\n    optionsChange(e) {\n        switch (e.field) {\n        case \"fill\":\n            if (e.value) {\n                this.allAttr(this.mapFill(e.value));\n            } else {\n                this.removeAttr(\"fill\");\n            }\n            break;\n\n        case \"fill.color\":\n            this.allAttr(this.mapFill({ color: e.value }));\n            break;\n\n        case \"stroke\":\n            if (e.value) {\n                this.allAttr(this.mapStroke(e.value));\n            } else {\n                this.removeAttr(\"stroke\");\n            }\n            break;\n\n        case \"transform\":\n            this.transformChange(e.value);\n            break;\n\n        default:\n            const name = ATTRIBUTE_MAP[e.field];\n            if (name) {\n                this.attr(name, e.value);\n            }\n            break;\n        }\n\n        this.accessibilityOptionsChange(e);\n\n        super.optionsChange(e);\n    }\n\n    content() {\n        if (this.element) {\n            this.element.textContent = this.srcElement.content();\n        }\n    }\n\n    renderData() {\n        return this.srcElement.toString(POINT_DIGITS) || undefined;\n    }\n\n    mapStroke(stroke) {\n        const attrs = [];\n\n        if (stroke && !isTransparent(stroke.color)) {\n            attrs.push([ \"stroke\", stroke.color ]);\n            attrs.push([ \"stroke-width\", stroke.width ]);\n            attrs.push([ \"stroke-linecap\", this.renderLinecap(stroke) ]);\n            attrs.push([ \"stroke-linejoin\", stroke.lineJoin ]);\n\n            if (defined(stroke.opacity)) {\n                attrs.push([ \"stroke-opacity\", stroke.opacity ]);\n            }\n\n            if (defined(stroke.dashType)) {\n                attrs.push([ \"stroke-dasharray\", this.renderDashType(stroke) ]);\n            }\n        } else {\n            attrs.push([ \"stroke\", NONE ]);\n        }\n\n        return attrs;\n    }\n\n    renderStroke() {\n        return renderAllAttr(\n            this.mapStroke(this.srcElement.options.stroke)\n        );\n    }\n\n    renderDashType(stroke) {\n        const { dashType, width = 1 } = stroke;\n\n        if (dashType && dashType !== SOLID) {\n            const dashArray = DASH_ARRAYS[dashType.toLowerCase()];\n            const result = [];\n\n            for (let i = 0; i < dashArray.length; i++) {\n                result.push(dashArray[i] * width);\n            }\n\n            return result.join(\" \");\n        }\n    }\n\n    renderLinecap(stroke) {\n        const { dashType, lineCap } = stroke;\n\n        return (dashType && dashType !== \"solid\") ? BUTT : lineCap;\n    }\n\n    mapFill(fill) {\n        const attrs = [];\n        if (!(fill && fill.nodeType === \"Gradient\")) {\n            if (fill && !isTransparent(fill.color)) {\n                attrs.push([ \"fill\", fill.color ]);\n\n                if (defined(fill.opacity)) {\n                    attrs.push([ \"fill-opacity\", fill.opacity ]);\n                }\n            } else {\n                attrs.push([ \"fill\", NONE ]);\n            }\n        }\n\n        return attrs;\n    }\n\n    renderFill() {\n        return renderAllAttr(\n            this.mapFill(this.srcElement.options.fill)\n        );\n    }\n\n    template() {\n        return `<path ${ this.renderId() } ${ this.renderStyle() } ${ this.renderOpacity() } ${ renderAttr('d', this.renderData()) }` +\n                `${ this.renderStroke() }${ this.renderFill() }${ this.renderDefinitions() }${ this.renderTransform() }` + \n                `${ this.renderClassName() } ${ this.renderRole() }` +\n                `${ this.renderAriaLabel() } ${ this.renderAriaRoleDescription() }></path>`;\n    }\n}\n\nexport default PathNode;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}