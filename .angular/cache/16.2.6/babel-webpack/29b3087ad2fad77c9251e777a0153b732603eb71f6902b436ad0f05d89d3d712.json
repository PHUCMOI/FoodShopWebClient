{"ast":null,"code":"import { isPresent, isString, isArray } from '../utils';\nimport { isCompositeFilterDescriptor } from './filter-descriptor.interface';\nconst operatorMap = key => ({\n  \"!=\": \"neq\",\n  \"<\": \"lt\",\n  \"<=\": \"lte\",\n  \"==\": \"eq\",\n  \">\": \"gt\",\n  \">=\": \"gte\",\n  equal: \"eq\",\n  equals: \"eq\",\n  equalto: \"eq\",\n  ge: \"gte\",\n  greater: \"gt\",\n  greaterthan: \"gt\",\n  greaterthanequal: \"gte\",\n  isempty: \"isempty\",\n  isequalto: \"eq\",\n  isgreaterthan: \"gt\",\n  isgreaterthanorequalto: \"gte\",\n  islessthan: \"lt\",\n  islessthanorequalto: \"lte\",\n  isnotempty: \"isnotempty\",\n  isnotequalto: \"neq\",\n  isnull: \"isnull\",\n  le: \"lte\",\n  less: \"lt\",\n  lessthan: \"lt\",\n  lessthanequal: \"lte\",\n  ne: \"neq\",\n  notequal: \"neq\",\n  notequals: \"neq\",\n  notequalto: \"neq\",\n  notsubstringof: \"doesnotcontain\"\n})[key.toLowerCase()] || key;\nconst normalizeOperator = descriptor => {\n  if (descriptor.filters) {\n    descriptor.filters = descriptor.filters.map(filter => {\n      const result = Object.assign({}, filter);\n      if (!isCompositeFilterDescriptor(filter) && isString(filter.operator)) {\n        result.operator = operatorMap(filter.operator);\n      }\n      if (isCompositeFilterDescriptor(filter)) {\n        normalizeOperator(result);\n      }\n      return result;\n    });\n  }\n};\nconst normalizeDescriptor = descriptor => {\n  if (!isCompositeFilterDescriptor(descriptor)) {\n    return {\n      filters: isArray(descriptor) ? descriptor : [descriptor],\n      logic: \"and\"\n    };\n  }\n  return Object.assign({}, descriptor);\n};\n// tslint:disable:max-line-length\n/**\n * Converts a [FilterDescriptor]({% slug api_kendo-data-query_filterdescriptor %}) into a [CompositeFilterDescriptor]({% slug api_kendo-data-query_compositefilterdescriptor %}). If a `CompositeFilterDescriptor` is passed, no modifications will be made.\n *\n * @param {CompositeFilterDescriptor | FilterDescriptor} descriptor - The descriptor that will be normalized.\n * @returns {CompositeFilterDescriptor} - The normalized descriptor.\n */\n// tslint:enable:max-line-length\nexport const normalizeFilters = descriptor => {\n  if (isPresent(descriptor)) {\n    descriptor = normalizeDescriptor(descriptor);\n    normalizeOperator(descriptor);\n  }\n  return descriptor;\n};","map":{"version":3,"names":["isPresent","isString","isArray","isCompositeFilterDescriptor","operatorMap","key","equal","equals","equalto","ge","greater","greaterthan","greaterthanequal","isempty","isequalto","isgreaterthan","isgreaterthanorequalto","islessthan","islessthanorequalto","isnotempty","isnotequalto","isnull","le","less","lessthan","lessthanequal","ne","notequal","notequals","notequalto","notsubstringof","toLowerCase","normalizeOperator","descriptor","filters","map","filter","result","Object","assign","operator","normalizeDescriptor","logic","normalizeFilters"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-data-query/dist/es2015/filtering/filter.operators.js"],"sourcesContent":["import { isPresent, isString, isArray } from '../utils';\nimport { isCompositeFilterDescriptor } from './filter-descriptor.interface';\nconst operatorMap = (key) => ({\n    \"!=\": \"neq\",\n    \"<\": \"lt\",\n    \"<=\": \"lte\",\n    \"==\": \"eq\",\n    \">\": \"gt\",\n    \">=\": \"gte\",\n    equal: \"eq\",\n    equals: \"eq\",\n    equalto: \"eq\",\n    ge: \"gte\",\n    greater: \"gt\",\n    greaterthan: \"gt\",\n    greaterthanequal: \"gte\",\n    isempty: \"isempty\",\n    isequalto: \"eq\",\n    isgreaterthan: \"gt\",\n    isgreaterthanorequalto: \"gte\",\n    islessthan: \"lt\",\n    islessthanorequalto: \"lte\",\n    isnotempty: \"isnotempty\",\n    isnotequalto: \"neq\",\n    isnull: \"isnull\",\n    le: \"lte\",\n    less: \"lt\",\n    lessthan: \"lt\",\n    lessthanequal: \"lte\",\n    ne: \"neq\",\n    notequal: \"neq\",\n    notequals: \"neq\",\n    notequalto: \"neq\",\n    notsubstringof: \"doesnotcontain\"\n}[key.toLowerCase()] || key);\nconst normalizeOperator = (descriptor) => {\n    if (descriptor.filters) {\n        descriptor.filters = descriptor.filters.map(filter => {\n            const result = Object.assign({}, filter);\n            if (!isCompositeFilterDescriptor(filter) && isString(filter.operator)) {\n                result.operator = operatorMap(filter.operator);\n            }\n            if (isCompositeFilterDescriptor(filter)) {\n                normalizeOperator(result);\n            }\n            return result;\n        });\n    }\n};\nconst normalizeDescriptor = (descriptor) => {\n    if (!isCompositeFilterDescriptor(descriptor)) {\n        return {\n            filters: isArray(descriptor) ? descriptor : [descriptor],\n            logic: \"and\"\n        };\n    }\n    return Object.assign({}, descriptor);\n};\n// tslint:disable:max-line-length\n/**\n * Converts a [FilterDescriptor]({% slug api_kendo-data-query_filterdescriptor %}) into a [CompositeFilterDescriptor]({% slug api_kendo-data-query_compositefilterdescriptor %}). If a `CompositeFilterDescriptor` is passed, no modifications will be made.\n *\n * @param {CompositeFilterDescriptor | FilterDescriptor} descriptor - The descriptor that will be normalized.\n * @returns {CompositeFilterDescriptor} - The normalized descriptor.\n */\n// tslint:enable:max-line-length\nexport const normalizeFilters = (descriptor) => {\n    if (isPresent(descriptor)) {\n        descriptor = normalizeDescriptor(descriptor);\n        normalizeOperator(descriptor);\n    }\n    return descriptor;\n};\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,OAAO,QAAQ,UAAU;AACvD,SAASC,2BAA2B,QAAQ,+BAA+B;AAC3E,MAAMC,WAAW,GAAIC,GAAG,IAAM;EAC1B,IAAI,EAAE,KAAK;EACX,GAAG,EAAE,IAAI;EACT,IAAI,EAAE,KAAK;EACX,IAAI,EAAE,IAAI;EACV,GAAG,EAAE,IAAI;EACT,IAAI,EAAE,KAAK;EACXC,KAAK,EAAE,IAAI;EACXC,MAAM,EAAE,IAAI;EACZC,OAAO,EAAE,IAAI;EACbC,EAAE,EAAE,KAAK;EACTC,OAAO,EAAE,IAAI;EACbC,WAAW,EAAE,IAAI;EACjBC,gBAAgB,EAAE,KAAK;EACvBC,OAAO,EAAE,SAAS;EAClBC,SAAS,EAAE,IAAI;EACfC,aAAa,EAAE,IAAI;EACnBC,sBAAsB,EAAE,KAAK;EAC7BC,UAAU,EAAE,IAAI;EAChBC,mBAAmB,EAAE,KAAK;EAC1BC,UAAU,EAAE,YAAY;EACxBC,YAAY,EAAE,KAAK;EACnBC,MAAM,EAAE,QAAQ;EAChBC,EAAE,EAAE,KAAK;EACTC,IAAI,EAAE,IAAI;EACVC,QAAQ,EAAE,IAAI;EACdC,aAAa,EAAE,KAAK;EACpBC,EAAE,EAAE,KAAK;EACTC,QAAQ,EAAE,KAAK;EACfC,SAAS,EAAE,KAAK;EAChBC,UAAU,EAAE,KAAK;EACjBC,cAAc,EAAE;AACpB,CAAC,EAACzB,GAAG,CAAC0B,WAAW,CAAC,CAAC,CAAC,IAAI1B,GAAI;AAC5B,MAAM2B,iBAAiB,GAAIC,UAAU,IAAK;EACtC,IAAIA,UAAU,CAACC,OAAO,EAAE;IACpBD,UAAU,CAACC,OAAO,GAAGD,UAAU,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;MAClD,MAAMC,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEH,MAAM,CAAC;MACxC,IAAI,CAACjC,2BAA2B,CAACiC,MAAM,CAAC,IAAInC,QAAQ,CAACmC,MAAM,CAACI,QAAQ,CAAC,EAAE;QACnEH,MAAM,CAACG,QAAQ,GAAGpC,WAAW,CAACgC,MAAM,CAACI,QAAQ,CAAC;MAClD;MACA,IAAIrC,2BAA2B,CAACiC,MAAM,CAAC,EAAE;QACrCJ,iBAAiB,CAACK,MAAM,CAAC;MAC7B;MACA,OAAOA,MAAM;IACjB,CAAC,CAAC;EACN;AACJ,CAAC;AACD,MAAMI,mBAAmB,GAAIR,UAAU,IAAK;EACxC,IAAI,CAAC9B,2BAA2B,CAAC8B,UAAU,CAAC,EAAE;IAC1C,OAAO;MACHC,OAAO,EAAEhC,OAAO,CAAC+B,UAAU,CAAC,GAAGA,UAAU,GAAG,CAACA,UAAU,CAAC;MACxDS,KAAK,EAAE;IACX,CAAC;EACL;EACA,OAAOJ,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEN,UAAU,CAAC;AACxC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMU,gBAAgB,GAAIV,UAAU,IAAK;EAC5C,IAAIjC,SAAS,CAACiC,UAAU,CAAC,EAAE;IACvBA,UAAU,GAAGQ,mBAAmB,CAACR,UAAU,CAAC;IAC5CD,iBAAiB,CAACC,UAAU,CAAC;EACjC;EACA,OAAOA,UAAU;AACrB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}