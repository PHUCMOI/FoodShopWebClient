{"ast":null,"code":"import ChartElement from './chart-element';\nimport Box from './box';\nimport { X, Y, WIDTH, HEIGHT, RIGHT, BOTTOM, CENTER } from '../common/constants';\nimport { round, setDefaultOptions } from '../common';\nclass FloatElement extends ChartElement {\n  constructor(options) {\n    super(options);\n    this._initDirection();\n  }\n  _initDirection() {\n    const options = this.options;\n    if (options.vertical) {\n      this.groupAxis = X;\n      this.elementAxis = Y;\n      this.groupSizeField = WIDTH;\n      this.elementSizeField = HEIGHT;\n      this.groupSpacing = options.spacing;\n      this.elementSpacing = options.vSpacing;\n    } else {\n      this.groupAxis = Y;\n      this.elementAxis = X;\n      this.groupSizeField = HEIGHT;\n      this.elementSizeField = WIDTH;\n      this.groupSpacing = options.vSpacing;\n      this.elementSpacing = options.spacing;\n    }\n  }\n  reflow(targetBox) {\n    this.box = targetBox.clone();\n    this.reflowChildren();\n  }\n  reflowChildren() {\n    const {\n      box,\n      elementAxis,\n      groupAxis,\n      elementSizeField,\n      groupSizeField\n    } = this;\n    const {\n      groups,\n      groupsSize,\n      maxGroupElementsSize\n    } = this.groupOptions();\n    const groupsCount = groups.length;\n    const groupsStart = box[groupAxis + 1] + this.alignStart(groupsSize, box[groupSizeField]());\n    if (groupsCount) {\n      let groupStart = groupsStart;\n      for (let groupIdx = 0; groupIdx < groupsCount; groupIdx++) {\n        let group = groups[groupIdx];\n        let groupElements = group.groupElements;\n        let elementStart = box[elementAxis + 1];\n        let groupElementsCount = groupElements.length;\n        for (let idx = 0; idx < groupElementsCount; idx++) {\n          let element = groupElements[idx];\n          let elementSize = this.elementSize(element);\n          let groupElementStart = groupStart + this.alignStart(elementSize[groupSizeField], group.groupSize);\n          let elementBox = new Box();\n          elementBox[groupAxis + 1] = groupElementStart;\n          elementBox[groupAxis + 2] = groupElementStart + elementSize[groupSizeField];\n          elementBox[elementAxis + 1] = elementStart;\n          elementBox[elementAxis + 2] = elementStart + elementSize[elementSizeField];\n          element.reflow(elementBox);\n          elementStart += elementSize[elementSizeField] + this.elementSpacing;\n        }\n        groupStart += group.groupSize + this.groupSpacing;\n      }\n      box[groupAxis + 1] = groupsStart;\n      box[groupAxis + 2] = groupsStart + groupsSize;\n      box[elementAxis + 2] = box[elementAxis + 1] + maxGroupElementsSize;\n    }\n  }\n  alignStart(size, maxSize) {\n    let start = 0;\n    const align = this.options.align;\n    if (align === RIGHT || align === BOTTOM) {\n      start = maxSize - size;\n    } else if (align === CENTER) {\n      start = (maxSize - size) / 2;\n    }\n    return start;\n  }\n  groupOptions() {\n    const {\n      box,\n      children,\n      elementSizeField,\n      groupSizeField,\n      elementSpacing,\n      groupSpacing\n    } = this;\n    const maxSize = round(box[elementSizeField]());\n    const childrenCount = children.length;\n    const groups = [];\n    let groupSize = 0;\n    let groupElementsSize = 0;\n    let groupsSize = 0;\n    let maxGroupElementsSize = 0;\n    let groupElements = [];\n    for (let idx = 0; idx < childrenCount; idx++) {\n      let element = children[idx];\n      if (!element.box) {\n        element.reflow(box);\n      }\n      let elementSize = this.elementSize(element);\n      if (this.options.wrap && round(groupElementsSize + elementSpacing + elementSize[elementSizeField]) > maxSize) {\n        groups.push({\n          groupElements: groupElements,\n          groupSize: groupSize,\n          groupElementsSize: groupElementsSize\n        });\n        maxGroupElementsSize = Math.max(maxGroupElementsSize, groupElementsSize);\n        groupsSize += groupSpacing + groupSize;\n        groupSize = 0;\n        groupElementsSize = 0;\n        groupElements = [];\n      }\n      groupSize = Math.max(groupSize, elementSize[groupSizeField]);\n      if (groupElementsSize > 0) {\n        groupElementsSize += elementSpacing;\n      }\n      groupElementsSize += elementSize[elementSizeField];\n      groupElements.push(element);\n    }\n    groups.push({\n      groupElements: groupElements,\n      groupSize: groupSize,\n      groupElementsSize: groupElementsSize\n    });\n    maxGroupElementsSize = Math.max(maxGroupElementsSize, groupElementsSize);\n    groupsSize += groupSize;\n    return {\n      groups: groups,\n      groupsSize: groupsSize,\n      maxGroupElementsSize: maxGroupElementsSize\n    };\n  }\n  elementSize(element) {\n    return {\n      width: element.box.width(),\n      height: element.box.height()\n    };\n  }\n  createVisual() {}\n}\nsetDefaultOptions(FloatElement, {\n  vertical: true,\n  wrap: true,\n  vSpacing: 0,\n  spacing: 0\n});\nexport default FloatElement;","map":{"version":3,"names":["ChartElement","Box","X","Y","WIDTH","HEIGHT","RIGHT","BOTTOM","CENTER","round","setDefaultOptions","FloatElement","constructor","options","_initDirection","vertical","groupAxis","elementAxis","groupSizeField","elementSizeField","groupSpacing","spacing","elementSpacing","vSpacing","reflow","targetBox","box","clone","reflowChildren","groups","groupsSize","maxGroupElementsSize","groupOptions","groupsCount","length","groupsStart","alignStart","groupStart","groupIdx","group","groupElements","elementStart","groupElementsCount","idx","element","elementSize","groupElementStart","groupSize","elementBox","size","maxSize","start","align","children","childrenCount","groupElementsSize","wrap","push","Math","max","width","height","createVisual"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-charts/dist/es2015/core/float-element.js"],"sourcesContent":["import ChartElement from './chart-element';\nimport Box from './box';\n\nimport { X, Y, WIDTH, HEIGHT, RIGHT, BOTTOM, CENTER } from '../common/constants';\nimport { round, setDefaultOptions } from '../common';\n\nclass FloatElement extends ChartElement {\n    constructor(options) {\n        super(options);\n        this._initDirection();\n    }\n\n    _initDirection() {\n        const options = this.options;\n        if (options.vertical) {\n            this.groupAxis = X;\n            this.elementAxis = Y;\n            this.groupSizeField = WIDTH;\n            this.elementSizeField = HEIGHT;\n            this.groupSpacing = options.spacing;\n            this.elementSpacing = options.vSpacing;\n        } else {\n            this.groupAxis = Y;\n            this.elementAxis = X;\n            this.groupSizeField = HEIGHT;\n            this.elementSizeField = WIDTH;\n            this.groupSpacing = options.vSpacing;\n            this.elementSpacing = options.spacing;\n        }\n    }\n\n    reflow(targetBox) {\n        this.box = targetBox.clone();\n        this.reflowChildren();\n    }\n\n    reflowChildren() {\n        const { box, elementAxis, groupAxis, elementSizeField, groupSizeField } = this;\n        const { groups, groupsSize, maxGroupElementsSize } = this.groupOptions();\n        const groupsCount = groups.length;\n        const groupsStart = box[groupAxis + 1] + this.alignStart(groupsSize, box[groupSizeField]());\n\n        if (groupsCount) {\n            let groupStart = groupsStart;\n\n            for (let groupIdx = 0; groupIdx < groupsCount; groupIdx++) {\n                let group = groups[groupIdx];\n                let groupElements = group.groupElements;\n                let elementStart = box[elementAxis + 1];\n                let groupElementsCount = groupElements.length;\n\n                for (let idx = 0; idx < groupElementsCount; idx++) {\n                    let element = groupElements[idx];\n                    let elementSize = this.elementSize(element);\n                    let groupElementStart = groupStart + this.alignStart(elementSize[groupSizeField], group.groupSize);\n\n                    let elementBox = new Box();\n                    elementBox[groupAxis + 1] = groupElementStart;\n                    elementBox[groupAxis + 2] = groupElementStart + elementSize[groupSizeField];\n                    elementBox[elementAxis + 1] = elementStart;\n                    elementBox[elementAxis + 2] = elementStart + elementSize[elementSizeField];\n\n                    element.reflow(elementBox);\n\n                    elementStart += elementSize[elementSizeField] + this.elementSpacing;\n                }\n                groupStart += group.groupSize + this.groupSpacing;\n            }\n            box[groupAxis + 1] = groupsStart;\n            box[groupAxis + 2] = groupsStart + groupsSize;\n            box[elementAxis + 2] = box[elementAxis + 1] + maxGroupElementsSize;\n        }\n    }\n\n    alignStart(size, maxSize) {\n        let start = 0;\n        const align = this.options.align;\n        if (align === RIGHT || align === BOTTOM) {\n            start = maxSize - size;\n        } else if (align === CENTER) {\n            start = (maxSize - size) / 2;\n        }\n        return start;\n    }\n\n    groupOptions() {\n        const { box, children, elementSizeField, groupSizeField, elementSpacing, groupSpacing } = this;\n        const maxSize = round(box[elementSizeField]());\n        const childrenCount = children.length;\n        const groups = [];\n\n        let groupSize = 0;\n        let groupElementsSize = 0;\n        let groupsSize = 0;\n        let maxGroupElementsSize = 0;\n        let groupElements = [];\n\n        for (let idx = 0; idx < childrenCount; idx++) {\n            let element = children[idx];\n            if (!element.box) {\n                element.reflow(box);\n            }\n\n            let elementSize = this.elementSize(element);\n            if (this.options.wrap && round(groupElementsSize + elementSpacing + elementSize[elementSizeField]) > maxSize) {\n                groups.push({\n                    groupElements: groupElements,\n                    groupSize: groupSize,\n                    groupElementsSize: groupElementsSize\n                });\n                maxGroupElementsSize = Math.max(maxGroupElementsSize, groupElementsSize);\n                groupsSize += groupSpacing + groupSize;\n                groupSize = 0;\n                groupElementsSize = 0;\n                groupElements = [];\n            }\n            groupSize = Math.max(groupSize, elementSize[groupSizeField]);\n            if (groupElementsSize > 0) {\n                groupElementsSize += elementSpacing;\n            }\n            groupElementsSize += elementSize[elementSizeField];\n            groupElements.push(element);\n        }\n\n        groups.push({\n            groupElements: groupElements,\n            groupSize: groupSize,\n            groupElementsSize: groupElementsSize\n        });\n        maxGroupElementsSize = Math.max(maxGroupElementsSize, groupElementsSize);\n        groupsSize += groupSize;\n\n        return {\n            groups: groups,\n            groupsSize: groupsSize,\n            maxGroupElementsSize: maxGroupElementsSize\n        };\n    }\n\n    elementSize(element) {\n        return {\n            width: element.box.width(),\n            height: element.box.height()\n        };\n    }\n\n    createVisual() {}\n}\n\nsetDefaultOptions(FloatElement, {\n    vertical: true,\n    wrap: true,\n    vSpacing: 0,\n    spacing: 0\n});\n\nexport default FloatElement;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}