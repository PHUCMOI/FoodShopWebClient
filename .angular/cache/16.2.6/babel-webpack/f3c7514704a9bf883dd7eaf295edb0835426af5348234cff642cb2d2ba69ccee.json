{"ast":null,"code":"import { drawing as draw, throttle, geometry } from '@progress/kendo-drawing';\nimport { RootElement, Title, CategoryAxis, Point } from '../core';\nimport Highlight from './highlight';\nimport Pannable from './pan-and-zoom/pannable';\nimport ZoomSelection from './pan-and-zoom/zoom-selection';\nimport MousewheelZoom from './pan-and-zoom/mousewheel-zoom';\nimport Legend from './legend/legend';\nimport PlotAreaFactory from './plotarea/plotarea-factory';\nimport Selection from './selection';\nimport SeriesBinder from './series-binder';\nimport Tooltip from './tooltip/tooltip';\nimport SharedTooltip from './tooltip/shared-tooltip';\nimport CategoricalPlotArea from './plotarea/categorical-plotarea';\nimport PlotAreaBase from './plotarea/plotarea-base';\nimport { ChartService, DomEventsBuilder } from '../services';\nimport getField from './utils/get-field';\nimport isDateAxis from './utils/is-date-axis';\nimport getDateField from './utils/get-date-field';\nimport { ChartPane, ChartPlotArea, findAxisByName } from './api-elements';\nimport { X, Y, VALUE, DEFAULT_WIDTH, DEFAULT_HEIGHT, DEFAULT_SERIES_OPACITY } from '../common/constants';\nimport { addClass, Class, setDefaultOptions, deepExtend, defined, find, isObject, isFunction, elementSize, elementOffset, elementScale, elementStyles, eventCoordinates, bindEvents, unbindEvents, mousewheelDelta, FontLoader, inArray, last, round, HashMap, valueOrDefault } from '../common';\nimport { dateComparer } from '../date-utils';\nimport { DRAG_START, DRAG, DRAG_END, ZOOM_START, ZOOM, ZOOM_END, SELECT_START, SELECT, SELECT_END, PLOT_AREA_HOVER, PLOT_AREA_LEAVE, RENDER, CATEGORY, PIE, DONUT, FUNNEL, PYRAMID, COLUMN, MOUSEWHEEL, MOUSEWHEEL_DELAY, MOUSEWHEEL_ZOOM_RATE, SHOW_TOOLTIP, SERIES_HOVER, SERIES_OVER, SERIES_LEAVE, SERIES_CLICK, DRILLDOWN } from './constants';\nimport './animations';\nimport './register-charts';\nconst AXIS_NAMES = [CATEGORY, VALUE, X, Y];\nconst MOUSEMOVE = \"mousemove\";\nconst CONTEXTMENU = \"contextmenu\";\nconst MOUSELEAVE = \"mouseleave\";\nconst MOUSEMOVE_DELAY = 20;\nclass Chart extends Class {\n  constructor(element, userOptions, themeOptions, context = {}) {\n    super();\n    this.observers = [];\n    this.addObserver(context.observer);\n    this.chartService = new ChartService(this, context);\n    this.chartService.theme = themeOptions;\n    this._initElement(element);\n    const options = deepExtend({}, this.options, userOptions);\n    this._originalOptions = deepExtend({}, options);\n    this._theme = themeOptions;\n    this._initTheme(options, themeOptions);\n    this._initHandlers();\n    this._initSurface();\n    this.bindCategories();\n    FontLoader.preloadFonts(userOptions, () => {\n      this.fontLoaded = true;\n      if (!this._destroyed) {\n        this.trigger('init');\n        this._redraw();\n        this._attachEvents();\n      }\n    });\n  }\n  _initElement(element) {\n    this._setElementClass(element);\n    element.style.position = \"relative\";\n    while (element.firstChild) {\n      element.removeChild(element.firstChild);\n    }\n    this.element = element;\n  }\n  _setElementClass(element) {\n    addClass(element, \"k-chart\");\n  }\n  _initTheme(options, themeOptions) {\n    const seriesCopies = [];\n    const series = options.series || [];\n    for (let i = 0; i < series.length; i++) {\n      seriesCopies.push(Object.assign({}, series[i]));\n    }\n    options.series = seriesCopies;\n    resolveAxisAliases(options);\n    this.applyDefaults(options, themeOptions);\n\n    // Clean up default if not overriden by data attributes\n    if (options.seriesColors === null) {\n      delete options.seriesColors;\n    }\n    this.options = deepExtend({}, themeOptions, options);\n    this.applySeriesColors();\n  }\n  getSize() {\n    const chartArea = this.options.chartArea || {};\n    const width = chartArea.width ? parseInt(chartArea.width, 10) : Math.floor(this.element.offsetWidth);\n    const height = chartArea.height ? parseInt(chartArea.height, 10) : Math.floor(this.element.offsetHeight);\n    return {\n      width: width,\n      height: height\n    };\n  }\n  resize(force) {\n    const size = this.getSize();\n    const currentSize = this._size;\n    const hasSize = size.width > 0 || size.height > 0;\n    if (force || hasSize && (!currentSize || size.width !== currentSize.width || size.height !== currentSize.height)) {\n      this._size = size;\n      this._resize(size, force);\n      this.trigger(\"resize\", size);\n    } else if (hasSize && this._selections && find(this._selections, s => !s.visible)) {\n      this._destroySelections();\n      this._setupSelection();\n    }\n  }\n  _resize() {\n    this._noTransitionsRedraw();\n  }\n  redraw(paneName) {\n    this.applyDefaults(this.options);\n    this.applySeriesColors();\n    if (paneName) {\n      const plotArea = this._model._plotArea;\n      const pane = plotArea.findPane(paneName);\n      plotArea.redraw(pane);\n    } else {\n      this._redraw();\n    }\n  }\n  getAxis(name) {\n    return findAxisByName(name, this._plotArea.axes);\n  }\n  findAxisByName(name) {\n    return this.getAxis(name);\n  }\n  findPaneByName(name) {\n    const panes = this._plotArea.panes;\n    for (let idx = 0; idx < panes.length; idx++) {\n      if (panes[idx].options.name === name) {\n        return new ChartPane(panes[idx]);\n      }\n    }\n  }\n  findPaneByIndex(idx) {\n    const panes = this._plotArea.panes;\n    if (panes[idx]) {\n      return new ChartPane(panes[idx]);\n    }\n  }\n  plotArea() {\n    return new ChartPlotArea(this._plotArea);\n  }\n  toggleHighlight(show, filter) {\n    const plotArea = this._plotArea;\n    const firstSeries = (plotArea.srcSeries || plotArea.series || [])[0];\n    let points;\n    if (isFunction(filter)) {\n      points = plotArea.filterPoints(filter);\n    } else {\n      let seriesName, categoryName;\n      if (isObject(filter)) {\n        seriesName = filter.series;\n        categoryName = filter.category;\n      } else {\n        seriesName = categoryName = filter;\n      }\n      if (firstSeries.type === DONUT) {\n        points = pointByCategoryName(plotArea.pointsBySeriesName(seriesName), categoryName);\n      } else if (inArray(firstSeries.type, [PIE, FUNNEL, PYRAMID])) {\n        points = pointByCategoryName((plotArea.charts[0] || {}).points, categoryName);\n      } else {\n        points = plotArea.pointsBySeriesName(seriesName);\n      }\n    }\n    if (points) {\n      this.togglePointsHighlight(show, points);\n    }\n  }\n  togglePointsHighlight(show, points) {\n    const highlight = this._highlight;\n    for (let idx = 0; idx < points.length; idx++) {\n      highlight.togglePointHighlight(points[idx], show);\n    }\n  }\n  showTooltip(filter) {\n    const shared = this._sharedTooltip();\n    const {\n      _tooltip: tooltip,\n      _plotArea: plotArea\n    } = this;\n    let point, categoryIndex;\n    if (isFunction(filter)) {\n      point = plotArea.findPoint(filter);\n      if (point && shared) {\n        categoryIndex = point.categoryIx;\n      }\n    } else if (shared && defined(filter)) {\n      categoryIndex = plotArea.categoryAxis.categoryIndex(filter);\n    }\n    if (shared) {\n      if (categoryIndex >= 0) {\n        const points = this._plotArea.pointsByCategoryIndex(categoryIndex);\n        tooltip.showAt(points);\n      }\n    } else if (point) {\n      tooltip.show(point);\n    }\n  }\n  hideTooltip() {\n    this._tooltip.hide();\n  }\n  _initSurface() {\n    const surface = this.surface;\n    const wrap = this._surfaceWrap();\n    const chartArea = this.options.chartArea || {};\n    if (chartArea.width) {\n      elementSize(wrap, {\n        width: chartArea.width\n      });\n    }\n    if (chartArea.height) {\n      elementSize(wrap, {\n        height: chartArea.height\n      });\n    }\n    if (!surface || surface.options.type !== this.options.renderAs) {\n      this._destroySurface();\n      this.surface = draw.Surface.create(wrap, {\n        type: this.options.renderAs\n      });\n      this.surface.bind(\"mouseenter\", this._surfaceMouseenterHandler);\n      this.surface.bind(\"mouseleave\", this._surfaceMouseleaveHandler);\n    } else {\n      this.surface.clear();\n      this.surface.resize();\n    }\n  }\n  _surfaceWrap() {\n    return this.element;\n  }\n  _redraw() {\n    const model = this._getModel();\n    this._size = {\n      width: model.options.width,\n      height: model.options.height\n    };\n    this._destroyView();\n    this._model = model;\n    this._plotArea = model._plotArea;\n    model.renderVisual();\n    if (this.options.transitions !== false) {\n      model.traverse(function (element) {\n        if (element.animation) {\n          element.animation.setup();\n        }\n      });\n    }\n    this._initSurface();\n    this.surface.draw(model.visual);\n    if (this.options.transitions !== false) {\n      model.traverse(function (element) {\n        if (element.animation) {\n          element.animation.play();\n        }\n      });\n    }\n    this._tooltip = this._createTooltip();\n    this._highlight = new Highlight();\n    this._setupSelection();\n    this._createPannable();\n    this._createZoomSelection();\n    this._createMousewheelZoom();\n    this.trigger(RENDER);\n    triggerPaneRender(this._plotArea.panes);\n    if (!this._navState) {\n      this._cancelDomEvents();\n    }\n  }\n  exportVisual(exportOptions) {\n    let visual;\n    if (exportOptions && (exportOptions.width || exportOptions.height || exportOptions.options)) {\n      const currentOptions = this.options;\n      const options = deepExtend({}, exportOptions.options, {\n        chartArea: {\n          width: exportOptions.width,\n          height: exportOptions.height\n        }\n      });\n      clearMissingValues(this._originalOptions, options);\n      this.options = deepExtend({}, this._originalOptions, options);\n      this._initTheme(this.options, this._theme);\n      this.bindCategories();\n      const model = this._getModel();\n      model.renderVisual();\n      triggerPaneRender(model._plotArea.panes);\n      visual = model.visual;\n      this.options = currentOptions;\n    } else {\n      visual = this.surface.exportVisual();\n    }\n    return visual;\n  }\n  _sharedTooltip() {\n    return this._plotArea instanceof CategoricalPlotArea && this.options.tooltip && this.options.tooltip.shared;\n  }\n  _createPannable() {\n    const options = this.options;\n    if (options.pannable !== false) {\n      this._pannable = new Pannable(this._plotArea, options.pannable);\n    }\n  }\n  _createZoomSelection() {\n    const zoomable = this.options.zoomable;\n    const selection = (zoomable || {}).selection;\n    if (zoomable !== false && selection !== false) {\n      this._zoomSelection = new ZoomSelection(this, selection);\n    }\n  }\n  _createMousewheelZoom() {\n    const zoomable = this.options.zoomable;\n    const mousewheel = (zoomable || {}).mousewheel;\n    if (zoomable !== false && mousewheel !== false) {\n      this._mousewheelZoom = new MousewheelZoom(this, mousewheel);\n    }\n  }\n  _toggleDragZoomEvents() {\n    const pannable = this.options.pannable;\n    const zoomable = this.options.zoomable;\n    const selection = (zoomable || {}).selection;\n    const mousewheel = (zoomable || {}).mousewheel;\n    const allowDrag = !pannable && (zoomable === false || selection === false) && !this.requiresHandlers([DRAG_START, DRAG, DRAG_END]);\n    const allowZoom = (zoomable === false || mousewheel === false) && !this.requiresHandlers([ZOOM_START, ZOOM, ZOOM_END]);\n    const element = this.element;\n    if (this._dragZoomEnabled && allowDrag && allowZoom) {\n      element.style.touchAction = this._touchAction || '';\n      this._dragZoomEnabled = false;\n    } else if (!this._dragZoomEnabled && !(allowDrag && allowZoom)) {\n      element.style.touchAction = \"none\";\n      this._dragZoomEnabled = true;\n    }\n    this._toggleDomEvents(!allowDrag, !allowZoom);\n  }\n  _toggleDomEvents(drag, zoom) {\n    const domEvents = this.domEvents;\n    if (!domEvents) {\n      return;\n    }\n    if (domEvents.toggleDrag) {\n      domEvents.toggleDrag(drag);\n    }\n    if (domEvents.toggleZoom) {\n      domEvents.toggleZoom(zoom);\n    }\n  }\n  _createTooltip() {\n    const {\n      options: {\n        tooltip: tooltipOptions\n      }\n    } = this;\n    let tooltip;\n    if (this._sharedTooltip()) {\n      tooltip = this._createSharedTooltip(tooltipOptions);\n    } else {\n      tooltip = new Tooltip(this.chartService, tooltipOptions);\n    }\n    return tooltip;\n  }\n  _createSharedTooltip(options) {\n    return new SharedTooltip(this._plotArea, options);\n  }\n  applyDefaults(options, themeOptions) {\n    applyAxisDefaults(options, themeOptions);\n    applySeriesDefaults(options, themeOptions);\n  }\n  applySeriesColors() {\n    const options = this.options;\n    const series = options.series;\n    const colors = options.seriesColors || [];\n    for (let i = 0; i < series.length; i++) {\n      const currentSeries = series[i];\n      const seriesColor = colors[i % colors.length];\n      const defaults = currentSeries._defaults;\n      currentSeries.color = currentSeries.color || seriesColor;\n      if (defaults) {\n        defaults.color = defaults.color || seriesColor;\n      }\n    }\n  }\n  _getModel() {\n    const options = this.options;\n    const plotArea = this._createPlotArea();\n    const model = new RootElement(this._modelOptions());\n    model.chart = this;\n    model._plotArea = plotArea;\n    const title = Title.buildTitle(options.title);\n    const subtitle = Title.buildTitle(options.subtitle, {\n      align: options.title.align,\n      position: options.title.position\n    });\n    model.append.apply(model, Title.orderTitles([title, subtitle]));\n    if (options.legend && options.legend.visible) {\n      model.append(new Legend(plotArea.options.legend, this.chartService));\n    }\n    model.append(plotArea);\n    model.reflow();\n    return model;\n  }\n  _modelOptions() {\n    const options = this.options;\n    const size = this.getSize();\n    return deepExtend({\n      transitions: options.transitions,\n      width: size.width || DEFAULT_WIDTH,\n      height: size.height || DEFAULT_HEIGHT\n    }, options.chartArea);\n  }\n  _createPlotArea(skipSeries) {\n    const options = this.options;\n    const plotArea = PlotAreaFactory.current.create(skipSeries ? [] : options.series, options, this.chartService);\n    return plotArea;\n  }\n  _setupSelection() {\n    const {\n      _plotArea: {\n        axes\n      }\n    } = this;\n    const selections = this._selections = [];\n    for (let i = 0; i < axes.length; i++) {\n      const axis = axes[i];\n      const options = axis.options;\n      if (axis instanceof CategoryAxis && options.select && !options.vertical) {\n        const range = axis.range();\n        const selection = new Selection(this, axis, deepExtend({\n          min: range.min,\n          max: range.max\n        }, options.select));\n        selections.push(selection);\n      }\n    }\n  }\n  _selectStart(e) {\n    return this.trigger(SELECT_START, e);\n  }\n  _select(e) {\n    return this.trigger(SELECT, e);\n  }\n  _selectEnd(e) {\n    return this.trigger(SELECT_END, e);\n  }\n  _initHandlers() {\n    this._clickHandler = this._click.bind(this);\n    this._mousewheelHandler = this._mousewheel.bind(this);\n    this._mouseleaveHandler = this._mouseleave.bind(this);\n    this._surfaceMouseenterHandler = this._mouseover.bind(this);\n    this._surfaceMouseleaveHandler = this._mouseout.bind(this);\n    this._mousemove = throttle(this._mousemove.bind(this), MOUSEMOVE_DELAY);\n  }\n  addObserver(observer) {\n    if (observer) {\n      this.observers.push(observer);\n    }\n  }\n  removeObserver(observer) {\n    const index = this.observers.indexOf(observer);\n    if (index >= 0) {\n      this.observers.splice(index, 1);\n    }\n  }\n  requiresHandlers(eventNames) {\n    const observers = this.observers;\n    for (let idx = 0; idx < observers.length; idx++) {\n      if (observers[idx].requiresHandlers(eventNames)) {\n        return true;\n      }\n    }\n  }\n  trigger(name, args = {}) {\n    args.sender = this;\n    if (name === SHOW_TOOLTIP) {\n      args.anchor.point = this._toDocumentCoordinates(args.anchor.point);\n    } else if (name === SERIES_OVER) {\n      this._updateDrilldownPoint(args.point);\n    } else if (name === SERIES_LEAVE) {\n      this._resetDrilldownPoint();\n    } else if (name === SERIES_CLICK) {\n      this._startDrilldown(args.point);\n    }\n    const observers = this.observers;\n    let isDefaultPrevented = false;\n    for (let idx = 0; idx < observers.length; idx++) {\n      if (observers[idx].trigger(name, args)) {\n        isDefaultPrevented = true;\n      }\n    }\n    return isDefaultPrevented;\n  }\n  _attachEvents() {\n    const element = this.element;\n    this._touchAction = element.style.touchAction;\n    bindEvents(element, {\n      [CONTEXTMENU]: this._clickHandler,\n      [MOUSEWHEEL]: this._mousewheelHandler,\n      [MOUSELEAVE]: this._mouseleaveHandler\n    });\n    if (this._shouldAttachMouseMove()) {\n      bindEvents(element, {\n        [MOUSEMOVE]: this._mousemove\n      });\n    }\n    this.domEvents = DomEventsBuilder.create(this.element, {\n      start: this._start.bind(this),\n      move: this._move.bind(this),\n      end: this._end.bind(this),\n      tap: this._tap.bind(this),\n      gesturestart: this._gesturestart.bind(this),\n      gesturechange: this._gesturechange.bind(this),\n      gestureend: this._gestureend.bind(this)\n    });\n    this._toggleDragZoomEvents();\n  }\n  _mouseleave(e) {\n    if (this._hoveredPoint) {\n      this._hoveredPoint.out(this, e);\n      this._hoveredPoint = null;\n    }\n    if (this._plotAreaHovered) {\n      this._plotAreaHovered = false;\n      this.trigger(PLOT_AREA_LEAVE);\n    }\n    if (this._hasInactiveOpacity() && this._activeChartInstance) {\n      this._applySeriesOpacity(this._activeChartInstance.children, null, true);\n      this._updateSeriesOpacity(null, true);\n    }\n  }\n  _cancelDomEvents() {\n    if (this.domEvents && this.domEvents.cancel) {\n      this.domEvents.cancel();\n    }\n  }\n  _gesturestart(e) {\n    if (this._mousewheelZoom && !this._stopChartHandlers(e)) {\n      this._gestureDistance = e.distance;\n      this._unsetActivePoint();\n      this.surface.suspendTracking();\n    }\n  }\n  _gestureend(e) {\n    if (this._zooming && !this._stopChartHandlers(e)) {\n      if (this.surface) {\n        this.surface.resumeTracking();\n      }\n      this._zooming = false;\n      this.trigger(ZOOM_END, {});\n    }\n  }\n  _gesturechange(e) {\n    const mousewheelZoom = this._mousewheelZoom;\n    if (mousewheelZoom && !this._stopChartHandlers(e)) {\n      e.preventDefault();\n      const previousGestureDistance = this._gestureDistance;\n      let scaleDelta = -e.distance / previousGestureDistance + 1;\n      if (Math.abs(scaleDelta) >= 0.1) {\n        scaleDelta = Math.round(scaleDelta * 10);\n        this._gestureDistance = e.distance;\n        const args = {\n          delta: scaleDelta,\n          axisRanges: axisRanges(this._plotArea.axes),\n          originalEvent: e\n        };\n        if (this._zooming || !this.trigger(ZOOM_START, args)) {\n          const coords = this._eventCoordinates(e);\n          if (!this._zooming) {\n            this._zooming = true;\n          }\n          const ranges = args.axisRanges = mousewheelZoom.updateRanges(scaleDelta, coords);\n          if (ranges && !this.trigger(ZOOM, args)) {\n            mousewheelZoom.zoom();\n          }\n        }\n      }\n    }\n  }\n  _mouseout(e) {\n    if (e.element) {\n      const element = this._drawingChartElement(e.element, e);\n      if (element && element.leave) {\n        element.leave(this, e.originalEvent);\n      }\n    }\n  }\n  _start(e) {\n    const coords = this._eventCoordinates(e);\n    if (this._stopChartHandlers(e) || !this._plotArea.backgroundContainsPoint(coords)) {\n      return;\n    }\n    if (this.requiresHandlers([DRAG_START, DRAG, DRAG_END])) {\n      this._startNavigation(e, coords, DRAG_START);\n    }\n    if (this._pannable && this._pannable.start(e)) {\n      this.surface.suspendTracking();\n      this._unsetActivePoint();\n      this._suppressHover = true;\n      this.chartService.panning = true;\n    }\n    if (this._zoomSelection) {\n      if (this._zoomSelection.start(e)) {\n        this.trigger(ZOOM_START, {\n          axisRanges: axisRanges(this._plotArea.axes),\n          originalEvent: e\n        });\n      }\n    }\n  }\n  _move(e) {\n    let {\n      _navState: state,\n      _pannable: pannable\n    } = this;\n    if (this._stopChartHandlers(e)) {\n      return;\n    }\n    if (pannable) {\n      const ranges = pannable.move(e);\n      if (ranges && !this.trigger(DRAG, {\n        axisRanges: ranges,\n        originalEvent: e\n      })) {\n        pannable.pan();\n      }\n    } else if (state) {\n      const ranges = {};\n      const axes = state.axes;\n      for (let i = 0; i < axes.length; i++) {\n        const currentAxis = axes[i];\n        const axisName = currentAxis.options.name;\n        if (axisName) {\n          const axis = currentAxis.options.vertical ? e.y : e.x;\n          const delta = axis.startLocation - axis.location;\n          if (delta !== 0) {\n            ranges[currentAxis.options.name] = currentAxis.translateRange(delta);\n          }\n        }\n      }\n      state.axisRanges = ranges;\n      this.trigger(DRAG, {\n        axisRanges: ranges,\n        originalEvent: e\n      });\n    }\n    if (this._zoomSelection) {\n      this._zoomSelection.move(e);\n    }\n  }\n  _end(e) {\n    if (this._stopChartHandlers(e)) {\n      return;\n    }\n    const pannable = this._pannable;\n    if (pannable && pannable.end(e)) {\n      this.surface.resumeTracking();\n      this.trigger(DRAG_END, {\n        axisRanges: axisRanges(this._plotArea.axes),\n        originalEvent: e\n      });\n      this._suppressHover = false;\n      this.chartService.panning = false;\n    } else {\n      this._endNavigation(e, DRAG_END);\n    }\n    if (this._zoomSelection) {\n      const ranges = this._zoomSelection.end(e);\n      if (ranges && !this.trigger(ZOOM, {\n        axisRanges: ranges,\n        originalEvent: e\n      })) {\n        this._zoomSelection.zoom();\n        this.trigger(ZOOM_END, {\n          axisRanges: ranges,\n          originalEvent: e\n        });\n      }\n    }\n  }\n  _stopChartHandlers(e) {\n    const selections = this._selections || [];\n    if (!selections.length) {\n      return false;\n    }\n    const coords = this._eventCoordinates(e);\n    const pane = this._plotArea.paneByPoint(coords);\n    if (pane) {\n      for (let idx = 0; idx < selections.length; idx++) {\n        if (selections[idx].onPane(pane)) {\n          return true;\n        }\n      }\n    }\n  }\n  _mousewheelZoomRate() {\n    const zoomable = this.options.zoomable;\n    const mousewheel = (zoomable || {}).mousewheel || {};\n    return valueOrDefault(mousewheel.rate, MOUSEWHEEL_ZOOM_RATE);\n  }\n  _mousewheel(e) {\n    const delta = mousewheelDelta(e);\n    const mousewheelZoom = this._mousewheelZoom;\n    const coords = this._eventCoordinates(e);\n    if (this._stopChartHandlers(e) || !this._plotArea.backgroundContainsPoint(coords)) {\n      return;\n    }\n    if (mousewheelZoom) {\n      const args = {\n        delta: delta,\n        axisRanges: axisRanges(this._plotArea.axes),\n        originalEvent: e\n      };\n      if (this._zooming || !this.trigger(ZOOM_START, args)) {\n        e.preventDefault();\n        if (!this._zooming) {\n          this._unsetActivePoint();\n          this.surface.suspendTracking();\n          this._zooming = true;\n        }\n        if (this._mwTimeout) {\n          clearTimeout(this._mwTimeout);\n        }\n        args.axisRanges = mousewheelZoom.updateRanges(delta, coords);\n        if (args.axisRanges && !this.trigger(ZOOM, args)) {\n          mousewheelZoom.zoom();\n        }\n        this._mwTimeout = setTimeout(() => {\n          this.trigger(ZOOM_END, args);\n          this._zooming = false;\n          if (this.surface) {\n            this.surface.resumeTracking();\n          }\n        }, MOUSEWHEEL_DELAY);\n      }\n    } else {\n      let state = this._navState;\n      if (!state) {\n        const prevented = this._startNavigation(e, coords, ZOOM_START);\n        if (!prevented) {\n          state = this._navState;\n        }\n      }\n      if (state) {\n        const totalDelta = state.totalDelta || delta;\n        state.totalDelta = totalDelta + delta;\n        const axes = this._navState.axes;\n        const ranges = {};\n        for (let i = 0; i < axes.length; i++) {\n          const currentAxis = axes[i];\n          const axisName = currentAxis.options.name;\n          if (axisName) {\n            ranges[axisName] = currentAxis.scaleRange(-totalDelta * this._mousewheelZoomRate(), coords);\n          }\n        }\n        this.trigger(ZOOM, {\n          delta: delta,\n          axisRanges: ranges,\n          originalEvent: e\n        });\n        if (this._mwTimeout) {\n          clearTimeout(this._mwTimeout);\n        }\n        this._mwTimeout = setTimeout(() => {\n          this._endNavigation(e, ZOOM_END);\n        }, MOUSEWHEEL_DELAY);\n      }\n    }\n  }\n  _startNavigation(e, coords, chartEvent) {\n    const plotArea = this._model._plotArea;\n    const pane = plotArea.findPointPane(coords);\n    const axes = plotArea.axes.slice(0);\n    if (!pane) {\n      return;\n    }\n    const ranges = axisRanges(axes);\n    const prevented = this.trigger(chartEvent, {\n      axisRanges: ranges,\n      originalEvent: e\n    });\n    if (prevented) {\n      this._cancelDomEvents();\n    } else {\n      this._suppressHover = true;\n      this._unsetActivePoint();\n      this._navState = {\n        axisRanges: ranges,\n        pane: pane,\n        axes: axes\n      };\n    }\n  }\n  _endNavigation(e, chartEvent) {\n    if (this._navState) {\n      this.trigger(chartEvent, {\n        axisRanges: this._navState.axisRanges,\n        originalEvent: e\n      });\n      this._suppressHover = false;\n      this._navState = null;\n    }\n  }\n  _getChartElement(e, match) {\n    const element = this.surface.eventTarget(e);\n    if (element) {\n      return this._drawingChartElement(element, e, match);\n    }\n  }\n  _drawingChartElement(element, e, match) {\n    let current = element;\n    let chartElement;\n    while (current && !chartElement) {\n      chartElement = current.chartElement;\n      current = current.parent;\n    }\n    if (chartElement) {\n      if (chartElement.aliasFor) {\n        chartElement = chartElement.aliasFor(e, this._eventCoordinates(e));\n      }\n      if (match) {\n        chartElement = chartElement.closest(match);\n        if (chartElement && chartElement.aliasFor) {\n          chartElement = chartElement.aliasFor();\n        }\n      }\n      return chartElement;\n    }\n  }\n  _eventCoordinates(e) {\n    const coordinates = eventCoordinates(e);\n    return this._toModelCoordinates(coordinates.x, coordinates.y);\n  }\n  _elementPadding() {\n    if (!this._padding) {\n      const {\n        paddingLeft,\n        paddingTop\n      } = elementStyles(this.element, [\"paddingLeft\", \"paddingTop\"]);\n      this._padding = {\n        top: paddingTop,\n        left: paddingLeft\n      };\n    }\n    return this._padding;\n  }\n  _toDocumentCoordinates(point) {\n    const padding = this._elementPadding();\n    const offset = elementOffset(this.element);\n    return {\n      left: round(point.x + padding.left + offset.left),\n      top: round(point.y + padding.top + offset.top)\n    };\n  }\n\n  // TODO: Breaking change due to peer version change\n  // Reuse by exposing _surfacePoint on Surface\n  _toModelCoordinates(clientX, clientY) {\n    const element = this.element;\n    const offset = elementOffset(element);\n    const padding = this._elementPadding();\n    const inverseTransform = elementScale(element).invert();\n    const point = new geometry.Point(clientX - offset.left - padding.left, clientY - offset.top - padding.top).transform(inverseTransform);\n    return new Point(point.x, point.y);\n  }\n  _tap(e) {\n    const drawingElement = this.surface.eventTarget(e);\n    const element = this._drawingChartElement(drawingElement, e);\n    const sharedTooltip = this._sharedTooltip();\n    if (!this._startHover(drawingElement, e) && !sharedTooltip) {\n      this._unsetActivePoint();\n    }\n    if (sharedTooltip) {\n      this._trackSharedTooltip(this._eventCoordinates(e), e, true);\n    }\n    this._propagateClick(element, e);\n\n    //part of fix for hover issue on windows touch\n    this.handlingTap = true;\n    setTimeout(() => {\n      this.handlingTap = false;\n    }, 0);\n  }\n  _click(e) {\n    const element = this._getChartElement(e);\n    this._propagateClick(element, e);\n  }\n  _propagateClick(element, e) {\n    let current = element;\n    while (current) {\n      if (current.click) {\n        current.click(this, e);\n      }\n      current = current.parent;\n    }\n  }\n  _startHover(element, e) {\n    if (this._suppressHover) {\n      return false;\n    }\n    let point = this._drawingChartElement(element, e, function (element) {\n      return (element.hover || element.over) && !(element instanceof PlotAreaBase);\n    });\n    this._showInactiveOpacity(point, e);\n    return point;\n  }\n  _displayTooltip(point) {\n    const tooltipOptions = deepExtend({}, this.options.tooltip, point.options.tooltip);\n    if (tooltipOptions.visible) {\n      this._tooltip.show(point);\n    }\n  }\n  _displayInactiveOpacity(activePoint, multipleSeries, highlightPoints) {\n    const chartInstance = this._activeChartInstance = this._chartInstanceFromPoint(activePoint);\n    if (!chartInstance) {\n      return;\n    }\n    if (multipleSeries) {\n      this._updateSeriesOpacity(activePoint);\n      this._applySeriesOpacity(chartInstance.children, null, true);\n      this._applySeriesOpacity(chartInstance.children, activePoint.series);\n      this._highlight.show(highlightPoints || activePoint);\n    } else {\n      let inactivePoints;\n      if (!chartInstance.supportsPointInactiveOpacity()) {\n        this._highlight.show(activePoint);\n        return;\n      }\n      inactivePoints = this._getInactivePoints(activePoint, chartInstance);\n      if (inactivePoints && inactivePoints.length) {\n        this._highlight.show(inactivePoints, 1 - this._getInactiveOpacityForSeries(activePoint.series));\n      }\n    }\n  }\n  _getInactivePoints(activePoint, chartInstance) {\n    let allPoints = this._getAllPointsOfType(chartInstance, activePoint.constructor);\n    return allPoints.filter(point => point !== activePoint);\n  }\n  _getAllPointsOfType(container, type) {\n    let points = [];\n    for (let i = 0; i < container.children.length; i++) {\n      const element = container.children[i];\n      if (element.constructor === type) {\n        points.push(element);\n      } else if (element.children && element.children.length) {\n        points = points.concat(this._getAllPointsOfType(element, type));\n      }\n    }\n    return points;\n  }\n  _updateHoveredPoint(point, e) {\n    const hoveredPoint = this._hoveredPoint;\n    if (hoveredPoint && hoveredPoint !== point) {\n      hoveredPoint.out(this, e);\n      this._hoveredPoint = null;\n    }\n    if (point && hoveredPoint !== point && point.over) {\n      this._hoveredPoint = point;\n      point.over(this, e);\n    }\n  }\n  _updateDrilldownPoint(point) {\n    if (!point || !point.series) {\n      return;\n    }\n    const {\n      fields\n    } = SeriesBinder.current.bindPoint(point.series, null, point.dataItem);\n    if (fields.drilldown) {\n      this._drilldownState = {\n        cursor: this.element.style.cursor\n      };\n      this.element.style.cursor = 'pointer';\n    }\n  }\n  _resetDrilldownPoint() {\n    if (this._drilldownState) {\n      this.element.style.cursor = this._drilldownState.cursor;\n      this._drilldownState = null;\n    }\n  }\n  _startDrilldown(point) {\n    if (!point || !point.series) {\n      return;\n    }\n    const series = point.series;\n    const {\n      fields\n    } = SeriesBinder.current.bindPoint(series, null, point.dataItem);\n    const value = fields.drilldown;\n    if (value) {\n      const args = {\n        series,\n        point,\n        value,\n        sender: this\n      };\n      this.trigger(DRILLDOWN, args);\n    }\n  }\n  _updateSeriesOpacity(point, resetOpacity) {\n    const plotArea = this._plotArea;\n    const length = plotArea.series.length;\n    for (let i = 0; i < length; i++) {\n      const currSeries = plotArea.series[i];\n      const defaultOpacity = this._getDefaultOpacityForSeries(currSeries);\n      const inactiveOpacity = this._getInactiveOpacityForSeries(currSeries);\n      if (!resetOpacity && currSeries !== point.series) {\n        currSeries.defaultOpacity = defaultOpacity;\n        currSeries.opacity = inactiveOpacity;\n        if (currSeries.line) {\n          currSeries.line.opacity = inactiveOpacity;\n        }\n      } else {\n        currSeries.opacity = defaultOpacity;\n        if (currSeries.line) {\n          currSeries.line.opacity = defaultOpacity;\n        }\n      }\n    }\n  }\n  _applySeriesOpacity(elements, activeSeries, reset, series) {\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      const currSeries = element.series || series;\n      const shouldHighlight = currSeries && (currSeries.highlight || {}).visible;\n      if (shouldHighlight && element.visual) {\n        const opacity = series ? series.opacity : element.series.opacity;\n        if (currSeries !== activeSeries || reset) {\n          element.visual.opacity(reset ? 1 : opacity);\n        }\n      }\n      if (element.children && element.children.length) {\n        this._applySeriesOpacity(element.children, activeSeries, reset, element.series);\n      }\n    }\n  }\n  _chartInstanceFromPoint(point) {\n    let chartInstance = point.parent;\n    while (chartInstance && !chartInstance.plotArea) {\n      chartInstance = chartInstance.parent;\n    }\n    return chartInstance;\n  }\n  _showInactiveOpacity(point, e) {\n    const activePoint = this._activePoint;\n    const multipleSeries = this._plotArea.series.length > 1;\n    const hasInactiveOpacity = this._hasInactiveOpacity();\n    this._updateHoveredPoint(point, e);\n    if (point && activePoint !== point && point.hover) {\n      this._activePoint = point;\n      if (!this._sharedTooltip() && !point.hover(this, e)) {\n        this._displayTooltip(point);\n        if (hasInactiveOpacity) {\n          this._displayInactiveOpacity(point, multipleSeries);\n        } else {\n          this._highlight.show(point);\n        }\n      }\n    }\n    return point;\n  }\n  _hideInactiveOpacity(point) {\n    const multipleSeries = this._plotArea.series.length > 1;\n    const hasInactiveOpacity = this._hasInactiveOpacity();\n    if (hasInactiveOpacity) {\n      if (multipleSeries && this._activeChartInstance) {\n        this._updateSeriesOpacity(point, true);\n        this._applySeriesOpacity(this._activeChartInstance.children, null, true);\n        this._activeChartInstance = null;\n      }\n      this._highlight && this._highlight.hide();\n      this._activePoint = null;\n    }\n  }\n  _hasInactiveOpacity() {\n    let hasDefaultInactiveOpacity = this.options.seriesDefaults.highlight.inactiveOpacity !== undefined;\n    let hasInactiveOpacity = this.options.series.filter(s => s.highlight.inactiveOpacity !== undefined).length > 0;\n    return hasDefaultInactiveOpacity || hasInactiveOpacity;\n  }\n  _getInactiveOpacityForSeries(series) {\n    let defaultInactiveOpacity = this.options.seriesDefaults.highlight.inactiveOpacity;\n    let seriesInactiveOpacity = series.highlight.inactiveOpacity;\n    return seriesInactiveOpacity || defaultInactiveOpacity || series.opacity || DEFAULT_SERIES_OPACITY;\n  }\n  _getDefaultOpacityForSeries(series) {\n    return series.defaultOpacity || series.opacity || DEFAULT_SERIES_OPACITY;\n  }\n  _mouseover(e) {\n    const point = this._startHover(e.element, e.originalEvent);\n    if (point && point.tooltipTracking && !this._mouseMoveTrackHandler && !this._sharedTooltip()) {\n      this._mouseMoveTrackHandler = this._mouseMoveTracking.bind(this);\n      bindEvents(document, {\n        [MOUSEMOVE]: this._mouseMoveTrackHandler\n      });\n    }\n  }\n  _mouseMoveTracking(e) {\n    const {\n      options,\n      _tooltip: tooltip,\n      _highlight: highlight,\n      _activePoint: point\n    } = this;\n    const coords = this._eventCoordinates(e);\n    if (this._plotArea.box.containsPoint(coords)) {\n      if (point && point.tooltipTracking && point.series && point.parent.getNearestPoint) {\n        const seriesPoint = point.parent.getNearestPoint(coords.x, coords.y, point.seriesIx);\n        if (seriesPoint && seriesPoint !== point) {\n          this._activePoint = seriesPoint;\n          if (!seriesPoint.hover(this, e)) {\n            const tooltipOptions = deepExtend({}, options.tooltip, seriesPoint.options.tooltip);\n            if (tooltipOptions.visible) {\n              tooltip.show(seriesPoint);\n            }\n            highlight.show(seriesPoint);\n          }\n        }\n      }\n    } else {\n      unbindEvents(document, {\n        [MOUSEMOVE]: this._mouseMoveTrackHandler\n      });\n      this._unsetActivePoint();\n      this._mouseMoveTrackHandler = null;\n      this._hideInactiveOpacity(point);\n    }\n  }\n  _mousemove(e) {\n    const coords = this._eventCoordinates(e);\n    const plotArea = this._plotArea;\n    this._trackCrosshairs(coords);\n    if (plotArea.hover) {\n      const overPlotArea = plotArea.backgroundContainsPoint(coords);\n      if (overPlotArea) {\n        this._plotAreaHovered = true;\n        this._plotArea.hover(this, e);\n      } else if (this._plotAreaHovered && !overPlotArea) {\n        this._plotAreaHovered = false;\n        this.trigger(PLOT_AREA_LEAVE);\n      }\n    }\n    if (this._sharedTooltip()) {\n      this._trackSharedTooltip(coords, e);\n    }\n  }\n  _trackCrosshairs(coords) {\n    const crosshairs = this._plotArea.crosshairs;\n    for (let i = 0; i < crosshairs.length; i++) {\n      const current = crosshairs[i];\n      if (current.box.containsPoint(coords)) {\n        current.showAt(coords);\n      } else {\n        current.hide();\n      }\n    }\n  }\n  _trackSharedTooltip(coords, e, toggle) {\n    if (this._suppressHover) {\n      return;\n    }\n    const {\n      options: {\n        tooltip: tooltipOptions\n      },\n      _plotArea: plotArea,\n      _plotArea: {\n        categoryAxis\n      },\n      _tooltip: tooltip,\n      _highlight: highlight\n    } = this;\n    if (plotArea.backgroundContainsPoint(coords)) {\n      const index = categoryAxis.pointCategoryIndex(coords);\n      if (index !== this._tooltipCategoryIx || !this._sharedHighlight && toggle) {\n        const points = plotArea.pointsByCategoryIndex(index);\n        const pointArgs = points.map(function (point) {\n          return point.eventArgs(e);\n        });\n        const hoverArgs = pointArgs[0] || {};\n        hoverArgs.categoryPoints = pointArgs;\n        if (points.length > 0 && !this.trigger(SERIES_HOVER, hoverArgs)) {\n          if (tooltipOptions.visible) {\n            tooltip.showAt(points, coords);\n          }\n          highlight.show(points);\n          this._sharedHighlight = true;\n        } else {\n          tooltip.hide();\n        }\n        this._tooltipCategoryIx = index;\n      } else if (toggle && this._sharedHighlight) {\n        highlight.hide();\n        tooltip.hide();\n        this._sharedHighlight = false;\n      }\n    } else if (this._sharedHighlight) {\n      highlight.hide();\n      tooltip.hide();\n      this._tooltipCategoryIx = null;\n      this._sharedHighlight = false;\n    }\n  }\n  hideElements(options) {\n    const plotArea = this._plotArea;\n    this._mousemove.cancel();\n    plotArea.hideCrosshairs();\n    this._unsetActivePoint(options);\n  }\n  _unsetActivePoint(options) {\n    const {\n      _tooltip: tooltip,\n      _highlight: highlight\n    } = this;\n    this._activePoint = null;\n    this._hoveredPoint = null;\n    if (tooltip && !(options && options.keepTooltipOpen)) {\n      tooltip.hide();\n    }\n    this._tooltipCategoryIx = null;\n    this._sharedHighlight = false;\n    if (highlight) {\n      highlight.hide();\n    }\n  }\n  _deferRedraw() {\n    this._redraw();\n  }\n  _clearRedrawTimeout() {\n    if (this._redrawTimeout) {\n      clearInterval(this._redrawTimeout);\n      this._redrawTimeout = null;\n    }\n  }\n  bindCategories() {\n    const options = this.options;\n    const definitions = [].concat(options.categoryAxis);\n    for (let axisIx = 0; axisIx < definitions.length; axisIx++) {\n      const axis = definitions[axisIx];\n      if (axis.autoBind !== false) {\n        this.bindCategoryAxisFromSeries(axis, axisIx);\n      }\n    }\n  }\n  bindCategoryAxisFromSeries(axis, axisIx) {\n    const series = this.options.series;\n    const seriesLength = series.length;\n    const uniqueCategories = new HashMap(); //perf improvement in case type category with dates\n    let items = [];\n    let bindable = false;\n    let dateAxis;\n    for (let seriesIx = 0; seriesIx < seriesLength; seriesIx++) {\n      const s = series[seriesIx];\n      const onAxis = s.categoryAxis === axis.name || !s.categoryAxis && axisIx === 0;\n      const data = s.data;\n      const dataLength = data.length;\n      const bind = s.categoryField && onAxis;\n      bindable = bind || bindable;\n      if (bind && dataLength > 0) {\n        dateAxis = isDateAxis(axis, getField(s.categoryField, data[0]));\n        const getFn = dateAxis ? getDateField : getField;\n        for (let dataIx = 0; dataIx < dataLength; dataIx++) {\n          const dataRow = data[dataIx];\n          const category = getFn(s.categoryField, dataRow, this.chartService.intl);\n          if (dateAxis || !uniqueCategories.get(category)) {\n            items.push([category, dataRow]);\n            if (!dateAxis) {\n              uniqueCategories.set(category, true);\n            }\n          }\n        }\n      }\n    }\n    if (items.length > 0) {\n      if (dateAxis) {\n        items = uniqueDates(items, function (a, b) {\n          return dateComparer(a[0], b[0]);\n        });\n      }\n      const result = transpose(items);\n      axis.categories = result[0];\n    } else if (bindable) {\n      axis.categories = [];\n    }\n  }\n  _isBindable(series) {\n    const valueFields = SeriesBinder.current.valueFields(series);\n    let result = true;\n    for (let i = 0; i < valueFields.length; i++) {\n      let field = valueFields[i];\n      if (field === VALUE) {\n        field = \"field\";\n      } else {\n        field = field + \"Field\";\n      }\n      if (!defined(series[field])) {\n        result = false;\n        break;\n      }\n    }\n    return result;\n  }\n  _noTransitionsRedraw() {\n    const options = this.options;\n    let transitionsState;\n    if (options.transitions !== false) {\n      options.transitions = false;\n      transitionsState = true;\n    }\n    this._redraw();\n    if (transitionsState) {\n      options.transitions = true;\n    }\n  }\n  _legendItemHover(seriesIndex, pointIndex) {\n    const {\n      _plotArea: plotArea,\n      _highlight: highlight\n    } = this;\n    const currentSeries = (plotArea.srcSeries || plotArea.series)[seriesIndex];\n    let items;\n    if (inArray(currentSeries.type, [PIE, DONUT, FUNNEL, PYRAMID])) {\n      items = plotArea.findPoint(function (point) {\n        return point.series.index === seriesIndex && point.index === pointIndex;\n      });\n    } else {\n      items = plotArea.pointsBySeriesIndex(seriesIndex);\n    }\n    if (this._hasInactiveOpacity() && currentSeries.visible && items) {\n      const multipleSeries = plotArea.series.length > 1;\n      const point = items.length ? items[0] : items;\n      this._displayInactiveOpacity(point, multipleSeries, items);\n    } else {\n      highlight.show(items);\n    }\n  }\n  _shouldAttachMouseMove() {\n    return this._plotArea.crosshairs.length || this._tooltip && this._sharedTooltip() || this.requiresHandlers([PLOT_AREA_HOVER, PLOT_AREA_LEAVE]);\n  }\n  updateMouseMoveHandler() {\n    unbindEvents(this.element, {\n      [MOUSEMOVE]: this._mousemove\n    });\n    if (this._shouldAttachMouseMove()) {\n      bindEvents(this.element, {\n        [MOUSEMOVE]: this._mousemove\n      });\n    }\n  }\n  applyOptions(options, theme) {\n    clearMissingValues(this._originalOptions, options);\n    this._originalOptions = deepExtend(this._originalOptions, options);\n    this.options = deepExtend({}, this._originalOptions);\n    if (theme) {\n      this._theme = theme;\n      this.chartService.theme = theme;\n    }\n    this._initTheme(this.options, this._theme);\n    this._toggleDragZoomEvents();\n  }\n  setOptions(options, theme) {\n    this.applyOptions(options, theme);\n    this.bindCategories();\n    this.redraw();\n    this.updateMouseMoveHandler();\n  }\n  setDirection(rtl) {\n    this.chartService.rtl = Boolean(rtl);\n    if (this.surface && this.surface.type === 'svg') {\n      this._destroySurface();\n    }\n  }\n  setIntlService(intl) {\n    this.chartService.intl = intl;\n  }\n  noTransitionsRedraw() {\n    this._noTransitionsRedraw();\n  }\n  destroy() {\n    this._destroyed = true;\n    unbindEvents(this.element, {\n      [CONTEXTMENU]: this._clickHandler,\n      [MOUSEWHEEL]: this._mousewheelHandler,\n      [MOUSEMOVE]: this._mousemove,\n      [MOUSELEAVE]: this._mouseleaveHandler\n    });\n    if (this.domEvents) {\n      this.domEvents.destroy();\n      delete this.domEvents;\n    }\n    if (this._mouseMoveTrackHandler) {\n      unbindEvents(document, {\n        [MOUSEMOVE]: this._mouseMoveTrackHandler\n      });\n    }\n    this._destroyView();\n    this._destroySurface();\n    this._clearRedrawTimeout();\n  }\n  _destroySurface() {\n    const surface = this.surface;\n    if (surface) {\n      surface.unbind(\"mouseenter\", this._surfaceMouseenterHandler);\n      surface.unbind(\"mouseleave\", this._surfaceMouseleaveHandler);\n      surface.destroy();\n      this.surface = null;\n    }\n  }\n  _destroySelections() {\n    const selections = this._selections;\n    if (selections) {\n      while (selections.length > 0) {\n        selections.shift().destroy();\n      }\n    }\n  }\n  _destroyView() {\n    const model = this._model;\n    if (model) {\n      model.destroy();\n      this._model = null;\n    }\n    this._unsetActivePoint();\n    this._resetDrilldownPoint();\n    this._destroySelections();\n    if (this._tooltip) {\n      this._tooltip.destroy();\n    }\n    if (this._highlight) {\n      this._highlight.destroy();\n    }\n    if (this._zoomSelection) {\n      this._zoomSelection.destroy();\n      delete this._zoomSelection;\n    }\n    if (this._pannable) {\n      this._pannable.destroy();\n      delete this._pannable;\n    }\n    if (this._mousewheelZoom) {\n      this._mousewheelZoom.destroy();\n      delete this._mousewheelZoom;\n    }\n  }\n}\nfunction resolveAxisAliases(options) {\n  const aliases = AXIS_NAMES;\n  for (let idx = 0; idx < aliases.length; idx++) {\n    const alias = aliases[idx] + \"Axes\";\n    if (options[alias]) {\n      options[aliases[idx] + \"Axis\"] = options[alias];\n      delete options[alias];\n    }\n  }\n}\nfunction pointByCategoryName(points, name) {\n  if (points) {\n    for (let idx = 0; idx < points.length; idx++) {\n      if (points[idx].category === name) {\n        return [points[idx]];\n      }\n    }\n  }\n}\nfunction applyAxisDefaults(options, themeOptions) {\n  const themeAxisDefaults = (themeOptions || {}).axisDefaults || {};\n  let axisName, axisDefaults, axes;\n  function mapAxisOptions(axisOptions) {\n    const axisColor = (axisOptions || {}).color || axisDefaults.color;\n    const result = deepExtend({}, themeAxisDefaults, themeAxisDefaults[axisName], axisDefaults, axisDefaults[axisName], {\n      line: {\n        color: axisColor\n      },\n      labels: {\n        color: axisColor\n      },\n      title: {\n        color: axisColor\n      }\n    }, axisOptions);\n    delete result[axisName];\n    return result;\n  }\n  for (let idx = 0; idx < AXIS_NAMES.length; idx++) {\n    axisName = AXIS_NAMES[idx] + \"Axis\";\n    axisDefaults = options.axisDefaults || {};\n    axes = [].concat(options[axisName]);\n    axes = axes.map(mapAxisOptions);\n    options[axisName] = axes.length > 1 ? axes : axes[0];\n  }\n}\nfunction applySeriesDefaults(options, themeOptions) {\n  const series = options.series;\n  const seriesLength = series.length;\n  const seriesDefaults = options.seriesDefaults;\n  const commonDefaults = deepExtend({}, options.seriesDefaults);\n  const themeSeriesDefaults = themeOptions ? deepExtend({}, themeOptions.seriesDefaults) : {};\n  const commonThemeDefaults = deepExtend({}, themeSeriesDefaults);\n  cleanupNestedSeriesDefaults(commonDefaults);\n  cleanupNestedSeriesDefaults(commonThemeDefaults);\n  for (let i = 0; i < seriesLength; i++) {\n    const seriesType = series[i].type || options.seriesDefaults.type;\n    const baseOptions = deepExtend({\n      data: []\n    }, commonThemeDefaults, themeSeriesDefaults[seriesType], {\n      tooltip: options.tooltip\n    }, commonDefaults, seriesDefaults[seriesType]);\n    series[i]._defaults = baseOptions;\n    series[i] = deepExtend({}, baseOptions, series[i]);\n    series[i].data = series[i].data || [];\n  }\n}\nfunction cleanupNestedSeriesDefaults(seriesDefaults) {\n  delete seriesDefaults.bar;\n  delete seriesDefaults.column;\n  delete seriesDefaults.rangeColumn;\n  delete seriesDefaults.line;\n  delete seriesDefaults.verticalLine;\n  delete seriesDefaults.pie;\n  delete seriesDefaults.donut;\n  delete seriesDefaults.area;\n  delete seriesDefaults.verticalArea;\n  delete seriesDefaults.scatter;\n  delete seriesDefaults.scatterLine;\n  delete seriesDefaults.bubble;\n  delete seriesDefaults.candlestick;\n  delete seriesDefaults.ohlc;\n  delete seriesDefaults.boxPlot;\n  delete seriesDefaults.bullet;\n  delete seriesDefaults.verticalBullet;\n  delete seriesDefaults.polarArea;\n  delete seriesDefaults.polarLine;\n  delete seriesDefaults.radarArea;\n  delete seriesDefaults.radarLine;\n  delete seriesDefaults.waterfall;\n}\nfunction axisRanges(axes) {\n  const ranges = {};\n  for (let i = 0; i < axes.length; i++) {\n    const axis = axes[i];\n    const axisName = axis.options.name;\n    if (axisName) {\n      ranges[axisName] = axis.range();\n    }\n  }\n  return ranges;\n}\nfunction sortDates(dates, comparer = dateComparer) {\n  for (let i = 1, length = dates.length; i < length; i++) {\n    if (comparer(dates[i], dates[i - 1]) < 0) {\n      dates.sort(comparer);\n      break;\n    }\n  }\n  return dates;\n}\nfunction uniqueDates(srcDates, comparer = dateComparer) {\n  const dates = sortDates(srcDates, comparer);\n  const length = dates.length;\n  const result = length > 0 ? [dates[0]] : [];\n  for (let i = 1; i < length; i++) {\n    if (comparer(dates[i], last(result)) !== 0) {\n      result.push(dates[i]);\n    }\n  }\n  return result;\n}\nfunction transpose(rows) {\n  const rowCount = rows.length;\n  const result = [];\n  for (let rowIx = 0; rowIx < rowCount; rowIx++) {\n    const row = rows[rowIx];\n    const colCount = row.length;\n    for (let colIx = 0; colIx < colCount; colIx++) {\n      result[colIx] = result[colIx] || [];\n      result[colIx].push(row[colIx]);\n    }\n  }\n  return result;\n}\nconst DATA_FIELDS = ['data', 'categories'];\nfunction clearMissingValues(originalOptions, options) {\n  for (let field in options) {\n    if (!inArray(field, DATA_FIELDS) && options.hasOwnProperty(field)) {\n      const fieldValue = options[field];\n      const originalValue = originalOptions[field];\n      if (defined(originalValue)) {\n        const nullValue = fieldValue === null;\n        if (nullValue || !defined(fieldValue)) {\n          delete originalOptions[field];\n          if (nullValue) {\n            delete options[field];\n          }\n        } else if (originalValue && isObject(fieldValue)) {\n          if (isObject(originalValue)) {\n            clearMissingValues(originalValue, fieldValue);\n          }\n        }\n      }\n    }\n  }\n}\nfunction triggerPaneRender(panes) {\n  for (let idx = 0; idx < panes.length; idx++) {\n    panes[idx].notifyRender();\n  }\n}\nsetDefaultOptions(Chart, {\n  renderAs: \"\",\n  chartArea: {},\n  legend: {\n    visible: true,\n    labels: {}\n  },\n  categoryAxis: {},\n  seriesDefaults: {\n    type: COLUMN,\n    data: [],\n    highlight: {\n      visible: true\n    },\n    labels: {},\n    negativeValues: {\n      visible: false\n    }\n  },\n  series: [],\n  seriesColors: null,\n  tooltip: {\n    visible: false\n  },\n  transitions: true,\n  valueAxis: {},\n  plotArea: {},\n  title: {},\n  xAxis: {},\n  yAxis: {},\n  panes: [{}],\n  pannable: false,\n  zoomable: false\n});\nexport default Chart;","map":{"version":3,"names":["drawing","draw","throttle","geometry","RootElement","Title","CategoryAxis","Point","Highlight","Pannable","ZoomSelection","MousewheelZoom","Legend","PlotAreaFactory","Selection","SeriesBinder","Tooltip","SharedTooltip","CategoricalPlotArea","PlotAreaBase","ChartService","DomEventsBuilder","getField","isDateAxis","getDateField","ChartPane","ChartPlotArea","findAxisByName","X","Y","VALUE","DEFAULT_WIDTH","DEFAULT_HEIGHT","DEFAULT_SERIES_OPACITY","addClass","Class","setDefaultOptions","deepExtend","defined","find","isObject","isFunction","elementSize","elementOffset","elementScale","elementStyles","eventCoordinates","bindEvents","unbindEvents","mousewheelDelta","FontLoader","inArray","last","round","HashMap","valueOrDefault","dateComparer","DRAG_START","DRAG","DRAG_END","ZOOM_START","ZOOM","ZOOM_END","SELECT_START","SELECT","SELECT_END","PLOT_AREA_HOVER","PLOT_AREA_LEAVE","RENDER","CATEGORY","PIE","DONUT","FUNNEL","PYRAMID","COLUMN","MOUSEWHEEL","MOUSEWHEEL_DELAY","MOUSEWHEEL_ZOOM_RATE","SHOW_TOOLTIP","SERIES_HOVER","SERIES_OVER","SERIES_LEAVE","SERIES_CLICK","DRILLDOWN","AXIS_NAMES","MOUSEMOVE","CONTEXTMENU","MOUSELEAVE","MOUSEMOVE_DELAY","Chart","constructor","element","userOptions","themeOptions","context","observers","addObserver","observer","chartService","theme","_initElement","options","_originalOptions","_theme","_initTheme","_initHandlers","_initSurface","bindCategories","preloadFonts","fontLoaded","_destroyed","trigger","_redraw","_attachEvents","_setElementClass","style","position","firstChild","removeChild","seriesCopies","series","i","length","push","Object","assign","resolveAxisAliases","applyDefaults","seriesColors","applySeriesColors","getSize","chartArea","width","parseInt","Math","floor","offsetWidth","height","offsetHeight","resize","force","size","currentSize","_size","hasSize","_resize","_selections","s","visible","_destroySelections","_setupSelection","_noTransitionsRedraw","redraw","paneName","plotArea","_model","_plotArea","pane","findPane","getAxis","name","axes","findPaneByName","panes","idx","findPaneByIndex","toggleHighlight","show","filter","firstSeries","srcSeries","points","filterPoints","seriesName","categoryName","category","type","pointByCategoryName","pointsBySeriesName","charts","togglePointsHighlight","highlight","_highlight","togglePointHighlight","showTooltip","shared","_sharedTooltip","_tooltip","tooltip","point","categoryIndex","findPoint","categoryIx","categoryAxis","pointsByCategoryIndex","showAt","hideTooltip","hide","surface","wrap","_surfaceWrap","renderAs","_destroySurface","Surface","create","bind","_surfaceMouseenterHandler","_surfaceMouseleaveHandler","clear","model","_getModel","_destroyView","renderVisual","transitions","traverse","animation","setup","visual","play","_createTooltip","_createPannable","_createZoomSelection","_createMousewheelZoom","triggerPaneRender","_navState","_cancelDomEvents","exportVisual","exportOptions","currentOptions","clearMissingValues","pannable","_pannable","zoomable","selection","_zoomSelection","mousewheel","_mousewheelZoom","_toggleDragZoomEvents","allowDrag","requiresHandlers","allowZoom","_dragZoomEnabled","touchAction","_touchAction","_toggleDomEvents","drag","zoom","domEvents","toggleDrag","toggleZoom","tooltipOptions","_createSharedTooltip","applyAxisDefaults","applySeriesDefaults","colors","currentSeries","seriesColor","defaults","_defaults","color","_createPlotArea","_modelOptions","chart","title","buildTitle","subtitle","align","append","apply","orderTitles","legend","reflow","skipSeries","current","selections","axis","select","vertical","range","min","max","_selectStart","e","_select","_selectEnd","_clickHandler","_click","_mousewheelHandler","_mousewheel","_mouseleaveHandler","_mouseleave","_mouseover","_mouseout","_mousemove","removeObserver","index","indexOf","splice","eventNames","args","sender","anchor","_toDocumentCoordinates","_updateDrilldownPoint","_resetDrilldownPoint","_startDrilldown","isDefaultPrevented","_shouldAttachMouseMove","start","_start","move","_move","end","_end","tap","_tap","gesturestart","_gesturestart","gesturechange","_gesturechange","gestureend","_gestureend","_hoveredPoint","out","_plotAreaHovered","_hasInactiveOpacity","_activeChartInstance","_applySeriesOpacity","children","_updateSeriesOpacity","cancel","_stopChartHandlers","_gestureDistance","distance","_unsetActivePoint","suspendTracking","_zooming","resumeTracking","mousewheelZoom","preventDefault","previousGestureDistance","scaleDelta","abs","delta","axisRanges","originalEvent","coords","_eventCoordinates","ranges","updateRanges","_drawingChartElement","leave","backgroundContainsPoint","_startNavigation","_suppressHover","panning","state","pan","currentAxis","axisName","y","x","startLocation","location","translateRange","_endNavigation","paneByPoint","onPane","_mousewheelZoomRate","rate","_mwTimeout","clearTimeout","setTimeout","prevented","totalDelta","scaleRange","chartEvent","findPointPane","slice","_getChartElement","match","eventTarget","chartElement","parent","aliasFor","closest","coordinates","_toModelCoordinates","_elementPadding","_padding","paddingLeft","paddingTop","top","left","padding","offset","clientX","clientY","inverseTransform","invert","transform","drawingElement","sharedTooltip","_startHover","_trackSharedTooltip","_propagateClick","handlingTap","click","hover","over","_showInactiveOpacity","_displayTooltip","_displayInactiveOpacity","activePoint","multipleSeries","highlightPoints","chartInstance","_chartInstanceFromPoint","inactivePoints","supportsPointInactiveOpacity","_getInactivePoints","_getInactiveOpacityForSeries","allPoints","_getAllPointsOfType","container","concat","_updateHoveredPoint","hoveredPoint","fields","bindPoint","dataItem","drilldown","_drilldownState","cursor","value","resetOpacity","currSeries","defaultOpacity","_getDefaultOpacityForSeries","inactiveOpacity","opacity","line","elements","activeSeries","reset","shouldHighlight","_activePoint","hasInactiveOpacity","_hideInactiveOpacity","hasDefaultInactiveOpacity","seriesDefaults","undefined","defaultInactiveOpacity","seriesInactiveOpacity","tooltipTracking","_mouseMoveTrackHandler","_mouseMoveTracking","document","box","containsPoint","getNearestPoint","seriesPoint","seriesIx","_trackCrosshairs","overPlotArea","crosshairs","toggle","pointCategoryIndex","_tooltipCategoryIx","_sharedHighlight","pointArgs","map","eventArgs","hoverArgs","categoryPoints","hideElements","hideCrosshairs","keepTooltipOpen","_deferRedraw","_clearRedrawTimeout","_redrawTimeout","clearInterval","definitions","axisIx","autoBind","bindCategoryAxisFromSeries","seriesLength","uniqueCategories","items","bindable","dateAxis","onAxis","data","dataLength","categoryField","getFn","dataIx","dataRow","intl","get","set","uniqueDates","a","b","result","transpose","categories","_isBindable","valueFields","field","transitionsState","_legendItemHover","seriesIndex","pointIndex","pointsBySeriesIndex","updateMouseMoveHandler","applyOptions","setOptions","setDirection","rtl","Boolean","setIntlService","noTransitionsRedraw","destroy","unbind","shift","aliases","alias","themeAxisDefaults","axisDefaults","mapAxisOptions","axisOptions","axisColor","labels","commonDefaults","themeSeriesDefaults","commonThemeDefaults","cleanupNestedSeriesDefaults","seriesType","baseOptions","bar","column","rangeColumn","verticalLine","pie","donut","area","verticalArea","scatter","scatterLine","bubble","candlestick","ohlc","boxPlot","bullet","verticalBullet","polarArea","polarLine","radarArea","radarLine","waterfall","sortDates","dates","comparer","sort","srcDates","rows","rowCount","rowIx","row","colCount","colIx","DATA_FIELDS","originalOptions","hasOwnProperty","fieldValue","originalValue","nullValue","notifyRender","negativeValues","valueAxis","xAxis","yAxis"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-charts/dist/es2015/chart/chart.js"],"sourcesContent":["import { drawing as draw, throttle, geometry } from '@progress/kendo-drawing';\n\nimport { RootElement, Title, CategoryAxis, Point } from '../core';\n\nimport Highlight from './highlight';\nimport Pannable from './pan-and-zoom/pannable';\nimport ZoomSelection from './pan-and-zoom/zoom-selection';\nimport MousewheelZoom from './pan-and-zoom/mousewheel-zoom';\nimport Legend from './legend/legend';\nimport PlotAreaFactory from './plotarea/plotarea-factory';\nimport Selection from './selection';\nimport SeriesBinder from './series-binder';\nimport Tooltip from './tooltip/tooltip';\nimport SharedTooltip from './tooltip/shared-tooltip';\nimport CategoricalPlotArea from './plotarea/categorical-plotarea';\nimport PlotAreaBase from './plotarea/plotarea-base';\nimport { ChartService, DomEventsBuilder } from '../services';\nimport getField from './utils/get-field';\nimport isDateAxis from './utils/is-date-axis';\nimport getDateField from './utils/get-date-field';\nimport { ChartPane, ChartPlotArea, findAxisByName } from './api-elements';\n\nimport { X, Y, VALUE, DEFAULT_WIDTH, DEFAULT_HEIGHT, DEFAULT_SERIES_OPACITY } from '../common/constants';\nimport { addClass, Class, setDefaultOptions, deepExtend, defined, find, isObject, isFunction, elementSize, elementOffset,\n         elementScale, elementStyles, eventCoordinates, bindEvents, unbindEvents, mousewheelDelta, FontLoader, inArray, last, round,\n         HashMap, valueOrDefault } from '../common';\n\nimport { dateComparer } from '../date-utils';\n\nimport { DRAG_START, DRAG, DRAG_END, ZOOM_START, ZOOM, ZOOM_END, SELECT_START, SELECT, SELECT_END, PLOT_AREA_HOVER, PLOT_AREA_LEAVE,\n         RENDER, CATEGORY, PIE, DONUT, FUNNEL, PYRAMID, COLUMN, MOUSEWHEEL, MOUSEWHEEL_DELAY, MOUSEWHEEL_ZOOM_RATE, SHOW_TOOLTIP, SERIES_HOVER,\n         SERIES_OVER, SERIES_LEAVE, SERIES_CLICK, DRILLDOWN } from './constants';\n\nimport './animations';\nimport './register-charts';\n\nconst AXIS_NAMES = [ CATEGORY, VALUE, X, Y ];\n\nconst MOUSEMOVE = \"mousemove\";\nconst CONTEXTMENU = \"contextmenu\";\nconst MOUSELEAVE = \"mouseleave\";\nconst MOUSEMOVE_DELAY = 20;\n\nclass Chart extends Class {\n    constructor(element, userOptions, themeOptions, context = {}) {\n        super();\n\n        this.observers = [];\n        this.addObserver(context.observer);\n        this.chartService = new ChartService(this, context);\n        this.chartService.theme = themeOptions;\n\n        this._initElement(element);\n\n        const options = deepExtend({}, this.options, userOptions);\n        this._originalOptions = deepExtend({}, options);\n        this._theme = themeOptions;\n        this._initTheme(options, themeOptions);\n\n        this._initHandlers();\n        this._initSurface();\n\n        this.bindCategories();\n        FontLoader.preloadFonts(userOptions, () => {\n            this.fontLoaded = true;\n            if (!this._destroyed) {\n                this.trigger('init');\n                this._redraw();\n                this._attachEvents();\n            }\n        });\n    }\n\n    _initElement(element) {\n        this._setElementClass(element);\n        element.style.position = \"relative\";\n        while (element.firstChild) {\n            element.removeChild(element.firstChild);\n        }\n        this.element = element;\n    }\n\n    _setElementClass(element) {\n        addClass(element, \"k-chart\");\n    }\n\n    _initTheme(options, themeOptions) {\n        const seriesCopies = [];\n        const series = options.series || [];\n\n        for (let i = 0; i < series.length; i++) {\n            seriesCopies.push(Object.assign({}, series[i]));\n        }\n        options.series = seriesCopies;\n\n        resolveAxisAliases(options);\n        this.applyDefaults(options, themeOptions);\n\n        // Clean up default if not overriden by data attributes\n        if (options.seriesColors === null) {\n            delete options.seriesColors;\n        }\n\n        this.options = deepExtend({}, themeOptions, options);\n        this.applySeriesColors();\n    }\n\n    getSize() {\n        const chartArea = this.options.chartArea || {};\n        const width = chartArea.width ? parseInt(chartArea.width, 10) : Math.floor(this.element.offsetWidth);\n        const height = chartArea.height ? parseInt(chartArea.height, 10) : Math.floor(this.element.offsetHeight);\n\n        return {\n            width: width,\n            height: height\n        };\n    }\n\n    resize(force) {\n        const size = this.getSize();\n        const currentSize = this._size;\n        const hasSize = size.width > 0 || size.height > 0;\n\n        if (force || hasSize && (!currentSize || size.width !== currentSize.width || size.height !== currentSize.height)) {\n            this._size = size;\n            this._resize(size, force);\n            this.trigger(\"resize\", size);\n        } else if (hasSize && this._selections && find(this._selections, s => !s.visible)) {\n            this._destroySelections();\n            this._setupSelection();\n        }\n    }\n\n    _resize() {\n        this._noTransitionsRedraw();\n    }\n\n    redraw(paneName) {\n        this.applyDefaults(this.options);\n        this.applySeriesColors();\n\n        if (paneName) {\n            const plotArea = this._model._plotArea;\n            const pane = plotArea.findPane(paneName);\n            plotArea.redraw(pane);\n        } else {\n            this._redraw();\n        }\n    }\n\n    getAxis(name) {\n        return findAxisByName(name, this._plotArea.axes);\n    }\n\n    findAxisByName(name) {\n        return this.getAxis(name);\n    }\n\n    findPaneByName(name) {\n        const panes = this._plotArea.panes;\n\n        for (let idx = 0; idx < panes.length; idx++) {\n            if (panes[idx].options.name === name) {\n                return new ChartPane(panes[idx]);\n            }\n        }\n    }\n\n    findPaneByIndex(idx) {\n        const panes = this._plotArea.panes;\n        if (panes[idx]) {\n            return new ChartPane(panes[idx]);\n        }\n    }\n\n    plotArea() {\n        return new ChartPlotArea(this._plotArea);\n    }\n\n    toggleHighlight(show, filter) {\n        const plotArea = this._plotArea;\n        const firstSeries = (plotArea.srcSeries || plotArea.series || [])[0];\n        let points;\n\n        if (isFunction(filter)) {\n            points = plotArea.filterPoints(filter);\n        } else {\n            let seriesName, categoryName;\n            if (isObject(filter)) {\n                seriesName = filter.series;\n                categoryName = filter.category;\n            } else {\n                seriesName = categoryName = filter;\n            }\n\n            if (firstSeries.type === DONUT) {\n                points = pointByCategoryName(plotArea.pointsBySeriesName(seriesName), categoryName);\n            } else if (inArray(firstSeries.type, [ PIE, FUNNEL, PYRAMID ])) {\n                points = pointByCategoryName((plotArea.charts[0] || {}).points, categoryName);\n            } else {\n                points = plotArea.pointsBySeriesName(seriesName);\n            }\n        }\n\n        if (points) {\n            this.togglePointsHighlight(show, points);\n        }\n    }\n\n    togglePointsHighlight(show, points) {\n        const highlight = this._highlight;\n        for (let idx = 0; idx < points.length; idx++) {\n            highlight.togglePointHighlight(points[idx], show);\n        }\n    }\n\n    showTooltip(filter) {\n        const shared = this._sharedTooltip();\n        const { _tooltip: tooltip, _plotArea: plotArea } = this;\n        let point, categoryIndex;\n\n        if (isFunction(filter)) {\n            point = plotArea.findPoint(filter);\n            if (point && shared) {\n                categoryIndex = point.categoryIx;\n            }\n        } else if (shared && defined(filter)) {\n            categoryIndex = plotArea.categoryAxis.categoryIndex(filter);\n        }\n\n        if (shared) {\n            if (categoryIndex >= 0) {\n                const points = this._plotArea.pointsByCategoryIndex(categoryIndex);\n                tooltip.showAt(points);\n            }\n        } else if (point) {\n            tooltip.show(point);\n        }\n    }\n\n    hideTooltip() {\n        this._tooltip.hide();\n    }\n\n    _initSurface() {\n        const surface = this.surface;\n        const wrap = this._surfaceWrap();\n\n        const chartArea = this.options.chartArea || {};\n        if (chartArea.width) {\n            elementSize(wrap, { width: chartArea.width });\n        }\n        if (chartArea.height) {\n            elementSize(wrap, { height: chartArea.height });\n        }\n\n        if (!surface || surface.options.type !== this.options.renderAs) {\n            this._destroySurface();\n\n            this.surface = draw.Surface.create(wrap, {\n                type: this.options.renderAs\n            });\n\n            this.surface.bind(\"mouseenter\", this._surfaceMouseenterHandler);\n            this.surface.bind(\"mouseleave\", this._surfaceMouseleaveHandler);\n\n        } else {\n            this.surface.clear();\n            this.surface.resize();\n        }\n    }\n\n    _surfaceWrap() {\n        return this.element;\n    }\n\n    _redraw() {\n        const model = this._getModel();\n        this._size = {\n            width: model.options.width,\n            height: model.options.height\n        };\n\n        this._destroyView();\n\n        this._model = model;\n        this._plotArea = model._plotArea;\n\n        model.renderVisual();\n\n        if (this.options.transitions !== false) {\n            model.traverse(function(element) {\n                if (element.animation) {\n                    element.animation.setup();\n                }\n            });\n        }\n\n        this._initSurface();\n        this.surface.draw(model.visual);\n\n        if (this.options.transitions !== false) {\n            model.traverse(function(element) {\n                if (element.animation) {\n                    element.animation.play();\n                }\n            });\n        }\n\n        this._tooltip = this._createTooltip();\n        this._highlight = new Highlight();\n        this._setupSelection();\n        this._createPannable();\n        this._createZoomSelection();\n        this._createMousewheelZoom();\n\n        this.trigger(RENDER);\n        triggerPaneRender(this._plotArea.panes);\n\n        if (!this._navState) {\n            this._cancelDomEvents();\n        }\n    }\n\n    exportVisual(exportOptions) {\n        let visual;\n        if (exportOptions && (exportOptions.width || exportOptions.height || exportOptions.options)) {\n            const currentOptions = this.options;\n            const options = deepExtend({}, exportOptions.options, {\n                chartArea: {\n                    width: exportOptions.width,\n                    height: exportOptions.height\n                }\n            });\n\n            clearMissingValues(this._originalOptions, options);\n            this.options = deepExtend({}, this._originalOptions, options);\n            this._initTheme(this.options, this._theme);\n            this.bindCategories();\n\n            const model = this._getModel();\n\n            model.renderVisual();\n            triggerPaneRender(model._plotArea.panes);\n\n            visual = model.visual;\n\n            this.options = currentOptions;\n        } else {\n            visual = this.surface.exportVisual();\n        }\n\n        return visual;\n    }\n\n    _sharedTooltip() {\n        return this._plotArea instanceof CategoricalPlotArea && this.options.tooltip && this.options.tooltip.shared;\n    }\n\n    _createPannable() {\n        const options = this.options;\n        if (options.pannable !== false) {\n            this._pannable = new Pannable(this._plotArea, options.pannable);\n        }\n    }\n\n    _createZoomSelection() {\n        const zoomable = this.options.zoomable;\n        const selection = (zoomable || {}).selection;\n        if (zoomable !== false && selection !== false) {\n            this._zoomSelection = new ZoomSelection(this, selection);\n        }\n    }\n\n    _createMousewheelZoom() {\n        const zoomable = this.options.zoomable;\n        const mousewheel = (zoomable || {}).mousewheel;\n        if (zoomable !== false && mousewheel !== false) {\n            this._mousewheelZoom = new MousewheelZoom(this, mousewheel);\n        }\n    }\n\n    _toggleDragZoomEvents() {\n        const pannable = this.options.pannable;\n        const zoomable = this.options.zoomable;\n        const selection = (zoomable || {}).selection;\n        const mousewheel = (zoomable || {}).mousewheel;\n        const allowDrag = !pannable && (zoomable === false || selection === false) && !this.requiresHandlers([ DRAG_START, DRAG, DRAG_END ]);\n        const allowZoom = (zoomable === false || mousewheel === false) && !this.requiresHandlers([ ZOOM_START, ZOOM, ZOOM_END ]);\n        const element = this.element;\n\n        if (this._dragZoomEnabled && allowDrag && allowZoom) {\n            element.style.touchAction = this._touchAction || '';\n            this._dragZoomEnabled = false;\n        } else if (!this._dragZoomEnabled && !(allowDrag && allowZoom)) {\n            element.style.touchAction = \"none\";\n\n            this._dragZoomEnabled = true;\n        }\n\n        this._toggleDomEvents(!allowDrag, !allowZoom);\n    }\n\n    _toggleDomEvents(drag, zoom) {\n        const domEvents = this.domEvents;\n        if (!domEvents) {\n            return;\n        }\n\n        if (domEvents.toggleDrag) {\n            domEvents.toggleDrag(drag);\n        }\n\n        if (domEvents.toggleZoom) {\n            domEvents.toggleZoom(zoom);\n        }\n    }\n\n    _createTooltip() {\n        const { options: { tooltip: tooltipOptions } } = this;\n        let tooltip;\n\n        if (this._sharedTooltip()) {\n            tooltip = this._createSharedTooltip(tooltipOptions);\n        } else {\n            tooltip = new Tooltip(this.chartService, tooltipOptions);\n        }\n\n        return tooltip;\n    }\n\n    _createSharedTooltip(options) {\n        return new SharedTooltip(this._plotArea, options);\n    }\n\n    applyDefaults(options, themeOptions) {\n        applyAxisDefaults(options, themeOptions);\n        applySeriesDefaults(options, themeOptions);\n    }\n\n    applySeriesColors() {\n        const options = this.options;\n        const series = options.series;\n        const colors = options.seriesColors || [];\n\n        for (let i = 0; i < series.length; i++) {\n            const currentSeries = series[i];\n            const seriesColor = colors[i % colors.length];\n            const defaults = currentSeries._defaults;\n\n            currentSeries.color = currentSeries.color || seriesColor;\n            if (defaults) {\n                defaults.color = defaults.color || seriesColor;\n            }\n        }\n    }\n\n    _getModel() {\n        const options = this.options;\n        const plotArea = this._createPlotArea();\n        const model = new RootElement(this._modelOptions());\n        model.chart = this;\n        model._plotArea = plotArea;\n\n        const title = Title.buildTitle(options.title);\n        const subtitle = Title.buildTitle(options.subtitle, {\n            align: options.title.align,\n            position: options.title.position\n        });\n        model.append.apply(model, Title.orderTitles([title, subtitle]));\n\n        if (options.legend && options.legend.visible) {\n            model.append(new Legend(plotArea.options.legend, this.chartService));\n        }\n        model.append(plotArea);\n        model.reflow();\n\n        return model;\n    }\n\n    _modelOptions() {\n        const options = this.options;\n        const size = this.getSize();\n\n        return deepExtend({\n            transitions: options.transitions,\n            width: size.width || DEFAULT_WIDTH,\n            height: size.height || DEFAULT_HEIGHT\n        }, options.chartArea);\n    }\n\n    _createPlotArea(skipSeries) {\n        const options = this.options;\n\n        const plotArea = PlotAreaFactory.current.create(skipSeries ? [] : options.series, options, this.chartService);\n\n        return plotArea;\n    }\n\n    _setupSelection() {\n        const { _plotArea: { axes } } = this;\n        const selections = this._selections = [];\n\n        for (let i = 0; i < axes.length; i++) {\n            const axis = axes[i];\n            const options = axis.options;\n            if (axis instanceof CategoryAxis && options.select && !options.vertical) {\n                const range = axis.range();\n\n                const selection = new Selection(this, axis,\n                    deepExtend({ min: range.min, max: range.max }, options.select)\n                );\n\n                selections.push(selection);\n            }\n        }\n    }\n\n    _selectStart(e) {\n        return this.trigger(SELECT_START, e);\n    }\n\n    _select(e) {\n        return this.trigger(SELECT, e);\n    }\n\n    _selectEnd(e) {\n        return this.trigger(SELECT_END, e);\n    }\n\n    _initHandlers() {\n        this._clickHandler = this._click.bind(this);\n        this._mousewheelHandler = this._mousewheel.bind(this);\n        this._mouseleaveHandler = this._mouseleave.bind(this);\n        this._surfaceMouseenterHandler = this._mouseover.bind(this);\n        this._surfaceMouseleaveHandler = this._mouseout.bind(this);\n\n        this._mousemove = throttle(\n            this._mousemove.bind(this),\n            MOUSEMOVE_DELAY\n        );\n    }\n\n    addObserver(observer) {\n        if (observer) {\n            this.observers.push(observer);\n        }\n    }\n\n    removeObserver(observer) {\n        const index = this.observers.indexOf(observer);\n        if (index >= 0) {\n            this.observers.splice(index, 1);\n        }\n    }\n\n    requiresHandlers(eventNames) {\n        const observers = this.observers;\n        for (let idx = 0; idx < observers.length; idx++) {\n            if (observers[idx].requiresHandlers(eventNames)) {\n                return true;\n            }\n        }\n    }\n\n    trigger(name, args = {}) {\n        args.sender = this;\n\n        if (name === SHOW_TOOLTIP) {\n            args.anchor.point = this._toDocumentCoordinates(args.anchor.point);\n        } else if (name === SERIES_OVER) {\n            this._updateDrilldownPoint(args.point);\n        } else if (name === SERIES_LEAVE) {\n            this._resetDrilldownPoint();\n        } else if (name === SERIES_CLICK) {\n            this._startDrilldown(args.point);\n        }\n\n        const observers = this.observers;\n        let isDefaultPrevented = false;\n        for (let idx = 0; idx < observers.length; idx++) {\n            if (observers[idx].trigger(name, args)) {\n                isDefaultPrevented = true;\n            }\n        }\n\n        return isDefaultPrevented;\n    }\n\n    _attachEvents() {\n        const element = this.element;\n\n        this._touchAction = element.style.touchAction;\n\n        bindEvents(element, {\n            [ CONTEXTMENU ]: this._clickHandler,\n            [ MOUSEWHEEL ]: this._mousewheelHandler,\n            [ MOUSELEAVE ]: this._mouseleaveHandler\n        });\n\n        if (this._shouldAttachMouseMove()) {\n            bindEvents(element, { [ MOUSEMOVE ]: this._mousemove });\n        }\n\n        this.domEvents = DomEventsBuilder.create(this.element, {\n            start: this._start.bind(this),\n            move: this._move.bind(this),\n            end: this._end.bind(this),\n            tap: this._tap.bind(this),\n            gesturestart: this._gesturestart.bind(this),\n            gesturechange: this._gesturechange.bind(this),\n            gestureend: this._gestureend.bind(this)\n        });\n\n        this._toggleDragZoomEvents();\n    }\n\n    _mouseleave(e) {\n        if (this._hoveredPoint) {\n            this._hoveredPoint.out(this, e);\n            this._hoveredPoint = null;\n        }\n\n        if (this._plotAreaHovered) {\n            this._plotAreaHovered = false;\n            this.trigger(PLOT_AREA_LEAVE);\n        }\n\n        if (this._hasInactiveOpacity() && this._activeChartInstance) {\n            this._applySeriesOpacity(this._activeChartInstance.children, null, true);\n            this._updateSeriesOpacity(null, true);\n        }\n    }\n\n    _cancelDomEvents() {\n        if (this.domEvents && this.domEvents.cancel) {\n            this.domEvents.cancel();\n        }\n    }\n\n    _gesturestart(e) {\n        if (this._mousewheelZoom && !this._stopChartHandlers(e)) {\n            this._gestureDistance = e.distance;\n            this._unsetActivePoint();\n            this.surface.suspendTracking();\n        }\n    }\n\n    _gestureend(e) {\n        if (this._zooming && !this._stopChartHandlers(e)) {\n            if (this.surface) {\n                this.surface.resumeTracking();\n            }\n            this._zooming = false;\n            this.trigger(ZOOM_END, {});\n        }\n    }\n\n    _gesturechange(e) {\n        const mousewheelZoom = this._mousewheelZoom;\n\n        if (mousewheelZoom && !this._stopChartHandlers(e)) {\n            e.preventDefault();\n            const previousGestureDistance = this._gestureDistance;\n            let scaleDelta = -e.distance / previousGestureDistance + 1;\n\n            if (Math.abs(scaleDelta) >= 0.1) {\n                scaleDelta = Math.round(scaleDelta * 10);\n\n                this._gestureDistance = e.distance;\n                const args = { delta: scaleDelta, axisRanges: axisRanges(this._plotArea.axes), originalEvent: e };\n                if (this._zooming || !this.trigger(ZOOM_START, args)) {\n                    const coords = this._eventCoordinates(e);\n\n                    if (!this._zooming) {\n                        this._zooming = true;\n                    }\n\n                    const ranges = args.axisRanges = mousewheelZoom.updateRanges(scaleDelta, coords);\n                    if (ranges && !this.trigger(ZOOM, args)) {\n                        mousewheelZoom.zoom();\n                    }\n                }\n            }\n        }\n    }\n\n    _mouseout(e) {\n        if (e.element) {\n            const element = this._drawingChartElement(e.element, e);\n\n            if (element && element.leave) {\n                element.leave(this, e.originalEvent);\n            }\n        }\n    }\n\n    _start(e) {\n        const coords = this._eventCoordinates(e);\n\n        if (this._stopChartHandlers(e) || !this._plotArea.backgroundContainsPoint(coords)) {\n            return;\n        }\n\n\n        if (this.requiresHandlers([ DRAG_START, DRAG, DRAG_END ])) {\n            this._startNavigation(e, coords, DRAG_START);\n        }\n\n        if (this._pannable && this._pannable.start(e)) {\n            this.surface.suspendTracking();\n            this._unsetActivePoint();\n            this._suppressHover = true;\n            this.chartService.panning = true;\n        }\n\n        if (this._zoomSelection) {\n            if (this._zoomSelection.start(e)) {\n                this.trigger(ZOOM_START, { axisRanges: axisRanges(this._plotArea.axes), originalEvent: e });\n            }\n        }\n    }\n\n    _move(e) {\n        let { _navState: state, _pannable: pannable } = this;\n\n        if (this._stopChartHandlers(e)) {\n            return;\n        }\n\n        if (pannable) {\n            const ranges = pannable.move(e);\n\n            if (ranges && !this.trigger(DRAG, { axisRanges: ranges, originalEvent: e })) {\n                pannable.pan();\n            }\n        } else if (state) {\n            const ranges = {};\n            const axes = state.axes;\n\n            for (let i = 0; i < axes.length; i++) {\n                const currentAxis = axes[i];\n                const axisName = currentAxis.options.name;\n                if (axisName) {\n                    const axis = currentAxis.options.vertical ? e.y : e.x;\n                    const delta = axis.startLocation - axis.location;\n\n                    if (delta !== 0) {\n                        ranges[currentAxis.options.name] = currentAxis.translateRange(delta);\n                    }\n                }\n            }\n\n            state.axisRanges = ranges;\n            this.trigger(DRAG, {\n                axisRanges: ranges,\n                originalEvent: e\n            });\n        }\n\n        if (this._zoomSelection) {\n            this._zoomSelection.move(e);\n        }\n    }\n\n    _end(e) {\n        if (this._stopChartHandlers(e)) {\n            return;\n        }\n\n        const pannable = this._pannable;\n        if (pannable && pannable.end(e)) {\n            this.surface.resumeTracking();\n            this.trigger(DRAG_END, {\n                axisRanges: axisRanges(this._plotArea.axes),\n                originalEvent: e\n            });\n            this._suppressHover = false;\n            this.chartService.panning = false;\n        } else {\n            this._endNavigation(e, DRAG_END);\n        }\n\n        if (this._zoomSelection) {\n            const ranges = this._zoomSelection.end(e);\n            if (ranges && !this.trigger(ZOOM, { axisRanges: ranges, originalEvent: e })) {\n                this._zoomSelection.zoom();\n                this.trigger(ZOOM_END, { axisRanges: ranges, originalEvent: e });\n            }\n        }\n    }\n\n    _stopChartHandlers(e) {\n        const selections = this._selections || [];\n        if (!selections.length) {\n            return false;\n        }\n\n        const coords = this._eventCoordinates(e);\n        const pane = this._plotArea.paneByPoint(coords);\n        if (pane) {\n            for (let idx = 0; idx < selections.length; idx++) {\n                if (selections[idx].onPane(pane)) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    _mousewheelZoomRate() {\n        const zoomable = this.options.zoomable;\n        const mousewheel = (zoomable || {}).mousewheel || {};\n        return valueOrDefault(mousewheel.rate, MOUSEWHEEL_ZOOM_RATE);\n    }\n\n    _mousewheel(e) {\n        const delta = mousewheelDelta(e);\n        const mousewheelZoom = this._mousewheelZoom;\n        const coords = this._eventCoordinates(e);\n\n        if (this._stopChartHandlers(e) || !this._plotArea.backgroundContainsPoint(coords)) {\n            return;\n        }\n\n        if (mousewheelZoom) {\n            const args = { delta: delta, axisRanges: axisRanges(this._plotArea.axes), originalEvent: e };\n            if (this._zooming || !this.trigger(ZOOM_START, args)) {\n                e.preventDefault();\n\n                if (!this._zooming) {\n                    this._unsetActivePoint();\n                    this.surface.suspendTracking();\n                    this._zooming = true;\n                }\n\n                if (this._mwTimeout) {\n                    clearTimeout(this._mwTimeout);\n                }\n\n                args.axisRanges = mousewheelZoom.updateRanges(delta, coords);\n                if (args.axisRanges && !this.trigger(ZOOM, args)) {\n                    mousewheelZoom.zoom();\n                }\n\n                this._mwTimeout = setTimeout(() => {\n                    this.trigger(ZOOM_END, args);\n                    this._zooming = false;\n                    if (this.surface) {\n                        this.surface.resumeTracking();\n                    }\n                }, MOUSEWHEEL_DELAY);\n            }\n        } else {\n            let state = this._navState;\n            if (!state) {\n                const prevented = this._startNavigation(e, coords, ZOOM_START);\n                if (!prevented) {\n                    state = this._navState;\n                }\n            }\n\n            if (state) {\n                const totalDelta = state.totalDelta || delta;\n                state.totalDelta = totalDelta + delta;\n\n                const axes = this._navState.axes;\n                const ranges = {};\n\n                for (let i = 0; i < axes.length; i++) {\n                    const currentAxis = axes[i];\n                    const axisName = currentAxis.options.name;\n                    if (axisName) {\n                        ranges[axisName] = currentAxis.scaleRange(-totalDelta * this._mousewheelZoomRate(), coords);\n                    }\n                }\n\n                this.trigger(ZOOM, {\n                    delta: delta,\n                    axisRanges: ranges,\n                    originalEvent: e\n                });\n\n                if (this._mwTimeout) {\n                    clearTimeout(this._mwTimeout);\n                }\n\n                this._mwTimeout = setTimeout(() => {\n                    this._endNavigation(e, ZOOM_END);\n                }, MOUSEWHEEL_DELAY);\n            }\n        }\n    }\n\n    _startNavigation(e, coords, chartEvent) {\n        const plotArea = this._model._plotArea;\n        const pane = plotArea.findPointPane(coords);\n        const axes = plotArea.axes.slice(0);\n\n        if (!pane) {\n            return;\n        }\n\n        const ranges = axisRanges(axes);\n\n        const prevented = this.trigger(chartEvent, {\n            axisRanges: ranges,\n            originalEvent: e\n        });\n\n        if (prevented) {\n            this._cancelDomEvents();\n        } else {\n            this._suppressHover = true;\n            this._unsetActivePoint();\n            this._navState = {\n                axisRanges: ranges,\n                pane: pane,\n                axes: axes\n            };\n        }\n    }\n\n    _endNavigation(e, chartEvent) {\n        if (this._navState) {\n            this.trigger(chartEvent, {\n                axisRanges: this._navState.axisRanges,\n                originalEvent: e\n            });\n            this._suppressHover = false;\n            this._navState = null;\n        }\n    }\n\n    _getChartElement(e, match) {\n        const element = this.surface.eventTarget(e);\n        if (element) {\n            return this._drawingChartElement(element, e, match);\n        }\n    }\n\n    _drawingChartElement(element, e, match) {\n        let current = element;\n        let chartElement;\n        while (current && !chartElement) {\n            chartElement = current.chartElement;\n            current = current.parent;\n        }\n\n        if (chartElement) {\n            if (chartElement.aliasFor) {\n                chartElement = chartElement.aliasFor(e, this._eventCoordinates(e));\n            }\n\n            if (match) {\n                chartElement = chartElement.closest(match);\n                if (chartElement && chartElement.aliasFor) {\n                    chartElement = chartElement.aliasFor();\n                }\n            }\n\n            return chartElement;\n        }\n    }\n\n    _eventCoordinates(e) {\n        const coordinates = eventCoordinates(e);\n        return this._toModelCoordinates(coordinates.x, coordinates.y);\n    }\n\n    _elementPadding() {\n        if (!this._padding) {\n            const { paddingLeft, paddingTop } = elementStyles(this.element, [ \"paddingLeft\", \"paddingTop\" ]);\n            this._padding = {\n                top: paddingTop,\n                left: paddingLeft\n            };\n        }\n\n        return this._padding;\n    }\n\n    _toDocumentCoordinates(point) {\n        const padding = this._elementPadding();\n        const offset = elementOffset(this.element);\n\n        return {\n            left: round(point.x + padding.left + offset.left),\n            top: round(point.y + padding.top + offset.top)\n        };\n    }\n\n    // TODO: Breaking change due to peer version change\n    // Reuse by exposing _surfacePoint on Surface\n    _toModelCoordinates(clientX, clientY) {\n        const element = this.element;\n        const offset = elementOffset(element);\n        const padding = this._elementPadding();\n        const inverseTransform = elementScale(element).invert();\n        const point = new geometry.Point(\n            clientX - offset.left - padding.left,\n            clientY - offset.top - padding.top\n        ).transform(inverseTransform);\n\n        return new Point(point.x, point.y);\n    }\n\n    _tap(e) {\n        const drawingElement = this.surface.eventTarget(e);\n        const element = this._drawingChartElement(drawingElement, e);\n        const sharedTooltip = this._sharedTooltip();\n\n        if (!this._startHover(drawingElement, e) && !sharedTooltip) {\n            this._unsetActivePoint();\n        }\n\n        if (sharedTooltip) {\n            this._trackSharedTooltip(this._eventCoordinates(e), e, true);\n        }\n\n        this._propagateClick(element, e);\n\n        //part of fix for hover issue on windows touch\n        this.handlingTap = true;\n        setTimeout(() => {\n            this.handlingTap = false;\n        }, 0);\n    }\n\n    _click(e) {\n        const element = this._getChartElement(e);\n        this._propagateClick(element, e);\n    }\n\n    _propagateClick(element, e) {\n        let current = element;\n        while (current) {\n            if (current.click) {\n                current.click(this, e);\n            }\n\n            current = current.parent;\n        }\n    }\n\n    _startHover(element, e) {\n        if (this._suppressHover) {\n            return false;\n        }\n\n        let point = this._drawingChartElement(element, e, function(element) {\n            return (element.hover || element.over) && !(element instanceof PlotAreaBase);\n        });\n\n        this._showInactiveOpacity(point, e);\n\n        return point;\n    }\n\n    _displayTooltip(point) {\n        const tooltipOptions = deepExtend({}, this.options.tooltip, point.options.tooltip);\n        if (tooltipOptions.visible) {\n            this._tooltip.show(point);\n        }\n    }\n\n    _displayInactiveOpacity(activePoint, multipleSeries, highlightPoints) {\n        const chartInstance = this._activeChartInstance = this._chartInstanceFromPoint(activePoint);\n        if (!chartInstance) {\n            return;\n        }\n\n        if (multipleSeries) {\n            this._updateSeriesOpacity(activePoint);\n            this._applySeriesOpacity(chartInstance.children, null, true);\n            this._applySeriesOpacity(chartInstance.children, activePoint.series);\n            this._highlight.show(highlightPoints || activePoint);\n        } else {\n            let inactivePoints;\n\n            if (!chartInstance.supportsPointInactiveOpacity()) {\n                this._highlight.show(activePoint);\n                return;\n            }\n\n            inactivePoints = this._getInactivePoints(activePoint, chartInstance);\n\n            if (inactivePoints && inactivePoints.length) {\n                this._highlight.show(inactivePoints, 1 - this._getInactiveOpacityForSeries(activePoint.series));\n            }\n        }\n    }\n\n    _getInactivePoints(activePoint, chartInstance) {\n        let allPoints = this._getAllPointsOfType(chartInstance, activePoint.constructor);\n\n        return allPoints.filter(point => point !== activePoint);\n    }\n\n    _getAllPointsOfType(container, type) {\n        let points = [];\n\n        for (let i = 0; i < container.children.length; i++) {\n            const element = container.children[i];\n\n            if (element.constructor === type) {\n                points.push(element);\n            } else if (element.children && element.children.length) {\n                points = points.concat(this._getAllPointsOfType(element, type));\n            }\n        }\n\n        return points;\n    }\n\n    _updateHoveredPoint(point, e) {\n        const hoveredPoint = this._hoveredPoint;\n\n        if (hoveredPoint && hoveredPoint !== point) {\n            hoveredPoint.out(this, e);\n            this._hoveredPoint = null;\n        }\n\n        if (point && hoveredPoint !== point && point.over) {\n            this._hoveredPoint = point;\n            point.over(this, e);\n        }\n    }\n\n    _updateDrilldownPoint(point) {\n        if (!point || !point.series) {\n            return;\n        }\n\n        const { fields } = SeriesBinder.current.bindPoint(point.series, null, point.dataItem);\n        if (fields.drilldown) {\n            this._drilldownState = { cursor: this.element.style.cursor };\n            this.element.style.cursor = 'pointer';\n        }\n    }\n\n    _resetDrilldownPoint() {\n        if (this._drilldownState) {\n            this.element.style.cursor = this._drilldownState.cursor;\n            this._drilldownState = null;\n        }\n    }\n\n    _startDrilldown(point) {\n        if (!point || !point.series) {\n            return;\n        }\n\n        const series = point.series;\n        const { fields } = SeriesBinder.current.bindPoint(series, null, point.dataItem);\n        const value = fields.drilldown;\n        if (value) {\n            const args = { series, point, value, sender: this };\n            this.trigger(DRILLDOWN, args);\n        }\n    }\n\n    _updateSeriesOpacity(point, resetOpacity) {\n        const plotArea = this._plotArea;\n        const length = plotArea.series.length;\n\n        for (let i = 0; i < length; i++) {\n            const currSeries = plotArea.series[i];\n            const defaultOpacity = this._getDefaultOpacityForSeries(currSeries);\n            const inactiveOpacity = this._getInactiveOpacityForSeries(currSeries);\n\n            if (!resetOpacity && currSeries !== point.series) {\n                currSeries.defaultOpacity = defaultOpacity;\n                currSeries.opacity = inactiveOpacity;\n\n                if (currSeries.line) {\n                    currSeries.line.opacity = inactiveOpacity;\n                }\n            } else {\n                currSeries.opacity = defaultOpacity;\n\n                if (currSeries.line) {\n                    currSeries.line.opacity = defaultOpacity;\n                }\n            }\n        }\n    }\n\n    _applySeriesOpacity(elements, activeSeries, reset, series) {\n        for (let i = 0; i < elements.length; i++) {\n            const element = elements[i];\n            const currSeries = element.series || series;\n            const shouldHighlight = currSeries && (currSeries.highlight || {}).visible;\n\n            if (shouldHighlight && element.visual) {\n                const opacity = series ? series.opacity : element.series.opacity;\n                if (currSeries !== activeSeries || reset) {\n                    element.visual.opacity(reset ? 1 : opacity);\n                }\n            }\n\n            if (element.children && element.children.length) {\n                this._applySeriesOpacity(element.children, activeSeries, reset, element.series);\n            }\n        }\n    }\n\n    _chartInstanceFromPoint(point) {\n        let chartInstance = point.parent;\n\n        while (chartInstance && !chartInstance.plotArea) {\n            chartInstance = chartInstance.parent;\n        }\n\n        return chartInstance;\n    }\n\n    _showInactiveOpacity(point, e) {\n        const activePoint = this._activePoint;\n        const multipleSeries = this._plotArea.series.length > 1;\n        const hasInactiveOpacity = this._hasInactiveOpacity();\n\n        this._updateHoveredPoint(point, e);\n\n        if (point && activePoint !== point && point.hover) {\n            this._activePoint = point;\n\n            if (!this._sharedTooltip() && !point.hover(this, e)) {\n                this._displayTooltip(point);\n\n                if (hasInactiveOpacity) {\n                    this._displayInactiveOpacity(point, multipleSeries);\n                } else {\n                    this._highlight.show(point);\n                }\n            }\n        }\n\n        return point;\n    }\n\n    _hideInactiveOpacity(point) {\n        const multipleSeries = this._plotArea.series.length > 1;\n        const hasInactiveOpacity = this._hasInactiveOpacity();\n        if (hasInactiveOpacity) {\n            if (multipleSeries && this._activeChartInstance) {\n                this._updateSeriesOpacity(point, true);\n                this._applySeriesOpacity(this._activeChartInstance.children, null, true);\n                this._activeChartInstance = null;\n            }\n            this._highlight && this._highlight.hide();\n            this._activePoint = null;\n        }\n    }\n\n    _hasInactiveOpacity() {\n        let hasDefaultInactiveOpacity = this.options.seriesDefaults.highlight.inactiveOpacity !== undefined;\n        let hasInactiveOpacity = this.options.series.filter(s => s.highlight.inactiveOpacity !== undefined ).length > 0;\n        return hasDefaultInactiveOpacity || hasInactiveOpacity;\n    }\n\n    _getInactiveOpacityForSeries(series) {\n        let defaultInactiveOpacity = this.options.seriesDefaults.highlight.inactiveOpacity;\n        let seriesInactiveOpacity = series.highlight.inactiveOpacity;\n        return seriesInactiveOpacity || defaultInactiveOpacity || series.opacity || DEFAULT_SERIES_OPACITY;\n    }\n\n    _getDefaultOpacityForSeries(series) {\n        return series.defaultOpacity || series.opacity || DEFAULT_SERIES_OPACITY;\n    }\n\n    _mouseover(e) {\n        const point = this._startHover(e.element, e.originalEvent);\n\n        if (point && point.tooltipTracking && !this._mouseMoveTrackHandler && !this._sharedTooltip()) {\n            this._mouseMoveTrackHandler = this._mouseMoveTracking.bind(this);\n            bindEvents(document, {\n                [ MOUSEMOVE ]: this._mouseMoveTrackHandler\n            });\n        }\n    }\n\n    _mouseMoveTracking(e) {\n        const { options, _tooltip: tooltip, _highlight: highlight, _activePoint: point } = this;\n        const coords = this._eventCoordinates(e);\n\n        if (this._plotArea.box.containsPoint(coords)) {\n            if (point && point.tooltipTracking && point.series && point.parent.getNearestPoint) {\n                const seriesPoint = point.parent.getNearestPoint(coords.x, coords.y, point.seriesIx);\n                if (seriesPoint && seriesPoint !== point) {\n                    this._activePoint = seriesPoint;\n\n                    if (!seriesPoint.hover(this, e)) {\n                        const tooltipOptions = deepExtend({}, options.tooltip, seriesPoint.options.tooltip);\n                        if (tooltipOptions.visible) {\n                            tooltip.show(seriesPoint);\n                        }\n\n                        highlight.show(seriesPoint);\n                    }\n                }\n            }\n        } else {\n            unbindEvents(document, {\n                [ MOUSEMOVE ]: this._mouseMoveTrackHandler\n            });\n            this._unsetActivePoint();\n            this._mouseMoveTrackHandler = null;\n\n            this._hideInactiveOpacity(point);\n        }\n    }\n\n    _mousemove(e) {\n        const coords = this._eventCoordinates(e);\n        const plotArea = this._plotArea;\n\n        this._trackCrosshairs(coords);\n\n        if (plotArea.hover) {\n            const overPlotArea = plotArea.backgroundContainsPoint(coords);\n            if (overPlotArea) {\n                this._plotAreaHovered = true;\n                this._plotArea.hover(this, e);\n            } else if (this._plotAreaHovered && !overPlotArea) {\n                this._plotAreaHovered = false;\n                this.trigger(PLOT_AREA_LEAVE);\n            }\n        }\n\n        if (this._sharedTooltip()) {\n            this._trackSharedTooltip(coords, e);\n        }\n    }\n\n    _trackCrosshairs(coords) {\n        const crosshairs = this._plotArea.crosshairs;\n\n        for (let i = 0; i < crosshairs.length; i++) {\n            const current = crosshairs[i];\n\n            if (current.box.containsPoint(coords)) {\n                current.showAt(coords);\n            } else {\n                current.hide();\n            }\n        }\n    }\n\n    _trackSharedTooltip(coords, e, toggle) {\n        if (this._suppressHover) {\n            return;\n        }\n\n        const { options: { tooltip: tooltipOptions }, _plotArea: plotArea, _plotArea: { categoryAxis }, _tooltip: tooltip, _highlight: highlight } = this;\n\n        if (plotArea.backgroundContainsPoint(coords)) {\n            const index = categoryAxis.pointCategoryIndex(coords);\n            if (index !== this._tooltipCategoryIx || (!this._sharedHighlight && toggle)) {\n                const points = plotArea.pointsByCategoryIndex(index);\n                const pointArgs = points.map(function(point) {\n                    return point.eventArgs(e);\n                });\n                const hoverArgs = pointArgs[0] || {};\n                hoverArgs.categoryPoints = pointArgs;\n\n                if (points.length > 0 && !this.trigger(SERIES_HOVER, hoverArgs)) {\n                    if (tooltipOptions.visible) {\n                        tooltip.showAt(points, coords);\n                    }\n\n                    highlight.show(points);\n\n                    this._sharedHighlight = true;\n                } else {\n                    tooltip.hide();\n                }\n\n                this._tooltipCategoryIx = index;\n            } else if (toggle && this._sharedHighlight) {\n                highlight.hide();\n                tooltip.hide();\n                this._sharedHighlight = false;\n            }\n        } else if (this._sharedHighlight) {\n            highlight.hide();\n            tooltip.hide();\n            this._tooltipCategoryIx = null;\n            this._sharedHighlight = false;\n        }\n    }\n\n    hideElements(options) {\n        const plotArea = this._plotArea;\n        this._mousemove.cancel();\n\n        plotArea.hideCrosshairs();\n\n        this._unsetActivePoint(options);\n    }\n\n    _unsetActivePoint(options) {\n        const { _tooltip: tooltip, _highlight: highlight } = this;\n\n        this._activePoint = null;\n        this._hoveredPoint = null;\n\n        if (tooltip && !(options && options.keepTooltipOpen)) {\n            tooltip.hide();\n        }\n\n        this._tooltipCategoryIx = null;\n        this._sharedHighlight = false;\n\n        if (highlight) {\n            highlight.hide();\n        }\n    }\n\n    _deferRedraw() {\n        this._redraw();\n    }\n\n    _clearRedrawTimeout() {\n        if (this._redrawTimeout) {\n            clearInterval(this._redrawTimeout);\n            this._redrawTimeout = null;\n        }\n    }\n\n    bindCategories() {\n        const options = this.options;\n        const definitions = [].concat(options.categoryAxis);\n\n        for (let axisIx = 0; axisIx < definitions.length; axisIx++) {\n            const axis = definitions[axisIx];\n            if (axis.autoBind !== false) {\n                this.bindCategoryAxisFromSeries(axis, axisIx);\n            }\n        }\n    }\n\n    bindCategoryAxisFromSeries(axis, axisIx) {\n        const series = this.options.series;\n        const seriesLength = series.length;\n        const uniqueCategories = new HashMap();//perf improvement in case type category with dates\n        let items = [];\n        let bindable = false;\n        let dateAxis;\n\n        for (let seriesIx = 0; seriesIx < seriesLength; seriesIx++) {\n            const s = series[seriesIx];\n            const onAxis = s.categoryAxis === axis.name || (!s.categoryAxis && axisIx === 0);\n            const data = s.data;\n            const dataLength = data.length;\n            const bind = s.categoryField && onAxis;\n            bindable = bind || bindable;\n\n            if (bind && dataLength > 0) {\n                dateAxis = isDateAxis(axis, getField(s.categoryField, data[0]));\n\n                const getFn = dateAxis ? getDateField : getField;\n\n                for (let dataIx = 0; dataIx < dataLength; dataIx++) {\n                    const dataRow = data[dataIx];\n                    const category = getFn(s.categoryField, dataRow, this.chartService.intl);\n\n                    if (dateAxis || !uniqueCategories.get(category)) {\n                        items.push([ category, dataRow ]);\n\n                        if (!dateAxis) {\n                            uniqueCategories.set(category, true);\n                        }\n                    }\n                }\n            }\n        }\n\n        if (items.length > 0) {\n            if (dateAxis) {\n                items = uniqueDates(items, function(a, b) {\n                    return dateComparer(a[0], b[0]);\n                });\n            }\n\n            const result = transpose(items);\n            axis.categories = result[0];\n        } else if (bindable) {\n            axis.categories = [];\n        }\n    }\n\n    _isBindable(series) {\n        const valueFields = SeriesBinder.current.valueFields(series);\n        let result = true;\n\n        for (let i = 0; i < valueFields.length; i++) {\n            let field = valueFields[i];\n            if (field === VALUE) {\n                field = \"field\";\n            } else {\n                field = field + \"Field\";\n            }\n\n            if (!defined(series[field])) {\n                result = false;\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    _noTransitionsRedraw() {\n        const options = this.options;\n        let transitionsState;\n\n        if (options.transitions !== false) {\n            options.transitions = false;\n            transitionsState = true;\n        }\n\n        this._redraw();\n\n        if (transitionsState) {\n            options.transitions = true;\n        }\n    }\n\n    _legendItemHover(seriesIndex, pointIndex) {\n        const { _plotArea: plotArea, _highlight: highlight } = this;\n        const currentSeries = (plotArea.srcSeries || plotArea.series)[seriesIndex];\n        let items;\n\n        if (inArray(currentSeries.type, [ PIE, DONUT, FUNNEL, PYRAMID ])) {\n            items = plotArea.findPoint(function(point) {\n                return point.series.index === seriesIndex && point.index === pointIndex;\n            });\n        } else {\n            items = plotArea.pointsBySeriesIndex(seriesIndex);\n        }\n\n        if (this._hasInactiveOpacity() && currentSeries.visible && items) {\n            const multipleSeries = plotArea.series.length > 1;\n            const point = items.length ? items[0] : items;\n\n            this._displayInactiveOpacity(point, multipleSeries, items);\n        } else {\n            highlight.show(items);\n        }\n    }\n\n    _shouldAttachMouseMove() {\n        return this._plotArea.crosshairs.length || (this._tooltip && this._sharedTooltip()) || this.requiresHandlers([ PLOT_AREA_HOVER, PLOT_AREA_LEAVE ]);\n    }\n\n    updateMouseMoveHandler() {\n        unbindEvents(this.element, {\n            [ MOUSEMOVE ]: this._mousemove\n        });\n\n        if (this._shouldAttachMouseMove()) {\n            bindEvents(this.element, {\n                [ MOUSEMOVE ]: this._mousemove\n            });\n        }\n    }\n\n    applyOptions(options, theme) {\n        clearMissingValues(this._originalOptions, options);\n        this._originalOptions = deepExtend(this._originalOptions, options);\n        this.options = deepExtend({}, this._originalOptions);\n\n        if (theme) {\n            this._theme = theme;\n            this.chartService.theme = theme;\n        }\n        this._initTheme(this.options, this._theme);\n\n        this._toggleDragZoomEvents();\n    }\n\n    setOptions(options, theme) {\n        this.applyOptions(options, theme);\n        this.bindCategories();\n        this.redraw();\n        this.updateMouseMoveHandler();\n    }\n\n    setDirection(rtl) {\n        this.chartService.rtl = Boolean(rtl);\n        if (this.surface && this.surface.type === 'svg') {\n            this._destroySurface();\n        }\n    }\n\n    setIntlService(intl) {\n        this.chartService.intl = intl;\n    }\n\n    noTransitionsRedraw() {\n        this._noTransitionsRedraw();\n    }\n\n    destroy() {\n        this._destroyed = true;\n\n        unbindEvents(this.element, {\n            [ CONTEXTMENU ]: this._clickHandler,\n            [ MOUSEWHEEL ]: this._mousewheelHandler,\n            [ MOUSEMOVE ]: this._mousemove,\n            [ MOUSELEAVE ]: this._mouseleaveHandler\n        });\n\n        if (this.domEvents) {\n            this.domEvents.destroy();\n            delete this.domEvents;\n        }\n\n        if (this._mouseMoveTrackHandler) {\n            unbindEvents(document, {\n                [ MOUSEMOVE ]: this._mouseMoveTrackHandler\n            });\n        }\n\n        this._destroyView();\n\n        this._destroySurface();\n\n        this._clearRedrawTimeout();\n    }\n\n    _destroySurface() {\n        const surface = this.surface;\n        if (surface) {\n            surface.unbind(\"mouseenter\", this._surfaceMouseenterHandler);\n            surface.unbind(\"mouseleave\", this._surfaceMouseleaveHandler);\n            surface.destroy();\n\n            this.surface = null;\n        }\n    }\n\n    _destroySelections() {\n        const selections = this._selections;\n\n        if (selections) {\n            while (selections.length > 0) {\n                selections.shift().destroy();\n            }\n        }\n    }\n\n    _destroyView() {\n        const model = this._model;\n\n        if (model) {\n            model.destroy();\n            this._model = null;\n        }\n\n        this._unsetActivePoint();\n        this._resetDrilldownPoint();\n        this._destroySelections();\n\n        if (this._tooltip) {\n            this._tooltip.destroy();\n        }\n\n        if (this._highlight) {\n            this._highlight.destroy();\n        }\n\n        if (this._zoomSelection) {\n            this._zoomSelection.destroy();\n            delete this._zoomSelection;\n        }\n\n        if (this._pannable) {\n            this._pannable.destroy();\n            delete this._pannable;\n        }\n\n        if (this._mousewheelZoom) {\n            this._mousewheelZoom.destroy();\n            delete this._mousewheelZoom;\n        }\n    }\n}\n\nfunction resolveAxisAliases(options) {\n    const aliases = AXIS_NAMES;\n\n    for (let idx = 0; idx < aliases.length; idx++) {\n        const alias = aliases[idx] + \"Axes\";\n        if (options[alias]) {\n            options[aliases[idx] + \"Axis\"] = options[alias];\n            delete options[alias];\n        }\n    }\n}\n\nfunction pointByCategoryName(points, name) {\n    if (points) {\n        for (let idx = 0; idx < points.length; idx++) {\n            if (points[idx].category === name) {\n                return [ points[idx] ];\n            }\n        }\n    }\n}\n\nfunction applyAxisDefaults(options, themeOptions) {\n    const themeAxisDefaults = ((themeOptions || {}).axisDefaults) || {};\n    let axisName, axisDefaults, axes;\n\n    function mapAxisOptions(axisOptions) {\n        const axisColor = (axisOptions || {}).color || axisDefaults.color;\n        const result = deepExtend({},\n            themeAxisDefaults,\n            themeAxisDefaults[axisName],\n            axisDefaults,\n            axisDefaults[axisName], {\n                line: { color: axisColor },\n                labels: { color: axisColor },\n                title: { color: axisColor }\n            },\n            axisOptions\n        );\n\n        delete result[axisName];\n\n        return result;\n    }\n\n    for (let idx = 0; idx < AXIS_NAMES.length; idx++) {\n        axisName = AXIS_NAMES[idx] + \"Axis\";\n        axisDefaults = options.axisDefaults || {};\n        axes = [].concat(options[axisName]);\n\n        axes = axes.map(mapAxisOptions);\n\n        options[axisName] = axes.length > 1 ? axes : axes[0];\n    }\n}\n\nfunction applySeriesDefaults(options, themeOptions) {\n    const series = options.series;\n    const seriesLength = series.length;\n    const seriesDefaults = options.seriesDefaults;\n    const commonDefaults = deepExtend({}, options.seriesDefaults);\n    const themeSeriesDefaults = themeOptions ? deepExtend({}, themeOptions.seriesDefaults) : {};\n    const commonThemeDefaults = deepExtend({}, themeSeriesDefaults);\n\n    cleanupNestedSeriesDefaults(commonDefaults);\n    cleanupNestedSeriesDefaults(commonThemeDefaults);\n\n    for (let i = 0; i < seriesLength; i++) {\n        const seriesType = series[i].type || options.seriesDefaults.type;\n\n        const baseOptions = deepExtend(\n            { data: [] },\n            commonThemeDefaults,\n            themeSeriesDefaults[seriesType],\n            { tooltip: options.tooltip },\n            commonDefaults,\n            seriesDefaults[seriesType]\n        );\n\n        series[i]._defaults = baseOptions;\n        series[i] = deepExtend({}, baseOptions, series[i]);\n        series[i].data = series[i].data || [];\n    }\n}\n\nfunction cleanupNestedSeriesDefaults(seriesDefaults) {\n    delete seriesDefaults.bar;\n    delete seriesDefaults.column;\n    delete seriesDefaults.rangeColumn;\n    delete seriesDefaults.line;\n    delete seriesDefaults.verticalLine;\n    delete seriesDefaults.pie;\n    delete seriesDefaults.donut;\n    delete seriesDefaults.area;\n    delete seriesDefaults.verticalArea;\n    delete seriesDefaults.scatter;\n    delete seriesDefaults.scatterLine;\n    delete seriesDefaults.bubble;\n    delete seriesDefaults.candlestick;\n    delete seriesDefaults.ohlc;\n    delete seriesDefaults.boxPlot;\n    delete seriesDefaults.bullet;\n    delete seriesDefaults.verticalBullet;\n    delete seriesDefaults.polarArea;\n    delete seriesDefaults.polarLine;\n    delete seriesDefaults.radarArea;\n    delete seriesDefaults.radarLine;\n    delete seriesDefaults.waterfall;\n}\n\n\nfunction axisRanges(axes) {\n    const ranges = {};\n\n    for (let i = 0; i < axes.length; i++) {\n        const axis = axes[i];\n        const axisName = axis.options.name;\n        if (axisName) {\n            ranges[axisName] = axis.range();\n        }\n    }\n\n    return ranges;\n}\n\nfunction sortDates(dates, comparer = dateComparer) {\n    for (let i = 1, length = dates.length; i < length; i++) {\n        if (comparer(dates[i], dates[i - 1]) < 0) {\n            dates.sort(comparer);\n            break;\n        }\n    }\n\n    return dates;\n}\n\nfunction uniqueDates(srcDates, comparer = dateComparer) {\n    const dates = sortDates(srcDates, comparer);\n    const length = dates.length;\n    const result = length > 0 ? [ dates[0] ] : [];\n\n    for (let i = 1; i < length; i++) {\n        if (comparer(dates[i], last(result)) !== 0) {\n            result.push(dates[i]);\n        }\n    }\n\n    return result;\n}\n\nfunction transpose(rows) {\n    const rowCount = rows.length;\n    const result = [];\n\n    for (let rowIx = 0; rowIx < rowCount; rowIx++) {\n        const row = rows[rowIx];\n        const colCount = row.length;\n\n        for (let colIx = 0; colIx < colCount; colIx++) {\n            result[colIx] = result[colIx] || [];\n            result[colIx].push(row[colIx]);\n        }\n    }\n\n    return result;\n}\n\nconst DATA_FIELDS = [ 'data', 'categories' ];\n\nfunction clearMissingValues(originalOptions, options) {\n    for (let field in options) {\n        if (!inArray(field, DATA_FIELDS) && options.hasOwnProperty(field)) {\n            const fieldValue = options[field];\n            const originalValue = originalOptions[field];\n            if (defined(originalValue)) {\n                const nullValue = fieldValue === null;\n                if ((nullValue || !defined(fieldValue))) {\n                    delete originalOptions[field];\n                    if (nullValue) {\n                        delete options[field];\n                    }\n                } else if (originalValue && isObject(fieldValue)) {\n                    if (isObject(originalValue)) {\n                        clearMissingValues(originalValue, fieldValue);\n                    }\n                }\n            }\n        }\n    }\n}\n\nfunction triggerPaneRender(panes) {\n    for (let idx = 0; idx < panes.length; idx++) {\n        panes[idx].notifyRender();\n    }\n}\n\nsetDefaultOptions(Chart, {\n    renderAs: \"\",\n    chartArea: {},\n    legend: {\n        visible: true,\n        labels: {}\n    },\n    categoryAxis: {},\n    seriesDefaults: {\n        type: COLUMN,\n        data: [],\n        highlight: {\n            visible: true\n        },\n        labels: {},\n        negativeValues: {\n            visible: false\n        }\n    },\n    series: [],\n    seriesColors: null,\n    tooltip: {\n        visible: false\n    },\n    transitions: true,\n    valueAxis: {},\n    plotArea: {},\n    title: {},\n    xAxis: {},\n    yAxis: {},\n    panes: [ {} ],\n    pannable: false,\n    zoomable: false\n});\n\nexport default Chart;\n"],"mappings":"AAAA,SAASA,OAAO,IAAIC,IAAI,EAAEC,QAAQ,EAAEC,QAAQ,QAAQ,yBAAyB;AAE7E,SAASC,WAAW,EAAEC,KAAK,EAAEC,YAAY,EAAEC,KAAK,QAAQ,SAAS;AAEjE,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,QAAQ,MAAM,yBAAyB;AAC9C,OAAOC,aAAa,MAAM,+BAA+B;AACzD,OAAOC,cAAc,MAAM,gCAAgC;AAC3D,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAOC,eAAe,MAAM,6BAA6B;AACzD,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,YAAY,MAAM,iBAAiB;AAC1C,OAAOC,OAAO,MAAM,mBAAmB;AACvC,OAAOC,aAAa,MAAM,0BAA0B;AACpD,OAAOC,mBAAmB,MAAM,iCAAiC;AACjE,OAAOC,YAAY,MAAM,0BAA0B;AACnD,SAASC,YAAY,EAAEC,gBAAgB,QAAQ,aAAa;AAC5D,OAAOC,QAAQ,MAAM,mBAAmB;AACxC,OAAOC,UAAU,MAAM,sBAAsB;AAC7C,OAAOC,YAAY,MAAM,wBAAwB;AACjD,SAASC,SAAS,EAAEC,aAAa,EAAEC,cAAc,QAAQ,gBAAgB;AAEzE,SAASC,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEC,aAAa,EAAEC,cAAc,EAAEC,sBAAsB,QAAQ,qBAAqB;AACxG,SAASC,QAAQ,EAAEC,KAAK,EAAEC,iBAAiB,EAAEC,UAAU,EAAEC,OAAO,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,WAAW,EAAEC,aAAa,EAC/GC,YAAY,EAAEC,aAAa,EAAEC,gBAAgB,EAAEC,UAAU,EAAEC,YAAY,EAAEC,eAAe,EAAEC,UAAU,EAAEC,OAAO,EAAEC,IAAI,EAAEC,KAAK,EAC1HC,OAAO,EAAEC,cAAc,QAAQ,WAAW;AAEnD,SAASC,YAAY,QAAQ,eAAe;AAE5C,SAASC,UAAU,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,YAAY,EAAEC,MAAM,EAAEC,UAAU,EAAEC,eAAe,EAAEC,eAAe,EAC1HC,MAAM,EAAEC,QAAQ,EAAEC,GAAG,EAAEC,KAAK,EAAEC,MAAM,EAAEC,OAAO,EAAEC,MAAM,EAAEC,UAAU,EAAEC,gBAAgB,EAAEC,oBAAoB,EAAEC,YAAY,EAAEC,YAAY,EACrIC,WAAW,EAAEC,YAAY,EAAEC,YAAY,EAAEC,SAAS,QAAQ,aAAa;AAEhF,OAAO,cAAc;AACrB,OAAO,mBAAmB;AAE1B,MAAMC,UAAU,GAAG,CAAEf,QAAQ,EAAEvC,KAAK,EAAEF,CAAC,EAAEC,CAAC,CAAE;AAE5C,MAAMwD,SAAS,GAAG,WAAW;AAC7B,MAAMC,WAAW,GAAG,aAAa;AACjC,MAAMC,UAAU,GAAG,YAAY;AAC/B,MAAMC,eAAe,GAAG,EAAE;AAE1B,MAAMC,KAAK,SAAStD,KAAK,CAAC;EACtBuD,WAAWA,CAACC,OAAO,EAAEC,WAAW,EAAEC,YAAY,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC1D,KAAK,CAAC,CAAC;IAEP,IAAI,CAACC,SAAS,GAAG,EAAE;IACnB,IAAI,CAACC,WAAW,CAACF,OAAO,CAACG,QAAQ,CAAC;IAClC,IAAI,CAACC,YAAY,GAAG,IAAI9E,YAAY,CAAC,IAAI,EAAE0E,OAAO,CAAC;IACnD,IAAI,CAACI,YAAY,CAACC,KAAK,GAAGN,YAAY;IAEtC,IAAI,CAACO,YAAY,CAACT,OAAO,CAAC;IAE1B,MAAMU,OAAO,GAAGhE,UAAU,CAAC,CAAC,CAAC,EAAE,IAAI,CAACgE,OAAO,EAAET,WAAW,CAAC;IACzD,IAAI,CAACU,gBAAgB,GAAGjE,UAAU,CAAC,CAAC,CAAC,EAAEgE,OAAO,CAAC;IAC/C,IAAI,CAACE,MAAM,GAAGV,YAAY;IAC1B,IAAI,CAACW,UAAU,CAACH,OAAO,EAAER,YAAY,CAAC;IAEtC,IAAI,CAACY,aAAa,CAAC,CAAC;IACpB,IAAI,CAACC,YAAY,CAAC,CAAC;IAEnB,IAAI,CAACC,cAAc,CAAC,CAAC;IACrBzD,UAAU,CAAC0D,YAAY,CAAChB,WAAW,EAAE,MAAM;MACvC,IAAI,CAACiB,UAAU,GAAG,IAAI;MACtB,IAAI,CAAC,IAAI,CAACC,UAAU,EAAE;QAClB,IAAI,CAACC,OAAO,CAAC,MAAM,CAAC;QACpB,IAAI,CAACC,OAAO,CAAC,CAAC;QACd,IAAI,CAACC,aAAa,CAAC,CAAC;MACxB;IACJ,CAAC,CAAC;EACN;EAEAb,YAAYA,CAACT,OAAO,EAAE;IAClB,IAAI,CAACuB,gBAAgB,CAACvB,OAAO,CAAC;IAC9BA,OAAO,CAACwB,KAAK,CAACC,QAAQ,GAAG,UAAU;IACnC,OAAOzB,OAAO,CAAC0B,UAAU,EAAE;MACvB1B,OAAO,CAAC2B,WAAW,CAAC3B,OAAO,CAAC0B,UAAU,CAAC;IAC3C;IACA,IAAI,CAAC1B,OAAO,GAAGA,OAAO;EAC1B;EAEAuB,gBAAgBA,CAACvB,OAAO,EAAE;IACtBzD,QAAQ,CAACyD,OAAO,EAAE,SAAS,CAAC;EAChC;EAEAa,UAAUA,CAACH,OAAO,EAAER,YAAY,EAAE;IAC9B,MAAM0B,YAAY,GAAG,EAAE;IACvB,MAAMC,MAAM,GAAGnB,OAAO,CAACmB,MAAM,IAAI,EAAE;IAEnC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;MACpCF,YAAY,CAACI,IAAI,CAACC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEL,MAAM,CAACC,CAAC,CAAC,CAAC,CAAC;IACnD;IACApB,OAAO,CAACmB,MAAM,GAAGD,YAAY;IAE7BO,kBAAkB,CAACzB,OAAO,CAAC;IAC3B,IAAI,CAAC0B,aAAa,CAAC1B,OAAO,EAAER,YAAY,CAAC;;IAEzC;IACA,IAAIQ,OAAO,CAAC2B,YAAY,KAAK,IAAI,EAAE;MAC/B,OAAO3B,OAAO,CAAC2B,YAAY;IAC/B;IAEA,IAAI,CAAC3B,OAAO,GAAGhE,UAAU,CAAC,CAAC,CAAC,EAAEwD,YAAY,EAAEQ,OAAO,CAAC;IACpD,IAAI,CAAC4B,iBAAiB,CAAC,CAAC;EAC5B;EAEAC,OAAOA,CAAA,EAAG;IACN,MAAMC,SAAS,GAAG,IAAI,CAAC9B,OAAO,CAAC8B,SAAS,IAAI,CAAC,CAAC;IAC9C,MAAMC,KAAK,GAAGD,SAAS,CAACC,KAAK,GAAGC,QAAQ,CAACF,SAAS,CAACC,KAAK,EAAE,EAAE,CAAC,GAAGE,IAAI,CAACC,KAAK,CAAC,IAAI,CAAC5C,OAAO,CAAC6C,WAAW,CAAC;IACpG,MAAMC,MAAM,GAAGN,SAAS,CAACM,MAAM,GAAGJ,QAAQ,CAACF,SAAS,CAACM,MAAM,EAAE,EAAE,CAAC,GAAGH,IAAI,CAACC,KAAK,CAAC,IAAI,CAAC5C,OAAO,CAAC+C,YAAY,CAAC;IAExG,OAAO;MACHN,KAAK,EAAEA,KAAK;MACZK,MAAM,EAAEA;IACZ,CAAC;EACL;EAEAE,MAAMA,CAACC,KAAK,EAAE;IACV,MAAMC,IAAI,GAAG,IAAI,CAACX,OAAO,CAAC,CAAC;IAC3B,MAAMY,WAAW,GAAG,IAAI,CAACC,KAAK;IAC9B,MAAMC,OAAO,GAAGH,IAAI,CAACT,KAAK,GAAG,CAAC,IAAIS,IAAI,CAACJ,MAAM,GAAG,CAAC;IAEjD,IAAIG,KAAK,IAAII,OAAO,KAAK,CAACF,WAAW,IAAID,IAAI,CAACT,KAAK,KAAKU,WAAW,CAACV,KAAK,IAAIS,IAAI,CAACJ,MAAM,KAAKK,WAAW,CAACL,MAAM,CAAC,EAAE;MAC9G,IAAI,CAACM,KAAK,GAAGF,IAAI;MACjB,IAAI,CAACI,OAAO,CAACJ,IAAI,EAAED,KAAK,CAAC;MACzB,IAAI,CAAC7B,OAAO,CAAC,QAAQ,EAAE8B,IAAI,CAAC;IAChC,CAAC,MAAM,IAAIG,OAAO,IAAI,IAAI,CAACE,WAAW,IAAI3G,IAAI,CAAC,IAAI,CAAC2G,WAAW,EAAEC,CAAC,IAAI,CAACA,CAAC,CAACC,OAAO,CAAC,EAAE;MAC/E,IAAI,CAACC,kBAAkB,CAAC,CAAC;MACzB,IAAI,CAACC,eAAe,CAAC,CAAC;IAC1B;EACJ;EAEAL,OAAOA,CAAA,EAAG;IACN,IAAI,CAACM,oBAAoB,CAAC,CAAC;EAC/B;EAEAC,MAAMA,CAACC,QAAQ,EAAE;IACb,IAAI,CAAC1B,aAAa,CAAC,IAAI,CAAC1B,OAAO,CAAC;IAChC,IAAI,CAAC4B,iBAAiB,CAAC,CAAC;IAExB,IAAIwB,QAAQ,EAAE;MACV,MAAMC,QAAQ,GAAG,IAAI,CAACC,MAAM,CAACC,SAAS;MACtC,MAAMC,IAAI,GAAGH,QAAQ,CAACI,QAAQ,CAACL,QAAQ,CAAC;MACxCC,QAAQ,CAACF,MAAM,CAACK,IAAI,CAAC;IACzB,CAAC,MAAM;MACH,IAAI,CAAC7C,OAAO,CAAC,CAAC;IAClB;EACJ;EAEA+C,OAAOA,CAACC,IAAI,EAAE;IACV,OAAOrI,cAAc,CAACqI,IAAI,EAAE,IAAI,CAACJ,SAAS,CAACK,IAAI,CAAC;EACpD;EAEAtI,cAAcA,CAACqI,IAAI,EAAE;IACjB,OAAO,IAAI,CAACD,OAAO,CAACC,IAAI,CAAC;EAC7B;EAEAE,cAAcA,CAACF,IAAI,EAAE;IACjB,MAAMG,KAAK,GAAG,IAAI,CAACP,SAAS,CAACO,KAAK;IAElC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGD,KAAK,CAACzC,MAAM,EAAE0C,GAAG,EAAE,EAAE;MACzC,IAAID,KAAK,CAACC,GAAG,CAAC,CAAC/D,OAAO,CAAC2D,IAAI,KAAKA,IAAI,EAAE;QAClC,OAAO,IAAIvI,SAAS,CAAC0I,KAAK,CAACC,GAAG,CAAC,CAAC;MACpC;IACJ;EACJ;EAEAC,eAAeA,CAACD,GAAG,EAAE;IACjB,MAAMD,KAAK,GAAG,IAAI,CAACP,SAAS,CAACO,KAAK;IAClC,IAAIA,KAAK,CAACC,GAAG,CAAC,EAAE;MACZ,OAAO,IAAI3I,SAAS,CAAC0I,KAAK,CAACC,GAAG,CAAC,CAAC;IACpC;EACJ;EAEAV,QAAQA,CAAA,EAAG;IACP,OAAO,IAAIhI,aAAa,CAAC,IAAI,CAACkI,SAAS,CAAC;EAC5C;EAEAU,eAAeA,CAACC,IAAI,EAAEC,MAAM,EAAE;IAC1B,MAAMd,QAAQ,GAAG,IAAI,CAACE,SAAS;IAC/B,MAAMa,WAAW,GAAG,CAACf,QAAQ,CAACgB,SAAS,IAAIhB,QAAQ,CAAClC,MAAM,IAAI,EAAE,EAAE,CAAC,CAAC;IACpE,IAAImD,MAAM;IAEV,IAAIlI,UAAU,CAAC+H,MAAM,CAAC,EAAE;MACpBG,MAAM,GAAGjB,QAAQ,CAACkB,YAAY,CAACJ,MAAM,CAAC;IAC1C,CAAC,MAAM;MACH,IAAIK,UAAU,EAAEC,YAAY;MAC5B,IAAItI,QAAQ,CAACgI,MAAM,CAAC,EAAE;QAClBK,UAAU,GAAGL,MAAM,CAAChD,MAAM;QAC1BsD,YAAY,GAAGN,MAAM,CAACO,QAAQ;MAClC,CAAC,MAAM;QACHF,UAAU,GAAGC,YAAY,GAAGN,MAAM;MACtC;MAEA,IAAIC,WAAW,CAACO,IAAI,KAAKzG,KAAK,EAAE;QAC5BoG,MAAM,GAAGM,mBAAmB,CAACvB,QAAQ,CAACwB,kBAAkB,CAACL,UAAU,CAAC,EAAEC,YAAY,CAAC;MACvF,CAAC,MAAM,IAAI3H,OAAO,CAACsH,WAAW,CAACO,IAAI,EAAE,CAAE1G,GAAG,EAAEE,MAAM,EAAEC,OAAO,CAAE,CAAC,EAAE;QAC5DkG,MAAM,GAAGM,mBAAmB,CAAC,CAACvB,QAAQ,CAACyB,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAER,MAAM,EAAEG,YAAY,CAAC;MACjF,CAAC,MAAM;QACHH,MAAM,GAAGjB,QAAQ,CAACwB,kBAAkB,CAACL,UAAU,CAAC;MACpD;IACJ;IAEA,IAAIF,MAAM,EAAE;MACR,IAAI,CAACS,qBAAqB,CAACb,IAAI,EAAEI,MAAM,CAAC;IAC5C;EACJ;EAEAS,qBAAqBA,CAACb,IAAI,EAAEI,MAAM,EAAE;IAChC,MAAMU,SAAS,GAAG,IAAI,CAACC,UAAU;IACjC,KAAK,IAAIlB,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGO,MAAM,CAACjD,MAAM,EAAE0C,GAAG,EAAE,EAAE;MAC1CiB,SAAS,CAACE,oBAAoB,CAACZ,MAAM,CAACP,GAAG,CAAC,EAAEG,IAAI,CAAC;IACrD;EACJ;EAEAiB,WAAWA,CAAChB,MAAM,EAAE;IAChB,MAAMiB,MAAM,GAAG,IAAI,CAACC,cAAc,CAAC,CAAC;IACpC,MAAM;MAAEC,QAAQ,EAAEC,OAAO;MAAEhC,SAAS,EAAEF;IAAS,CAAC,GAAG,IAAI;IACvD,IAAImC,KAAK,EAAEC,aAAa;IAExB,IAAIrJ,UAAU,CAAC+H,MAAM,CAAC,EAAE;MACpBqB,KAAK,GAAGnC,QAAQ,CAACqC,SAAS,CAACvB,MAAM,CAAC;MAClC,IAAIqB,KAAK,IAAIJ,MAAM,EAAE;QACjBK,aAAa,GAAGD,KAAK,CAACG,UAAU;MACpC;IACJ,CAAC,MAAM,IAAIP,MAAM,IAAInJ,OAAO,CAACkI,MAAM,CAAC,EAAE;MAClCsB,aAAa,GAAGpC,QAAQ,CAACuC,YAAY,CAACH,aAAa,CAACtB,MAAM,CAAC;IAC/D;IAEA,IAAIiB,MAAM,EAAE;MACR,IAAIK,aAAa,IAAI,CAAC,EAAE;QACpB,MAAMnB,MAAM,GAAG,IAAI,CAACf,SAAS,CAACsC,qBAAqB,CAACJ,aAAa,CAAC;QAClEF,OAAO,CAACO,MAAM,CAACxB,MAAM,CAAC;MAC1B;IACJ,CAAC,MAAM,IAAIkB,KAAK,EAAE;MACdD,OAAO,CAACrB,IAAI,CAACsB,KAAK,CAAC;IACvB;EACJ;EAEAO,WAAWA,CAAA,EAAG;IACV,IAAI,CAACT,QAAQ,CAACU,IAAI,CAAC,CAAC;EACxB;EAEA3F,YAAYA,CAAA,EAAG;IACX,MAAM4F,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,MAAMC,IAAI,GAAG,IAAI,CAACC,YAAY,CAAC,CAAC;IAEhC,MAAMrE,SAAS,GAAG,IAAI,CAAC9B,OAAO,CAAC8B,SAAS,IAAI,CAAC,CAAC;IAC9C,IAAIA,SAAS,CAACC,KAAK,EAAE;MACjB1F,WAAW,CAAC6J,IAAI,EAAE;QAAEnE,KAAK,EAAED,SAAS,CAACC;MAAM,CAAC,CAAC;IACjD;IACA,IAAID,SAAS,CAACM,MAAM,EAAE;MAClB/F,WAAW,CAAC6J,IAAI,EAAE;QAAE9D,MAAM,EAAEN,SAAS,CAACM;MAAO,CAAC,CAAC;IACnD;IAEA,IAAI,CAAC6D,OAAO,IAAIA,OAAO,CAACjG,OAAO,CAAC2E,IAAI,KAAK,IAAI,CAAC3E,OAAO,CAACoG,QAAQ,EAAE;MAC5D,IAAI,CAACC,eAAe,CAAC,CAAC;MAEtB,IAAI,CAACJ,OAAO,GAAGrM,IAAI,CAAC0M,OAAO,CAACC,MAAM,CAACL,IAAI,EAAE;QACrCvB,IAAI,EAAE,IAAI,CAAC3E,OAAO,CAACoG;MACvB,CAAC,CAAC;MAEF,IAAI,CAACH,OAAO,CAACO,IAAI,CAAC,YAAY,EAAE,IAAI,CAACC,yBAAyB,CAAC;MAC/D,IAAI,CAACR,OAAO,CAACO,IAAI,CAAC,YAAY,EAAE,IAAI,CAACE,yBAAyB,CAAC;IAEnE,CAAC,MAAM;MACH,IAAI,CAACT,OAAO,CAACU,KAAK,CAAC,CAAC;MACpB,IAAI,CAACV,OAAO,CAAC3D,MAAM,CAAC,CAAC;IACzB;EACJ;EAEA6D,YAAYA,CAAA,EAAG;IACX,OAAO,IAAI,CAAC7G,OAAO;EACvB;EAEAqB,OAAOA,CAAA,EAAG;IACN,MAAMiG,KAAK,GAAG,IAAI,CAACC,SAAS,CAAC,CAAC;IAC9B,IAAI,CAACnE,KAAK,GAAG;MACTX,KAAK,EAAE6E,KAAK,CAAC5G,OAAO,CAAC+B,KAAK;MAC1BK,MAAM,EAAEwE,KAAK,CAAC5G,OAAO,CAACoC;IAC1B,CAAC;IAED,IAAI,CAAC0E,YAAY,CAAC,CAAC;IAEnB,IAAI,CAACxD,MAAM,GAAGsD,KAAK;IACnB,IAAI,CAACrD,SAAS,GAAGqD,KAAK,CAACrD,SAAS;IAEhCqD,KAAK,CAACG,YAAY,CAAC,CAAC;IAEpB,IAAI,IAAI,CAAC/G,OAAO,CAACgH,WAAW,KAAK,KAAK,EAAE;MACpCJ,KAAK,CAACK,QAAQ,CAAC,UAAS3H,OAAO,EAAE;QAC7B,IAAIA,OAAO,CAAC4H,SAAS,EAAE;UACnB5H,OAAO,CAAC4H,SAAS,CAACC,KAAK,CAAC,CAAC;QAC7B;MACJ,CAAC,CAAC;IACN;IAEA,IAAI,CAAC9G,YAAY,CAAC,CAAC;IACnB,IAAI,CAAC4F,OAAO,CAACrM,IAAI,CAACgN,KAAK,CAACQ,MAAM,CAAC;IAE/B,IAAI,IAAI,CAACpH,OAAO,CAACgH,WAAW,KAAK,KAAK,EAAE;MACpCJ,KAAK,CAACK,QAAQ,CAAC,UAAS3H,OAAO,EAAE;QAC7B,IAAIA,OAAO,CAAC4H,SAAS,EAAE;UACnB5H,OAAO,CAAC4H,SAAS,CAACG,IAAI,CAAC,CAAC;QAC5B;MACJ,CAAC,CAAC;IACN;IAEA,IAAI,CAAC/B,QAAQ,GAAG,IAAI,CAACgC,cAAc,CAAC,CAAC;IACrC,IAAI,CAACrC,UAAU,GAAG,IAAI9K,SAAS,CAAC,CAAC;IACjC,IAAI,CAAC8I,eAAe,CAAC,CAAC;IACtB,IAAI,CAACsE,eAAe,CAAC,CAAC;IACtB,IAAI,CAACC,oBAAoB,CAAC,CAAC;IAC3B,IAAI,CAACC,qBAAqB,CAAC,CAAC;IAE5B,IAAI,CAAC/G,OAAO,CAAC3C,MAAM,CAAC;IACpB2J,iBAAiB,CAAC,IAAI,CAACnE,SAAS,CAACO,KAAK,CAAC;IAEvC,IAAI,CAAC,IAAI,CAAC6D,SAAS,EAAE;MACjB,IAAI,CAACC,gBAAgB,CAAC,CAAC;IAC3B;EACJ;EAEAC,YAAYA,CAACC,aAAa,EAAE;IACxB,IAAIV,MAAM;IACV,IAAIU,aAAa,KAAKA,aAAa,CAAC/F,KAAK,IAAI+F,aAAa,CAAC1F,MAAM,IAAI0F,aAAa,CAAC9H,OAAO,CAAC,EAAE;MACzF,MAAM+H,cAAc,GAAG,IAAI,CAAC/H,OAAO;MACnC,MAAMA,OAAO,GAAGhE,UAAU,CAAC,CAAC,CAAC,EAAE8L,aAAa,CAAC9H,OAAO,EAAE;QAClD8B,SAAS,EAAE;UACPC,KAAK,EAAE+F,aAAa,CAAC/F,KAAK;UAC1BK,MAAM,EAAE0F,aAAa,CAAC1F;QAC1B;MACJ,CAAC,CAAC;MAEF4F,kBAAkB,CAAC,IAAI,CAAC/H,gBAAgB,EAAED,OAAO,CAAC;MAClD,IAAI,CAACA,OAAO,GAAGhE,UAAU,CAAC,CAAC,CAAC,EAAE,IAAI,CAACiE,gBAAgB,EAAED,OAAO,CAAC;MAC7D,IAAI,CAACG,UAAU,CAAC,IAAI,CAACH,OAAO,EAAE,IAAI,CAACE,MAAM,CAAC;MAC1C,IAAI,CAACI,cAAc,CAAC,CAAC;MAErB,MAAMsG,KAAK,GAAG,IAAI,CAACC,SAAS,CAAC,CAAC;MAE9BD,KAAK,CAACG,YAAY,CAAC,CAAC;MACpBW,iBAAiB,CAACd,KAAK,CAACrD,SAAS,CAACO,KAAK,CAAC;MAExCsD,MAAM,GAAGR,KAAK,CAACQ,MAAM;MAErB,IAAI,CAACpH,OAAO,GAAG+H,cAAc;IACjC,CAAC,MAAM;MACHX,MAAM,GAAG,IAAI,CAACnB,OAAO,CAAC4B,YAAY,CAAC,CAAC;IACxC;IAEA,OAAOT,MAAM;EACjB;EAEA/B,cAAcA,CAAA,EAAG;IACb,OAAO,IAAI,CAAC9B,SAAS,YAAY1I,mBAAmB,IAAI,IAAI,CAACmF,OAAO,CAACuF,OAAO,IAAI,IAAI,CAACvF,OAAO,CAACuF,OAAO,CAACH,MAAM;EAC/G;EAEAmC,eAAeA,CAAA,EAAG;IACd,MAAMvH,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,IAAIA,OAAO,CAACiI,QAAQ,KAAK,KAAK,EAAE;MAC5B,IAAI,CAACC,SAAS,GAAG,IAAI9N,QAAQ,CAAC,IAAI,CAACmJ,SAAS,EAAEvD,OAAO,CAACiI,QAAQ,CAAC;IACnE;EACJ;EAEAT,oBAAoBA,CAAA,EAAG;IACnB,MAAMW,QAAQ,GAAG,IAAI,CAACnI,OAAO,CAACmI,QAAQ;IACtC,MAAMC,SAAS,GAAG,CAACD,QAAQ,IAAI,CAAC,CAAC,EAAEC,SAAS;IAC5C,IAAID,QAAQ,KAAK,KAAK,IAAIC,SAAS,KAAK,KAAK,EAAE;MAC3C,IAAI,CAACC,cAAc,GAAG,IAAIhO,aAAa,CAAC,IAAI,EAAE+N,SAAS,CAAC;IAC5D;EACJ;EAEAX,qBAAqBA,CAAA,EAAG;IACpB,MAAMU,QAAQ,GAAG,IAAI,CAACnI,OAAO,CAACmI,QAAQ;IACtC,MAAMG,UAAU,GAAG,CAACH,QAAQ,IAAI,CAAC,CAAC,EAAEG,UAAU;IAC9C,IAAIH,QAAQ,KAAK,KAAK,IAAIG,UAAU,KAAK,KAAK,EAAE;MAC5C,IAAI,CAACC,eAAe,GAAG,IAAIjO,cAAc,CAAC,IAAI,EAAEgO,UAAU,CAAC;IAC/D;EACJ;EAEAE,qBAAqBA,CAAA,EAAG;IACpB,MAAMP,QAAQ,GAAG,IAAI,CAACjI,OAAO,CAACiI,QAAQ;IACtC,MAAME,QAAQ,GAAG,IAAI,CAACnI,OAAO,CAACmI,QAAQ;IACtC,MAAMC,SAAS,GAAG,CAACD,QAAQ,IAAI,CAAC,CAAC,EAAEC,SAAS;IAC5C,MAAME,UAAU,GAAG,CAACH,QAAQ,IAAI,CAAC,CAAC,EAAEG,UAAU;IAC9C,MAAMG,SAAS,GAAG,CAACR,QAAQ,KAAKE,QAAQ,KAAK,KAAK,IAAIC,SAAS,KAAK,KAAK,CAAC,IAAI,CAAC,IAAI,CAACM,gBAAgB,CAAC,CAAEtL,UAAU,EAAEC,IAAI,EAAEC,QAAQ,CAAE,CAAC;IACpI,MAAMqL,SAAS,GAAG,CAACR,QAAQ,KAAK,KAAK,IAAIG,UAAU,KAAK,KAAK,KAAK,CAAC,IAAI,CAACI,gBAAgB,CAAC,CAAEnL,UAAU,EAAEC,IAAI,EAAEC,QAAQ,CAAE,CAAC;IACxH,MAAM6B,OAAO,GAAG,IAAI,CAACA,OAAO;IAE5B,IAAI,IAAI,CAACsJ,gBAAgB,IAAIH,SAAS,IAAIE,SAAS,EAAE;MACjDrJ,OAAO,CAACwB,KAAK,CAAC+H,WAAW,GAAG,IAAI,CAACC,YAAY,IAAI,EAAE;MACnD,IAAI,CAACF,gBAAgB,GAAG,KAAK;IACjC,CAAC,MAAM,IAAI,CAAC,IAAI,CAACA,gBAAgB,IAAI,EAAEH,SAAS,IAAIE,SAAS,CAAC,EAAE;MAC5DrJ,OAAO,CAACwB,KAAK,CAAC+H,WAAW,GAAG,MAAM;MAElC,IAAI,CAACD,gBAAgB,GAAG,IAAI;IAChC;IAEA,IAAI,CAACG,gBAAgB,CAAC,CAACN,SAAS,EAAE,CAACE,SAAS,CAAC;EACjD;EAEAI,gBAAgBA,CAACC,IAAI,EAAEC,IAAI,EAAE;IACzB,MAAMC,SAAS,GAAG,IAAI,CAACA,SAAS;IAChC,IAAI,CAACA,SAAS,EAAE;MACZ;IACJ;IAEA,IAAIA,SAAS,CAACC,UAAU,EAAE;MACtBD,SAAS,CAACC,UAAU,CAACH,IAAI,CAAC;IAC9B;IAEA,IAAIE,SAAS,CAACE,UAAU,EAAE;MACtBF,SAAS,CAACE,UAAU,CAACH,IAAI,CAAC;IAC9B;EACJ;EAEA3B,cAAcA,CAAA,EAAG;IACb,MAAM;MAAEtH,OAAO,EAAE;QAAEuF,OAAO,EAAE8D;MAAe;IAAE,CAAC,GAAG,IAAI;IACrD,IAAI9D,OAAO;IAEX,IAAI,IAAI,CAACF,cAAc,CAAC,CAAC,EAAE;MACvBE,OAAO,GAAG,IAAI,CAAC+D,oBAAoB,CAACD,cAAc,CAAC;IACvD,CAAC,MAAM;MACH9D,OAAO,GAAG,IAAI5K,OAAO,CAAC,IAAI,CAACkF,YAAY,EAAEwJ,cAAc,CAAC;IAC5D;IAEA,OAAO9D,OAAO;EAClB;EAEA+D,oBAAoBA,CAACtJ,OAAO,EAAE;IAC1B,OAAO,IAAIpF,aAAa,CAAC,IAAI,CAAC2I,SAAS,EAAEvD,OAAO,CAAC;EACrD;EAEA0B,aAAaA,CAAC1B,OAAO,EAAER,YAAY,EAAE;IACjC+J,iBAAiB,CAACvJ,OAAO,EAAER,YAAY,CAAC;IACxCgK,mBAAmB,CAACxJ,OAAO,EAAER,YAAY,CAAC;EAC9C;EAEAoC,iBAAiBA,CAAA,EAAG;IAChB,MAAM5B,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,MAAMmB,MAAM,GAAGnB,OAAO,CAACmB,MAAM;IAC7B,MAAMsI,MAAM,GAAGzJ,OAAO,CAAC2B,YAAY,IAAI,EAAE;IAEzC,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;MACpC,MAAMsI,aAAa,GAAGvI,MAAM,CAACC,CAAC,CAAC;MAC/B,MAAMuI,WAAW,GAAGF,MAAM,CAACrI,CAAC,GAAGqI,MAAM,CAACpI,MAAM,CAAC;MAC7C,MAAMuI,QAAQ,GAAGF,aAAa,CAACG,SAAS;MAExCH,aAAa,CAACI,KAAK,GAAGJ,aAAa,CAACI,KAAK,IAAIH,WAAW;MACxD,IAAIC,QAAQ,EAAE;QACVA,QAAQ,CAACE,KAAK,GAAGF,QAAQ,CAACE,KAAK,IAAIH,WAAW;MAClD;IACJ;EACJ;EAEA9C,SAASA,CAAA,EAAG;IACR,MAAM7G,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,MAAMqD,QAAQ,GAAG,IAAI,CAAC0G,eAAe,CAAC,CAAC;IACvC,MAAMnD,KAAK,GAAG,IAAI7M,WAAW,CAAC,IAAI,CAACiQ,aAAa,CAAC,CAAC,CAAC;IACnDpD,KAAK,CAACqD,KAAK,GAAG,IAAI;IAClBrD,KAAK,CAACrD,SAAS,GAAGF,QAAQ;IAE1B,MAAM6G,KAAK,GAAGlQ,KAAK,CAACmQ,UAAU,CAACnK,OAAO,CAACkK,KAAK,CAAC;IAC7C,MAAME,QAAQ,GAAGpQ,KAAK,CAACmQ,UAAU,CAACnK,OAAO,CAACoK,QAAQ,EAAE;MAChDC,KAAK,EAAErK,OAAO,CAACkK,KAAK,CAACG,KAAK;MAC1BtJ,QAAQ,EAAEf,OAAO,CAACkK,KAAK,CAACnJ;IAC5B,CAAC,CAAC;IACF6F,KAAK,CAAC0D,MAAM,CAACC,KAAK,CAAC3D,KAAK,EAAE5M,KAAK,CAACwQ,WAAW,CAAC,CAACN,KAAK,EAAEE,QAAQ,CAAC,CAAC,CAAC;IAE/D,IAAIpK,OAAO,CAACyK,MAAM,IAAIzK,OAAO,CAACyK,MAAM,CAAC1H,OAAO,EAAE;MAC1C6D,KAAK,CAAC0D,MAAM,CAAC,IAAI/P,MAAM,CAAC8I,QAAQ,CAACrD,OAAO,CAACyK,MAAM,EAAE,IAAI,CAAC5K,YAAY,CAAC,CAAC;IACxE;IACA+G,KAAK,CAAC0D,MAAM,CAACjH,QAAQ,CAAC;IACtBuD,KAAK,CAAC8D,MAAM,CAAC,CAAC;IAEd,OAAO9D,KAAK;EAChB;EAEAoD,aAAaA,CAAA,EAAG;IACZ,MAAMhK,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,MAAMwC,IAAI,GAAG,IAAI,CAACX,OAAO,CAAC,CAAC;IAE3B,OAAO7F,UAAU,CAAC;MACdgL,WAAW,EAAEhH,OAAO,CAACgH,WAAW;MAChCjF,KAAK,EAAES,IAAI,CAACT,KAAK,IAAIrG,aAAa;MAClC0G,MAAM,EAAEI,IAAI,CAACJ,MAAM,IAAIzG;IAC3B,CAAC,EAAEqE,OAAO,CAAC8B,SAAS,CAAC;EACzB;EAEAiI,eAAeA,CAACY,UAAU,EAAE;IACxB,MAAM3K,OAAO,GAAG,IAAI,CAACA,OAAO;IAE5B,MAAMqD,QAAQ,GAAG7I,eAAe,CAACoQ,OAAO,CAACrE,MAAM,CAACoE,UAAU,GAAG,EAAE,GAAG3K,OAAO,CAACmB,MAAM,EAAEnB,OAAO,EAAE,IAAI,CAACH,YAAY,CAAC;IAE7G,OAAOwD,QAAQ;EACnB;EAEAJ,eAAeA,CAAA,EAAG;IACd,MAAM;MAAEM,SAAS,EAAE;QAAEK;MAAK;IAAE,CAAC,GAAG,IAAI;IACpC,MAAMiH,UAAU,GAAG,IAAI,CAAChI,WAAW,GAAG,EAAE;IAExC,KAAK,IAAIzB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwC,IAAI,CAACvC,MAAM,EAAED,CAAC,EAAE,EAAE;MAClC,MAAM0J,IAAI,GAAGlH,IAAI,CAACxC,CAAC,CAAC;MACpB,MAAMpB,OAAO,GAAG8K,IAAI,CAAC9K,OAAO;MAC5B,IAAI8K,IAAI,YAAY7Q,YAAY,IAAI+F,OAAO,CAAC+K,MAAM,IAAI,CAAC/K,OAAO,CAACgL,QAAQ,EAAE;QACrE,MAAMC,KAAK,GAAGH,IAAI,CAACG,KAAK,CAAC,CAAC;QAE1B,MAAM7C,SAAS,GAAG,IAAI3N,SAAS,CAAC,IAAI,EAAEqQ,IAAI,EACtC9O,UAAU,CAAC;UAAEkP,GAAG,EAAED,KAAK,CAACC,GAAG;UAAEC,GAAG,EAAEF,KAAK,CAACE;QAAI,CAAC,EAAEnL,OAAO,CAAC+K,MAAM,CACjE,CAAC;QAEDF,UAAU,CAACvJ,IAAI,CAAC8G,SAAS,CAAC;MAC9B;IACJ;EACJ;EAEAgD,YAAYA,CAACC,CAAC,EAAE;IACZ,OAAO,IAAI,CAAC3K,OAAO,CAAChD,YAAY,EAAE2N,CAAC,CAAC;EACxC;EAEAC,OAAOA,CAACD,CAAC,EAAE;IACP,OAAO,IAAI,CAAC3K,OAAO,CAAC/C,MAAM,EAAE0N,CAAC,CAAC;EAClC;EAEAE,UAAUA,CAACF,CAAC,EAAE;IACV,OAAO,IAAI,CAAC3K,OAAO,CAAC9C,UAAU,EAAEyN,CAAC,CAAC;EACtC;EAEAjL,aAAaA,CAAA,EAAG;IACZ,IAAI,CAACoL,aAAa,GAAG,IAAI,CAACC,MAAM,CAACjF,IAAI,CAAC,IAAI,CAAC;IAC3C,IAAI,CAACkF,kBAAkB,GAAG,IAAI,CAACC,WAAW,CAACnF,IAAI,CAAC,IAAI,CAAC;IACrD,IAAI,CAACoF,kBAAkB,GAAG,IAAI,CAACC,WAAW,CAACrF,IAAI,CAAC,IAAI,CAAC;IACrD,IAAI,CAACC,yBAAyB,GAAG,IAAI,CAACqF,UAAU,CAACtF,IAAI,CAAC,IAAI,CAAC;IAC3D,IAAI,CAACE,yBAAyB,GAAG,IAAI,CAACqF,SAAS,CAACvF,IAAI,CAAC,IAAI,CAAC;IAE1D,IAAI,CAACwF,UAAU,GAAGnS,QAAQ,CACtB,IAAI,CAACmS,UAAU,CAACxF,IAAI,CAAC,IAAI,CAAC,EAC1BrH,eACJ,CAAC;EACL;EAEAQ,WAAWA,CAACC,QAAQ,EAAE;IAClB,IAAIA,QAAQ,EAAE;MACV,IAAI,CAACF,SAAS,CAAC4B,IAAI,CAAC1B,QAAQ,CAAC;IACjC;EACJ;EAEAqM,cAAcA,CAACrM,QAAQ,EAAE;IACrB,MAAMsM,KAAK,GAAG,IAAI,CAACxM,SAAS,CAACyM,OAAO,CAACvM,QAAQ,CAAC;IAC9C,IAAIsM,KAAK,IAAI,CAAC,EAAE;MACZ,IAAI,CAACxM,SAAS,CAAC0M,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;IACnC;EACJ;EAEAxD,gBAAgBA,CAAC2D,UAAU,EAAE;IACzB,MAAM3M,SAAS,GAAG,IAAI,CAACA,SAAS;IAChC,KAAK,IAAIqE,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGrE,SAAS,CAAC2B,MAAM,EAAE0C,GAAG,EAAE,EAAE;MAC7C,IAAIrE,SAAS,CAACqE,GAAG,CAAC,CAAC2E,gBAAgB,CAAC2D,UAAU,CAAC,EAAE;QAC7C,OAAO,IAAI;MACf;IACJ;EACJ;EAEA3L,OAAOA,CAACiD,IAAI,EAAE2I,IAAI,GAAG,CAAC,CAAC,EAAE;IACrBA,IAAI,CAACC,MAAM,GAAG,IAAI;IAElB,IAAI5I,IAAI,KAAKlF,YAAY,EAAE;MACvB6N,IAAI,CAACE,MAAM,CAAChH,KAAK,GAAG,IAAI,CAACiH,sBAAsB,CAACH,IAAI,CAACE,MAAM,CAAChH,KAAK,CAAC;IACtE,CAAC,MAAM,IAAI7B,IAAI,KAAKhF,WAAW,EAAE;MAC7B,IAAI,CAAC+N,qBAAqB,CAACJ,IAAI,CAAC9G,KAAK,CAAC;IAC1C,CAAC,MAAM,IAAI7B,IAAI,KAAK/E,YAAY,EAAE;MAC9B,IAAI,CAAC+N,oBAAoB,CAAC,CAAC;IAC/B,CAAC,MAAM,IAAIhJ,IAAI,KAAK9E,YAAY,EAAE;MAC9B,IAAI,CAAC+N,eAAe,CAACN,IAAI,CAAC9G,KAAK,CAAC;IACpC;IAEA,MAAM9F,SAAS,GAAG,IAAI,CAACA,SAAS;IAChC,IAAImN,kBAAkB,GAAG,KAAK;IAC9B,KAAK,IAAI9I,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGrE,SAAS,CAAC2B,MAAM,EAAE0C,GAAG,EAAE,EAAE;MAC7C,IAAIrE,SAAS,CAACqE,GAAG,CAAC,CAACrD,OAAO,CAACiD,IAAI,EAAE2I,IAAI,CAAC,EAAE;QACpCO,kBAAkB,GAAG,IAAI;MAC7B;IACJ;IAEA,OAAOA,kBAAkB;EAC7B;EAEAjM,aAAaA,CAAA,EAAG;IACZ,MAAMtB,OAAO,GAAG,IAAI,CAACA,OAAO;IAE5B,IAAI,CAACwJ,YAAY,GAAGxJ,OAAO,CAACwB,KAAK,CAAC+H,WAAW;IAE7CnM,UAAU,CAAC4C,OAAO,EAAE;MAChB,CAAEL,WAAW,GAAI,IAAI,CAACuM,aAAa;MACnC,CAAElN,UAAU,GAAI,IAAI,CAACoN,kBAAkB;MACvC,CAAExM,UAAU,GAAI,IAAI,CAAC0M;IACzB,CAAC,CAAC;IAEF,IAAI,IAAI,CAACkB,sBAAsB,CAAC,CAAC,EAAE;MAC/BpQ,UAAU,CAAC4C,OAAO,EAAE;QAAE,CAAEN,SAAS,GAAI,IAAI,CAACgN;MAAW,CAAC,CAAC;IAC3D;IAEA,IAAI,CAAC9C,SAAS,GAAGlO,gBAAgB,CAACuL,MAAM,CAAC,IAAI,CAACjH,OAAO,EAAE;MACnDyN,KAAK,EAAE,IAAI,CAACC,MAAM,CAACxG,IAAI,CAAC,IAAI,CAAC;MAC7ByG,IAAI,EAAE,IAAI,CAACC,KAAK,CAAC1G,IAAI,CAAC,IAAI,CAAC;MAC3B2G,GAAG,EAAE,IAAI,CAACC,IAAI,CAAC5G,IAAI,CAAC,IAAI,CAAC;MACzB6G,GAAG,EAAE,IAAI,CAACC,IAAI,CAAC9G,IAAI,CAAC,IAAI,CAAC;MACzB+G,YAAY,EAAE,IAAI,CAACC,aAAa,CAAChH,IAAI,CAAC,IAAI,CAAC;MAC3CiH,aAAa,EAAE,IAAI,CAACC,cAAc,CAAClH,IAAI,CAAC,IAAI,CAAC;MAC7CmH,UAAU,EAAE,IAAI,CAACC,WAAW,CAACpH,IAAI,CAAC,IAAI;IAC1C,CAAC,CAAC;IAEF,IAAI,CAACgC,qBAAqB,CAAC,CAAC;EAChC;EAEAqD,WAAWA,CAACR,CAAC,EAAE;IACX,IAAI,IAAI,CAACwC,aAAa,EAAE;MACpB,IAAI,CAACA,aAAa,CAACC,GAAG,CAAC,IAAI,EAAEzC,CAAC,CAAC;MAC/B,IAAI,CAACwC,aAAa,GAAG,IAAI;IAC7B;IAEA,IAAI,IAAI,CAACE,gBAAgB,EAAE;MACvB,IAAI,CAACA,gBAAgB,GAAG,KAAK;MAC7B,IAAI,CAACrN,OAAO,CAAC5C,eAAe,CAAC;IACjC;IAEA,IAAI,IAAI,CAACkQ,mBAAmB,CAAC,CAAC,IAAI,IAAI,CAACC,oBAAoB,EAAE;MACzD,IAAI,CAACC,mBAAmB,CAAC,IAAI,CAACD,oBAAoB,CAACE,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC;MACxE,IAAI,CAACC,oBAAoB,CAAC,IAAI,EAAE,IAAI,CAAC;IACzC;EACJ;EAEAxG,gBAAgBA,CAAA,EAAG;IACf,IAAI,IAAI,CAACsB,SAAS,IAAI,IAAI,CAACA,SAAS,CAACmF,MAAM,EAAE;MACzC,IAAI,CAACnF,SAAS,CAACmF,MAAM,CAAC,CAAC;IAC3B;EACJ;EAEAb,aAAaA,CAACnC,CAAC,EAAE;IACb,IAAI,IAAI,CAAC9C,eAAe,IAAI,CAAC,IAAI,CAAC+F,kBAAkB,CAACjD,CAAC,CAAC,EAAE;MACrD,IAAI,CAACkD,gBAAgB,GAAGlD,CAAC,CAACmD,QAAQ;MAClC,IAAI,CAACC,iBAAiB,CAAC,CAAC;MACxB,IAAI,CAACxI,OAAO,CAACyI,eAAe,CAAC,CAAC;IAClC;EACJ;EAEAd,WAAWA,CAACvC,CAAC,EAAE;IACX,IAAI,IAAI,CAACsD,QAAQ,IAAI,CAAC,IAAI,CAACL,kBAAkB,CAACjD,CAAC,CAAC,EAAE;MAC9C,IAAI,IAAI,CAACpF,OAAO,EAAE;QACd,IAAI,CAACA,OAAO,CAAC2I,cAAc,CAAC,CAAC;MACjC;MACA,IAAI,CAACD,QAAQ,GAAG,KAAK;MACrB,IAAI,CAACjO,OAAO,CAACjD,QAAQ,EAAE,CAAC,CAAC,CAAC;IAC9B;EACJ;EAEAiQ,cAAcA,CAACrC,CAAC,EAAE;IACd,MAAMwD,cAAc,GAAG,IAAI,CAACtG,eAAe;IAE3C,IAAIsG,cAAc,IAAI,CAAC,IAAI,CAACP,kBAAkB,CAACjD,CAAC,CAAC,EAAE;MAC/CA,CAAC,CAACyD,cAAc,CAAC,CAAC;MAClB,MAAMC,uBAAuB,GAAG,IAAI,CAACR,gBAAgB;MACrD,IAAIS,UAAU,GAAG,CAAC3D,CAAC,CAACmD,QAAQ,GAAGO,uBAAuB,GAAG,CAAC;MAE1D,IAAI9M,IAAI,CAACgN,GAAG,CAACD,UAAU,CAAC,IAAI,GAAG,EAAE;QAC7BA,UAAU,GAAG/M,IAAI,CAACjF,KAAK,CAACgS,UAAU,GAAG,EAAE,CAAC;QAExC,IAAI,CAACT,gBAAgB,GAAGlD,CAAC,CAACmD,QAAQ;QAClC,MAAMlC,IAAI,GAAG;UAAE4C,KAAK,EAAEF,UAAU;UAAEG,UAAU,EAAEA,UAAU,CAAC,IAAI,CAAC5L,SAAS,CAACK,IAAI,CAAC;UAAEwL,aAAa,EAAE/D;QAAE,CAAC;QACjG,IAAI,IAAI,CAACsD,QAAQ,IAAI,CAAC,IAAI,CAACjO,OAAO,CAACnD,UAAU,EAAE+O,IAAI,CAAC,EAAE;UAClD,MAAM+C,MAAM,GAAG,IAAI,CAACC,iBAAiB,CAACjE,CAAC,CAAC;UAExC,IAAI,CAAC,IAAI,CAACsD,QAAQ,EAAE;YAChB,IAAI,CAACA,QAAQ,GAAG,IAAI;UACxB;UAEA,MAAMY,MAAM,GAAGjD,IAAI,CAAC6C,UAAU,GAAGN,cAAc,CAACW,YAAY,CAACR,UAAU,EAAEK,MAAM,CAAC;UAChF,IAAIE,MAAM,IAAI,CAAC,IAAI,CAAC7O,OAAO,CAAClD,IAAI,EAAE8O,IAAI,CAAC,EAAE;YACrCuC,cAAc,CAAC5F,IAAI,CAAC,CAAC;UACzB;QACJ;MACJ;IACJ;EACJ;EAEA8C,SAASA,CAACV,CAAC,EAAE;IACT,IAAIA,CAAC,CAAC/L,OAAO,EAAE;MACX,MAAMA,OAAO,GAAG,IAAI,CAACmQ,oBAAoB,CAACpE,CAAC,CAAC/L,OAAO,EAAE+L,CAAC,CAAC;MAEvD,IAAI/L,OAAO,IAAIA,OAAO,CAACoQ,KAAK,EAAE;QAC1BpQ,OAAO,CAACoQ,KAAK,CAAC,IAAI,EAAErE,CAAC,CAAC+D,aAAa,CAAC;MACxC;IACJ;EACJ;EAEApC,MAAMA,CAAC3B,CAAC,EAAE;IACN,MAAMgE,MAAM,GAAG,IAAI,CAACC,iBAAiB,CAACjE,CAAC,CAAC;IAExC,IAAI,IAAI,CAACiD,kBAAkB,CAACjD,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC9H,SAAS,CAACoM,uBAAuB,CAACN,MAAM,CAAC,EAAE;MAC/E;IACJ;IAGA,IAAI,IAAI,CAAC3G,gBAAgB,CAAC,CAAEtL,UAAU,EAAEC,IAAI,EAAEC,QAAQ,CAAE,CAAC,EAAE;MACvD,IAAI,CAACsS,gBAAgB,CAACvE,CAAC,EAAEgE,MAAM,EAAEjS,UAAU,CAAC;IAChD;IAEA,IAAI,IAAI,CAAC8K,SAAS,IAAI,IAAI,CAACA,SAAS,CAAC6E,KAAK,CAAC1B,CAAC,CAAC,EAAE;MAC3C,IAAI,CAACpF,OAAO,CAACyI,eAAe,CAAC,CAAC;MAC9B,IAAI,CAACD,iBAAiB,CAAC,CAAC;MACxB,IAAI,CAACoB,cAAc,GAAG,IAAI;MAC1B,IAAI,CAAChQ,YAAY,CAACiQ,OAAO,GAAG,IAAI;IACpC;IAEA,IAAI,IAAI,CAACzH,cAAc,EAAE;MACrB,IAAI,IAAI,CAACA,cAAc,CAAC0E,KAAK,CAAC1B,CAAC,CAAC,EAAE;QAC9B,IAAI,CAAC3K,OAAO,CAACnD,UAAU,EAAE;UAAE4R,UAAU,EAAEA,UAAU,CAAC,IAAI,CAAC5L,SAAS,CAACK,IAAI,CAAC;UAAEwL,aAAa,EAAE/D;QAAE,CAAC,CAAC;MAC/F;IACJ;EACJ;EAEA6B,KAAKA,CAAC7B,CAAC,EAAE;IACL,IAAI;MAAE1D,SAAS,EAAEoI,KAAK;MAAE7H,SAAS,EAAED;IAAS,CAAC,GAAG,IAAI;IAEpD,IAAI,IAAI,CAACqG,kBAAkB,CAACjD,CAAC,CAAC,EAAE;MAC5B;IACJ;IAEA,IAAIpD,QAAQ,EAAE;MACV,MAAMsH,MAAM,GAAGtH,QAAQ,CAACgF,IAAI,CAAC5B,CAAC,CAAC;MAE/B,IAAIkE,MAAM,IAAI,CAAC,IAAI,CAAC7O,OAAO,CAACrD,IAAI,EAAE;QAAE8R,UAAU,EAAEI,MAAM;QAAEH,aAAa,EAAE/D;MAAE,CAAC,CAAC,EAAE;QACzEpD,QAAQ,CAAC+H,GAAG,CAAC,CAAC;MAClB;IACJ,CAAC,MAAM,IAAID,KAAK,EAAE;MACd,MAAMR,MAAM,GAAG,CAAC,CAAC;MACjB,MAAM3L,IAAI,GAAGmM,KAAK,CAACnM,IAAI;MAEvB,KAAK,IAAIxC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwC,IAAI,CAACvC,MAAM,EAAED,CAAC,EAAE,EAAE;QAClC,MAAM6O,WAAW,GAAGrM,IAAI,CAACxC,CAAC,CAAC;QAC3B,MAAM8O,QAAQ,GAAGD,WAAW,CAACjQ,OAAO,CAAC2D,IAAI;QACzC,IAAIuM,QAAQ,EAAE;UACV,MAAMpF,IAAI,GAAGmF,WAAW,CAACjQ,OAAO,CAACgL,QAAQ,GAAGK,CAAC,CAAC8E,CAAC,GAAG9E,CAAC,CAAC+E,CAAC;UACrD,MAAMlB,KAAK,GAAGpE,IAAI,CAACuF,aAAa,GAAGvF,IAAI,CAACwF,QAAQ;UAEhD,IAAIpB,KAAK,KAAK,CAAC,EAAE;YACbK,MAAM,CAACU,WAAW,CAACjQ,OAAO,CAAC2D,IAAI,CAAC,GAAGsM,WAAW,CAACM,cAAc,CAACrB,KAAK,CAAC;UACxE;QACJ;MACJ;MAEAa,KAAK,CAACZ,UAAU,GAAGI,MAAM;MACzB,IAAI,CAAC7O,OAAO,CAACrD,IAAI,EAAE;QACf8R,UAAU,EAAEI,MAAM;QAClBH,aAAa,EAAE/D;MACnB,CAAC,CAAC;IACN;IAEA,IAAI,IAAI,CAAChD,cAAc,EAAE;MACrB,IAAI,CAACA,cAAc,CAAC4E,IAAI,CAAC5B,CAAC,CAAC;IAC/B;EACJ;EAEA+B,IAAIA,CAAC/B,CAAC,EAAE;IACJ,IAAI,IAAI,CAACiD,kBAAkB,CAACjD,CAAC,CAAC,EAAE;MAC5B;IACJ;IAEA,MAAMpD,QAAQ,GAAG,IAAI,CAACC,SAAS;IAC/B,IAAID,QAAQ,IAAIA,QAAQ,CAACkF,GAAG,CAAC9B,CAAC,CAAC,EAAE;MAC7B,IAAI,CAACpF,OAAO,CAAC2I,cAAc,CAAC,CAAC;MAC7B,IAAI,CAAClO,OAAO,CAACpD,QAAQ,EAAE;QACnB6R,UAAU,EAAEA,UAAU,CAAC,IAAI,CAAC5L,SAAS,CAACK,IAAI,CAAC;QAC3CwL,aAAa,EAAE/D;MACnB,CAAC,CAAC;MACF,IAAI,CAACwE,cAAc,GAAG,KAAK;MAC3B,IAAI,CAAChQ,YAAY,CAACiQ,OAAO,GAAG,KAAK;IACrC,CAAC,MAAM;MACH,IAAI,CAACU,cAAc,CAACnF,CAAC,EAAE/N,QAAQ,CAAC;IACpC;IAEA,IAAI,IAAI,CAAC+K,cAAc,EAAE;MACrB,MAAMkH,MAAM,GAAG,IAAI,CAAClH,cAAc,CAAC8E,GAAG,CAAC9B,CAAC,CAAC;MACzC,IAAIkE,MAAM,IAAI,CAAC,IAAI,CAAC7O,OAAO,CAAClD,IAAI,EAAE;QAAE2R,UAAU,EAAEI,MAAM;QAAEH,aAAa,EAAE/D;MAAE,CAAC,CAAC,EAAE;QACzE,IAAI,CAAChD,cAAc,CAACY,IAAI,CAAC,CAAC;QAC1B,IAAI,CAACvI,OAAO,CAACjD,QAAQ,EAAE;UAAE0R,UAAU,EAAEI,MAAM;UAAEH,aAAa,EAAE/D;QAAE,CAAC,CAAC;MACpE;IACJ;EACJ;EAEAiD,kBAAkBA,CAACjD,CAAC,EAAE;IAClB,MAAMR,UAAU,GAAG,IAAI,CAAChI,WAAW,IAAI,EAAE;IACzC,IAAI,CAACgI,UAAU,CAACxJ,MAAM,EAAE;MACpB,OAAO,KAAK;IAChB;IAEA,MAAMgO,MAAM,GAAG,IAAI,CAACC,iBAAiB,CAACjE,CAAC,CAAC;IACxC,MAAM7H,IAAI,GAAG,IAAI,CAACD,SAAS,CAACkN,WAAW,CAACpB,MAAM,CAAC;IAC/C,IAAI7L,IAAI,EAAE;MACN,KAAK,IAAIO,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG8G,UAAU,CAACxJ,MAAM,EAAE0C,GAAG,EAAE,EAAE;QAC9C,IAAI8G,UAAU,CAAC9G,GAAG,CAAC,CAAC2M,MAAM,CAAClN,IAAI,CAAC,EAAE;UAC9B,OAAO,IAAI;QACf;MACJ;IACJ;EACJ;EAEAmN,mBAAmBA,CAAA,EAAG;IAClB,MAAMxI,QAAQ,GAAG,IAAI,CAACnI,OAAO,CAACmI,QAAQ;IACtC,MAAMG,UAAU,GAAG,CAACH,QAAQ,IAAI,CAAC,CAAC,EAAEG,UAAU,IAAI,CAAC,CAAC;IACpD,OAAOpL,cAAc,CAACoL,UAAU,CAACsI,IAAI,EAAEpS,oBAAoB,CAAC;EAChE;EAEAmN,WAAWA,CAACN,CAAC,EAAE;IACX,MAAM6D,KAAK,GAAGtS,eAAe,CAACyO,CAAC,CAAC;IAChC,MAAMwD,cAAc,GAAG,IAAI,CAACtG,eAAe;IAC3C,MAAM8G,MAAM,GAAG,IAAI,CAACC,iBAAiB,CAACjE,CAAC,CAAC;IAExC,IAAI,IAAI,CAACiD,kBAAkB,CAACjD,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC9H,SAAS,CAACoM,uBAAuB,CAACN,MAAM,CAAC,EAAE;MAC/E;IACJ;IAEA,IAAIR,cAAc,EAAE;MAChB,MAAMvC,IAAI,GAAG;QAAE4C,KAAK,EAAEA,KAAK;QAAEC,UAAU,EAAEA,UAAU,CAAC,IAAI,CAAC5L,SAAS,CAACK,IAAI,CAAC;QAAEwL,aAAa,EAAE/D;MAAE,CAAC;MAC5F,IAAI,IAAI,CAACsD,QAAQ,IAAI,CAAC,IAAI,CAACjO,OAAO,CAACnD,UAAU,EAAE+O,IAAI,CAAC,EAAE;QAClDjB,CAAC,CAACyD,cAAc,CAAC,CAAC;QAElB,IAAI,CAAC,IAAI,CAACH,QAAQ,EAAE;UAChB,IAAI,CAACF,iBAAiB,CAAC,CAAC;UACxB,IAAI,CAACxI,OAAO,CAACyI,eAAe,CAAC,CAAC;UAC9B,IAAI,CAACC,QAAQ,GAAG,IAAI;QACxB;QAEA,IAAI,IAAI,CAACkC,UAAU,EAAE;UACjBC,YAAY,CAAC,IAAI,CAACD,UAAU,CAAC;QACjC;QAEAvE,IAAI,CAAC6C,UAAU,GAAGN,cAAc,CAACW,YAAY,CAACN,KAAK,EAAEG,MAAM,CAAC;QAC5D,IAAI/C,IAAI,CAAC6C,UAAU,IAAI,CAAC,IAAI,CAACzO,OAAO,CAAClD,IAAI,EAAE8O,IAAI,CAAC,EAAE;UAC9CuC,cAAc,CAAC5F,IAAI,CAAC,CAAC;QACzB;QAEA,IAAI,CAAC4H,UAAU,GAAGE,UAAU,CAAC,MAAM;UAC/B,IAAI,CAACrQ,OAAO,CAACjD,QAAQ,EAAE6O,IAAI,CAAC;UAC5B,IAAI,CAACqC,QAAQ,GAAG,KAAK;UACrB,IAAI,IAAI,CAAC1I,OAAO,EAAE;YACd,IAAI,CAACA,OAAO,CAAC2I,cAAc,CAAC,CAAC;UACjC;QACJ,CAAC,EAAErQ,gBAAgB,CAAC;MACxB;IACJ,CAAC,MAAM;MACH,IAAIwR,KAAK,GAAG,IAAI,CAACpI,SAAS;MAC1B,IAAI,CAACoI,KAAK,EAAE;QACR,MAAMiB,SAAS,GAAG,IAAI,CAACpB,gBAAgB,CAACvE,CAAC,EAAEgE,MAAM,EAAE9R,UAAU,CAAC;QAC9D,IAAI,CAACyT,SAAS,EAAE;UACZjB,KAAK,GAAG,IAAI,CAACpI,SAAS;QAC1B;MACJ;MAEA,IAAIoI,KAAK,EAAE;QACP,MAAMkB,UAAU,GAAGlB,KAAK,CAACkB,UAAU,IAAI/B,KAAK;QAC5Ca,KAAK,CAACkB,UAAU,GAAGA,UAAU,GAAG/B,KAAK;QAErC,MAAMtL,IAAI,GAAG,IAAI,CAAC+D,SAAS,CAAC/D,IAAI;QAChC,MAAM2L,MAAM,GAAG,CAAC,CAAC;QAEjB,KAAK,IAAInO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwC,IAAI,CAACvC,MAAM,EAAED,CAAC,EAAE,EAAE;UAClC,MAAM6O,WAAW,GAAGrM,IAAI,CAACxC,CAAC,CAAC;UAC3B,MAAM8O,QAAQ,GAAGD,WAAW,CAACjQ,OAAO,CAAC2D,IAAI;UACzC,IAAIuM,QAAQ,EAAE;YACVX,MAAM,CAACW,QAAQ,CAAC,GAAGD,WAAW,CAACiB,UAAU,CAAC,CAACD,UAAU,GAAG,IAAI,CAACN,mBAAmB,CAAC,CAAC,EAAEtB,MAAM,CAAC;UAC/F;QACJ;QAEA,IAAI,CAAC3O,OAAO,CAAClD,IAAI,EAAE;UACf0R,KAAK,EAAEA,KAAK;UACZC,UAAU,EAAEI,MAAM;UAClBH,aAAa,EAAE/D;QACnB,CAAC,CAAC;QAEF,IAAI,IAAI,CAACwF,UAAU,EAAE;UACjBC,YAAY,CAAC,IAAI,CAACD,UAAU,CAAC;QACjC;QAEA,IAAI,CAACA,UAAU,GAAGE,UAAU,CAAC,MAAM;UAC/B,IAAI,CAACP,cAAc,CAACnF,CAAC,EAAE5N,QAAQ,CAAC;QACpC,CAAC,EAAEc,gBAAgB,CAAC;MACxB;IACJ;EACJ;EAEAqR,gBAAgBA,CAACvE,CAAC,EAAEgE,MAAM,EAAE8B,UAAU,EAAE;IACpC,MAAM9N,QAAQ,GAAG,IAAI,CAACC,MAAM,CAACC,SAAS;IACtC,MAAMC,IAAI,GAAGH,QAAQ,CAAC+N,aAAa,CAAC/B,MAAM,CAAC;IAC3C,MAAMzL,IAAI,GAAGP,QAAQ,CAACO,IAAI,CAACyN,KAAK,CAAC,CAAC,CAAC;IAEnC,IAAI,CAAC7N,IAAI,EAAE;MACP;IACJ;IAEA,MAAM+L,MAAM,GAAGJ,UAAU,CAACvL,IAAI,CAAC;IAE/B,MAAMoN,SAAS,GAAG,IAAI,CAACtQ,OAAO,CAACyQ,UAAU,EAAE;MACvChC,UAAU,EAAEI,MAAM;MAClBH,aAAa,EAAE/D;IACnB,CAAC,CAAC;IAEF,IAAI2F,SAAS,EAAE;MACX,IAAI,CAACpJ,gBAAgB,CAAC,CAAC;IAC3B,CAAC,MAAM;MACH,IAAI,CAACiI,cAAc,GAAG,IAAI;MAC1B,IAAI,CAACpB,iBAAiB,CAAC,CAAC;MACxB,IAAI,CAAC9G,SAAS,GAAG;QACbwH,UAAU,EAAEI,MAAM;QAClB/L,IAAI,EAAEA,IAAI;QACVI,IAAI,EAAEA;MACV,CAAC;IACL;EACJ;EAEA4M,cAAcA,CAACnF,CAAC,EAAE8F,UAAU,EAAE;IAC1B,IAAI,IAAI,CAACxJ,SAAS,EAAE;MAChB,IAAI,CAACjH,OAAO,CAACyQ,UAAU,EAAE;QACrBhC,UAAU,EAAE,IAAI,CAACxH,SAAS,CAACwH,UAAU;QACrCC,aAAa,EAAE/D;MACnB,CAAC,CAAC;MACF,IAAI,CAACwE,cAAc,GAAG,KAAK;MAC3B,IAAI,CAAClI,SAAS,GAAG,IAAI;IACzB;EACJ;EAEA2J,gBAAgBA,CAACjG,CAAC,EAAEkG,KAAK,EAAE;IACvB,MAAMjS,OAAO,GAAG,IAAI,CAAC2G,OAAO,CAACuL,WAAW,CAACnG,CAAC,CAAC;IAC3C,IAAI/L,OAAO,EAAE;MACT,OAAO,IAAI,CAACmQ,oBAAoB,CAACnQ,OAAO,EAAE+L,CAAC,EAAEkG,KAAK,CAAC;IACvD;EACJ;EAEA9B,oBAAoBA,CAACnQ,OAAO,EAAE+L,CAAC,EAAEkG,KAAK,EAAE;IACpC,IAAI3G,OAAO,GAAGtL,OAAO;IACrB,IAAImS,YAAY;IAChB,OAAO7G,OAAO,IAAI,CAAC6G,YAAY,EAAE;MAC7BA,YAAY,GAAG7G,OAAO,CAAC6G,YAAY;MACnC7G,OAAO,GAAGA,OAAO,CAAC8G,MAAM;IAC5B;IAEA,IAAID,YAAY,EAAE;MACd,IAAIA,YAAY,CAACE,QAAQ,EAAE;QACvBF,YAAY,GAAGA,YAAY,CAACE,QAAQ,CAACtG,CAAC,EAAE,IAAI,CAACiE,iBAAiB,CAACjE,CAAC,CAAC,CAAC;MACtE;MAEA,IAAIkG,KAAK,EAAE;QACPE,YAAY,GAAGA,YAAY,CAACG,OAAO,CAACL,KAAK,CAAC;QAC1C,IAAIE,YAAY,IAAIA,YAAY,CAACE,QAAQ,EAAE;UACvCF,YAAY,GAAGA,YAAY,CAACE,QAAQ,CAAC,CAAC;QAC1C;MACJ;MAEA,OAAOF,YAAY;IACvB;EACJ;EAEAnC,iBAAiBA,CAACjE,CAAC,EAAE;IACjB,MAAMwG,WAAW,GAAGpV,gBAAgB,CAAC4O,CAAC,CAAC;IACvC,OAAO,IAAI,CAACyG,mBAAmB,CAACD,WAAW,CAACzB,CAAC,EAAEyB,WAAW,CAAC1B,CAAC,CAAC;EACjE;EAEA4B,eAAeA,CAAA,EAAG;IACd,IAAI,CAAC,IAAI,CAACC,QAAQ,EAAE;MAChB,MAAM;QAAEC,WAAW;QAAEC;MAAW,CAAC,GAAG1V,aAAa,CAAC,IAAI,CAAC8C,OAAO,EAAE,CAAE,aAAa,EAAE,YAAY,CAAE,CAAC;MAChG,IAAI,CAAC0S,QAAQ,GAAG;QACZG,GAAG,EAAED,UAAU;QACfE,IAAI,EAAEH;MACV,CAAC;IACL;IAEA,OAAO,IAAI,CAACD,QAAQ;EACxB;EAEAvF,sBAAsBA,CAACjH,KAAK,EAAE;IAC1B,MAAM6M,OAAO,GAAG,IAAI,CAACN,eAAe,CAAC,CAAC;IACtC,MAAMO,MAAM,GAAGhW,aAAa,CAAC,IAAI,CAACgD,OAAO,CAAC;IAE1C,OAAO;MACH8S,IAAI,EAAEpV,KAAK,CAACwI,KAAK,CAAC4K,CAAC,GAAGiC,OAAO,CAACD,IAAI,GAAGE,MAAM,CAACF,IAAI,CAAC;MACjDD,GAAG,EAAEnV,KAAK,CAACwI,KAAK,CAAC2K,CAAC,GAAGkC,OAAO,CAACF,GAAG,GAAGG,MAAM,CAACH,GAAG;IACjD,CAAC;EACL;;EAEA;EACA;EACAL,mBAAmBA,CAACS,OAAO,EAAEC,OAAO,EAAE;IAClC,MAAMlT,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,MAAMgT,MAAM,GAAGhW,aAAa,CAACgD,OAAO,CAAC;IACrC,MAAM+S,OAAO,GAAG,IAAI,CAACN,eAAe,CAAC,CAAC;IACtC,MAAMU,gBAAgB,GAAGlW,YAAY,CAAC+C,OAAO,CAAC,CAACoT,MAAM,CAAC,CAAC;IACvD,MAAMlN,KAAK,GAAG,IAAI1L,QAAQ,CAACI,KAAK,CAC5BqY,OAAO,GAAGD,MAAM,CAACF,IAAI,GAAGC,OAAO,CAACD,IAAI,EACpCI,OAAO,GAAGF,MAAM,CAACH,GAAG,GAAGE,OAAO,CAACF,GACnC,CAAC,CAACQ,SAAS,CAACF,gBAAgB,CAAC;IAE7B,OAAO,IAAIvY,KAAK,CAACsL,KAAK,CAAC4K,CAAC,EAAE5K,KAAK,CAAC2K,CAAC,CAAC;EACtC;EAEA7C,IAAIA,CAACjC,CAAC,EAAE;IACJ,MAAMuH,cAAc,GAAG,IAAI,CAAC3M,OAAO,CAACuL,WAAW,CAACnG,CAAC,CAAC;IAClD,MAAM/L,OAAO,GAAG,IAAI,CAACmQ,oBAAoB,CAACmD,cAAc,EAAEvH,CAAC,CAAC;IAC5D,MAAMwH,aAAa,GAAG,IAAI,CAACxN,cAAc,CAAC,CAAC;IAE3C,IAAI,CAAC,IAAI,CAACyN,WAAW,CAACF,cAAc,EAAEvH,CAAC,CAAC,IAAI,CAACwH,aAAa,EAAE;MACxD,IAAI,CAACpE,iBAAiB,CAAC,CAAC;IAC5B;IAEA,IAAIoE,aAAa,EAAE;MACf,IAAI,CAACE,mBAAmB,CAAC,IAAI,CAACzD,iBAAiB,CAACjE,CAAC,CAAC,EAAEA,CAAC,EAAE,IAAI,CAAC;IAChE;IAEA,IAAI,CAAC2H,eAAe,CAAC1T,OAAO,EAAE+L,CAAC,CAAC;;IAEhC;IACA,IAAI,CAAC4H,WAAW,GAAG,IAAI;IACvBlC,UAAU,CAAC,MAAM;MACb,IAAI,CAACkC,WAAW,GAAG,KAAK;IAC5B,CAAC,EAAE,CAAC,CAAC;EACT;EAEAxH,MAAMA,CAACJ,CAAC,EAAE;IACN,MAAM/L,OAAO,GAAG,IAAI,CAACgS,gBAAgB,CAACjG,CAAC,CAAC;IACxC,IAAI,CAAC2H,eAAe,CAAC1T,OAAO,EAAE+L,CAAC,CAAC;EACpC;EAEA2H,eAAeA,CAAC1T,OAAO,EAAE+L,CAAC,EAAE;IACxB,IAAIT,OAAO,GAAGtL,OAAO;IACrB,OAAOsL,OAAO,EAAE;MACZ,IAAIA,OAAO,CAACsI,KAAK,EAAE;QACftI,OAAO,CAACsI,KAAK,CAAC,IAAI,EAAE7H,CAAC,CAAC;MAC1B;MAEAT,OAAO,GAAGA,OAAO,CAAC8G,MAAM;IAC5B;EACJ;EAEAoB,WAAWA,CAACxT,OAAO,EAAE+L,CAAC,EAAE;IACpB,IAAI,IAAI,CAACwE,cAAc,EAAE;MACrB,OAAO,KAAK;IAChB;IAEA,IAAIrK,KAAK,GAAG,IAAI,CAACiK,oBAAoB,CAACnQ,OAAO,EAAE+L,CAAC,EAAE,UAAS/L,OAAO,EAAE;MAChE,OAAO,CAACA,OAAO,CAAC6T,KAAK,IAAI7T,OAAO,CAAC8T,IAAI,KAAK,EAAE9T,OAAO,YAAYxE,YAAY,CAAC;IAChF,CAAC,CAAC;IAEF,IAAI,CAACuY,oBAAoB,CAAC7N,KAAK,EAAE6F,CAAC,CAAC;IAEnC,OAAO7F,KAAK;EAChB;EAEA8N,eAAeA,CAAC9N,KAAK,EAAE;IACnB,MAAM6D,cAAc,GAAGrN,UAAU,CAAC,CAAC,CAAC,EAAE,IAAI,CAACgE,OAAO,CAACuF,OAAO,EAAEC,KAAK,CAACxF,OAAO,CAACuF,OAAO,CAAC;IAClF,IAAI8D,cAAc,CAACtG,OAAO,EAAE;MACxB,IAAI,CAACuC,QAAQ,CAACpB,IAAI,CAACsB,KAAK,CAAC;IAC7B;EACJ;EAEA+N,uBAAuBA,CAACC,WAAW,EAAEC,cAAc,EAAEC,eAAe,EAAE;IAClE,MAAMC,aAAa,GAAG,IAAI,CAAC1F,oBAAoB,GAAG,IAAI,CAAC2F,uBAAuB,CAACJ,WAAW,CAAC;IAC3F,IAAI,CAACG,aAAa,EAAE;MAChB;IACJ;IAEA,IAAIF,cAAc,EAAE;MAChB,IAAI,CAACrF,oBAAoB,CAACoF,WAAW,CAAC;MACtC,IAAI,CAACtF,mBAAmB,CAACyF,aAAa,CAACxF,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC;MAC5D,IAAI,CAACD,mBAAmB,CAACyF,aAAa,CAACxF,QAAQ,EAAEqF,WAAW,CAACrS,MAAM,CAAC;MACpE,IAAI,CAAC8D,UAAU,CAACf,IAAI,CAACwP,eAAe,IAAIF,WAAW,CAAC;IACxD,CAAC,MAAM;MACH,IAAIK,cAAc;MAElB,IAAI,CAACF,aAAa,CAACG,4BAA4B,CAAC,CAAC,EAAE;QAC/C,IAAI,CAAC7O,UAAU,CAACf,IAAI,CAACsP,WAAW,CAAC;QACjC;MACJ;MAEAK,cAAc,GAAG,IAAI,CAACE,kBAAkB,CAACP,WAAW,EAAEG,aAAa,CAAC;MAEpE,IAAIE,cAAc,IAAIA,cAAc,CAACxS,MAAM,EAAE;QACzC,IAAI,CAAC4D,UAAU,CAACf,IAAI,CAAC2P,cAAc,EAAE,CAAC,GAAG,IAAI,CAACG,4BAA4B,CAACR,WAAW,CAACrS,MAAM,CAAC,CAAC;MACnG;IACJ;EACJ;EAEA4S,kBAAkBA,CAACP,WAAW,EAAEG,aAAa,EAAE;IAC3C,IAAIM,SAAS,GAAG,IAAI,CAACC,mBAAmB,CAACP,aAAa,EAAEH,WAAW,CAACnU,WAAW,CAAC;IAEhF,OAAO4U,SAAS,CAAC9P,MAAM,CAACqB,KAAK,IAAIA,KAAK,KAAKgO,WAAW,CAAC;EAC3D;EAEAU,mBAAmBA,CAACC,SAAS,EAAExP,IAAI,EAAE;IACjC,IAAIL,MAAM,GAAG,EAAE;IAEf,KAAK,IAAIlD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+S,SAAS,CAAChG,QAAQ,CAAC9M,MAAM,EAAED,CAAC,EAAE,EAAE;MAChD,MAAM9B,OAAO,GAAG6U,SAAS,CAAChG,QAAQ,CAAC/M,CAAC,CAAC;MAErC,IAAI9B,OAAO,CAACD,WAAW,KAAKsF,IAAI,EAAE;QAC9BL,MAAM,CAAChD,IAAI,CAAChC,OAAO,CAAC;MACxB,CAAC,MAAM,IAAIA,OAAO,CAAC6O,QAAQ,IAAI7O,OAAO,CAAC6O,QAAQ,CAAC9M,MAAM,EAAE;QACpDiD,MAAM,GAAGA,MAAM,CAAC8P,MAAM,CAAC,IAAI,CAACF,mBAAmB,CAAC5U,OAAO,EAAEqF,IAAI,CAAC,CAAC;MACnE;IACJ;IAEA,OAAOL,MAAM;EACjB;EAEA+P,mBAAmBA,CAAC7O,KAAK,EAAE6F,CAAC,EAAE;IAC1B,MAAMiJ,YAAY,GAAG,IAAI,CAACzG,aAAa;IAEvC,IAAIyG,YAAY,IAAIA,YAAY,KAAK9O,KAAK,EAAE;MACxC8O,YAAY,CAACxG,GAAG,CAAC,IAAI,EAAEzC,CAAC,CAAC;MACzB,IAAI,CAACwC,aAAa,GAAG,IAAI;IAC7B;IAEA,IAAIrI,KAAK,IAAI8O,YAAY,KAAK9O,KAAK,IAAIA,KAAK,CAAC4N,IAAI,EAAE;MAC/C,IAAI,CAACvF,aAAa,GAAGrI,KAAK;MAC1BA,KAAK,CAAC4N,IAAI,CAAC,IAAI,EAAE/H,CAAC,CAAC;IACvB;EACJ;EAEAqB,qBAAqBA,CAAClH,KAAK,EAAE;IACzB,IAAI,CAACA,KAAK,IAAI,CAACA,KAAK,CAACrE,MAAM,EAAE;MACzB;IACJ;IAEA,MAAM;MAAEoT;IAAO,CAAC,GAAG7Z,YAAY,CAACkQ,OAAO,CAAC4J,SAAS,CAAChP,KAAK,CAACrE,MAAM,EAAE,IAAI,EAAEqE,KAAK,CAACiP,QAAQ,CAAC;IACrF,IAAIF,MAAM,CAACG,SAAS,EAAE;MAClB,IAAI,CAACC,eAAe,GAAG;QAAEC,MAAM,EAAE,IAAI,CAACtV,OAAO,CAACwB,KAAK,CAAC8T;MAAO,CAAC;MAC5D,IAAI,CAACtV,OAAO,CAACwB,KAAK,CAAC8T,MAAM,GAAG,SAAS;IACzC;EACJ;EAEAjI,oBAAoBA,CAAA,EAAG;IACnB,IAAI,IAAI,CAACgI,eAAe,EAAE;MACtB,IAAI,CAACrV,OAAO,CAACwB,KAAK,CAAC8T,MAAM,GAAG,IAAI,CAACD,eAAe,CAACC,MAAM;MACvD,IAAI,CAACD,eAAe,GAAG,IAAI;IAC/B;EACJ;EAEA/H,eAAeA,CAACpH,KAAK,EAAE;IACnB,IAAI,CAACA,KAAK,IAAI,CAACA,KAAK,CAACrE,MAAM,EAAE;MACzB;IACJ;IAEA,MAAMA,MAAM,GAAGqE,KAAK,CAACrE,MAAM;IAC3B,MAAM;MAAEoT;IAAO,CAAC,GAAG7Z,YAAY,CAACkQ,OAAO,CAAC4J,SAAS,CAACrT,MAAM,EAAE,IAAI,EAAEqE,KAAK,CAACiP,QAAQ,CAAC;IAC/E,MAAMI,KAAK,GAAGN,MAAM,CAACG,SAAS;IAC9B,IAAIG,KAAK,EAAE;MACP,MAAMvI,IAAI,GAAG;QAAEnL,MAAM;QAAEqE,KAAK;QAAEqP,KAAK;QAAEtI,MAAM,EAAE;MAAK,CAAC;MACnD,IAAI,CAAC7L,OAAO,CAAC5B,SAAS,EAAEwN,IAAI,CAAC;IACjC;EACJ;EAEA8B,oBAAoBA,CAAC5I,KAAK,EAAEsP,YAAY,EAAE;IACtC,MAAMzR,QAAQ,GAAG,IAAI,CAACE,SAAS;IAC/B,MAAMlC,MAAM,GAAGgC,QAAQ,CAAClC,MAAM,CAACE,MAAM;IAErC,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,MAAM,EAAED,CAAC,EAAE,EAAE;MAC7B,MAAM2T,UAAU,GAAG1R,QAAQ,CAAClC,MAAM,CAACC,CAAC,CAAC;MACrC,MAAM4T,cAAc,GAAG,IAAI,CAACC,2BAA2B,CAACF,UAAU,CAAC;MACnE,MAAMG,eAAe,GAAG,IAAI,CAAClB,4BAA4B,CAACe,UAAU,CAAC;MAErE,IAAI,CAACD,YAAY,IAAIC,UAAU,KAAKvP,KAAK,CAACrE,MAAM,EAAE;QAC9C4T,UAAU,CAACC,cAAc,GAAGA,cAAc;QAC1CD,UAAU,CAACI,OAAO,GAAGD,eAAe;QAEpC,IAAIH,UAAU,CAACK,IAAI,EAAE;UACjBL,UAAU,CAACK,IAAI,CAACD,OAAO,GAAGD,eAAe;QAC7C;MACJ,CAAC,MAAM;QACHH,UAAU,CAACI,OAAO,GAAGH,cAAc;QAEnC,IAAID,UAAU,CAACK,IAAI,EAAE;UACjBL,UAAU,CAACK,IAAI,CAACD,OAAO,GAAGH,cAAc;QAC5C;MACJ;IACJ;EACJ;EAEA9G,mBAAmBA,CAACmH,QAAQ,EAAEC,YAAY,EAAEC,KAAK,EAAEpU,MAAM,EAAE;IACvD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiU,QAAQ,CAAChU,MAAM,EAAED,CAAC,EAAE,EAAE;MACtC,MAAM9B,OAAO,GAAG+V,QAAQ,CAACjU,CAAC,CAAC;MAC3B,MAAM2T,UAAU,GAAGzV,OAAO,CAAC6B,MAAM,IAAIA,MAAM;MAC3C,MAAMqU,eAAe,GAAGT,UAAU,IAAI,CAACA,UAAU,CAAC/P,SAAS,IAAI,CAAC,CAAC,EAAEjC,OAAO;MAE1E,IAAIyS,eAAe,IAAIlW,OAAO,CAAC8H,MAAM,EAAE;QACnC,MAAM+N,OAAO,GAAGhU,MAAM,GAAGA,MAAM,CAACgU,OAAO,GAAG7V,OAAO,CAAC6B,MAAM,CAACgU,OAAO;QAChE,IAAIJ,UAAU,KAAKO,YAAY,IAAIC,KAAK,EAAE;UACtCjW,OAAO,CAAC8H,MAAM,CAAC+N,OAAO,CAACI,KAAK,GAAG,CAAC,GAAGJ,OAAO,CAAC;QAC/C;MACJ;MAEA,IAAI7V,OAAO,CAAC6O,QAAQ,IAAI7O,OAAO,CAAC6O,QAAQ,CAAC9M,MAAM,EAAE;QAC7C,IAAI,CAAC6M,mBAAmB,CAAC5O,OAAO,CAAC6O,QAAQ,EAAEmH,YAAY,EAAEC,KAAK,EAAEjW,OAAO,CAAC6B,MAAM,CAAC;MACnF;IACJ;EACJ;EAEAyS,uBAAuBA,CAACpO,KAAK,EAAE;IAC3B,IAAImO,aAAa,GAAGnO,KAAK,CAACkM,MAAM;IAEhC,OAAOiC,aAAa,IAAI,CAACA,aAAa,CAACtQ,QAAQ,EAAE;MAC7CsQ,aAAa,GAAGA,aAAa,CAACjC,MAAM;IACxC;IAEA,OAAOiC,aAAa;EACxB;EAEAN,oBAAoBA,CAAC7N,KAAK,EAAE6F,CAAC,EAAE;IAC3B,MAAMmI,WAAW,GAAG,IAAI,CAACiC,YAAY;IACrC,MAAMhC,cAAc,GAAG,IAAI,CAAClQ,SAAS,CAACpC,MAAM,CAACE,MAAM,GAAG,CAAC;IACvD,MAAMqU,kBAAkB,GAAG,IAAI,CAAC1H,mBAAmB,CAAC,CAAC;IAErD,IAAI,CAACqG,mBAAmB,CAAC7O,KAAK,EAAE6F,CAAC,CAAC;IAElC,IAAI7F,KAAK,IAAIgO,WAAW,KAAKhO,KAAK,IAAIA,KAAK,CAAC2N,KAAK,EAAE;MAC/C,IAAI,CAACsC,YAAY,GAAGjQ,KAAK;MAEzB,IAAI,CAAC,IAAI,CAACH,cAAc,CAAC,CAAC,IAAI,CAACG,KAAK,CAAC2N,KAAK,CAAC,IAAI,EAAE9H,CAAC,CAAC,EAAE;QACjD,IAAI,CAACiI,eAAe,CAAC9N,KAAK,CAAC;QAE3B,IAAIkQ,kBAAkB,EAAE;UACpB,IAAI,CAACnC,uBAAuB,CAAC/N,KAAK,EAAEiO,cAAc,CAAC;QACvD,CAAC,MAAM;UACH,IAAI,CAACxO,UAAU,CAACf,IAAI,CAACsB,KAAK,CAAC;QAC/B;MACJ;IACJ;IAEA,OAAOA,KAAK;EAChB;EAEAmQ,oBAAoBA,CAACnQ,KAAK,EAAE;IACxB,MAAMiO,cAAc,GAAG,IAAI,CAAClQ,SAAS,CAACpC,MAAM,CAACE,MAAM,GAAG,CAAC;IACvD,MAAMqU,kBAAkB,GAAG,IAAI,CAAC1H,mBAAmB,CAAC,CAAC;IACrD,IAAI0H,kBAAkB,EAAE;MACpB,IAAIjC,cAAc,IAAI,IAAI,CAACxF,oBAAoB,EAAE;QAC7C,IAAI,CAACG,oBAAoB,CAAC5I,KAAK,EAAE,IAAI,CAAC;QACtC,IAAI,CAAC0I,mBAAmB,CAAC,IAAI,CAACD,oBAAoB,CAACE,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC;QACxE,IAAI,CAACF,oBAAoB,GAAG,IAAI;MACpC;MACA,IAAI,CAAChJ,UAAU,IAAI,IAAI,CAACA,UAAU,CAACe,IAAI,CAAC,CAAC;MACzC,IAAI,CAACyP,YAAY,GAAG,IAAI;IAC5B;EACJ;EAEAzH,mBAAmBA,CAAA,EAAG;IAClB,IAAI4H,yBAAyB,GAAG,IAAI,CAAC5V,OAAO,CAAC6V,cAAc,CAAC7Q,SAAS,CAACkQ,eAAe,KAAKY,SAAS;IACnG,IAAIJ,kBAAkB,GAAG,IAAI,CAAC1V,OAAO,CAACmB,MAAM,CAACgD,MAAM,CAACrB,CAAC,IAAIA,CAAC,CAACkC,SAAS,CAACkQ,eAAe,KAAKY,SAAU,CAAC,CAACzU,MAAM,GAAG,CAAC;IAC/G,OAAOuU,yBAAyB,IAAIF,kBAAkB;EAC1D;EAEA1B,4BAA4BA,CAAC7S,MAAM,EAAE;IACjC,IAAI4U,sBAAsB,GAAG,IAAI,CAAC/V,OAAO,CAAC6V,cAAc,CAAC7Q,SAAS,CAACkQ,eAAe;IAClF,IAAIc,qBAAqB,GAAG7U,MAAM,CAAC6D,SAAS,CAACkQ,eAAe;IAC5D,OAAOc,qBAAqB,IAAID,sBAAsB,IAAI5U,MAAM,CAACgU,OAAO,IAAIvZ,sBAAsB;EACtG;EAEAqZ,2BAA2BA,CAAC9T,MAAM,EAAE;IAChC,OAAOA,MAAM,CAAC6T,cAAc,IAAI7T,MAAM,CAACgU,OAAO,IAAIvZ,sBAAsB;EAC5E;EAEAkQ,UAAUA,CAACT,CAAC,EAAE;IACV,MAAM7F,KAAK,GAAG,IAAI,CAACsN,WAAW,CAACzH,CAAC,CAAC/L,OAAO,EAAE+L,CAAC,CAAC+D,aAAa,CAAC;IAE1D,IAAI5J,KAAK,IAAIA,KAAK,CAACyQ,eAAe,IAAI,CAAC,IAAI,CAACC,sBAAsB,IAAI,CAAC,IAAI,CAAC7Q,cAAc,CAAC,CAAC,EAAE;MAC1F,IAAI,CAAC6Q,sBAAsB,GAAG,IAAI,CAACC,kBAAkB,CAAC3P,IAAI,CAAC,IAAI,CAAC;MAChE9J,UAAU,CAAC0Z,QAAQ,EAAE;QACjB,CAAEpX,SAAS,GAAI,IAAI,CAACkX;MACxB,CAAC,CAAC;IACN;EACJ;EAEAC,kBAAkBA,CAAC9K,CAAC,EAAE;IAClB,MAAM;MAAErL,OAAO;MAAEsF,QAAQ,EAAEC,OAAO;MAAEN,UAAU,EAAED,SAAS;MAAEyQ,YAAY,EAAEjQ;IAAM,CAAC,GAAG,IAAI;IACvF,MAAM6J,MAAM,GAAG,IAAI,CAACC,iBAAiB,CAACjE,CAAC,CAAC;IAExC,IAAI,IAAI,CAAC9H,SAAS,CAAC8S,GAAG,CAACC,aAAa,CAACjH,MAAM,CAAC,EAAE;MAC1C,IAAI7J,KAAK,IAAIA,KAAK,CAACyQ,eAAe,IAAIzQ,KAAK,CAACrE,MAAM,IAAIqE,KAAK,CAACkM,MAAM,CAAC6E,eAAe,EAAE;QAChF,MAAMC,WAAW,GAAGhR,KAAK,CAACkM,MAAM,CAAC6E,eAAe,CAAClH,MAAM,CAACe,CAAC,EAAEf,MAAM,CAACc,CAAC,EAAE3K,KAAK,CAACiR,QAAQ,CAAC;QACpF,IAAID,WAAW,IAAIA,WAAW,KAAKhR,KAAK,EAAE;UACtC,IAAI,CAACiQ,YAAY,GAAGe,WAAW;UAE/B,IAAI,CAACA,WAAW,CAACrD,KAAK,CAAC,IAAI,EAAE9H,CAAC,CAAC,EAAE;YAC7B,MAAMhC,cAAc,GAAGrN,UAAU,CAAC,CAAC,CAAC,EAAEgE,OAAO,CAACuF,OAAO,EAAEiR,WAAW,CAACxW,OAAO,CAACuF,OAAO,CAAC;YACnF,IAAI8D,cAAc,CAACtG,OAAO,EAAE;cACxBwC,OAAO,CAACrB,IAAI,CAACsS,WAAW,CAAC;YAC7B;YAEAxR,SAAS,CAACd,IAAI,CAACsS,WAAW,CAAC;UAC/B;QACJ;MACJ;IACJ,CAAC,MAAM;MACH7Z,YAAY,CAACyZ,QAAQ,EAAE;QACnB,CAAEpX,SAAS,GAAI,IAAI,CAACkX;MACxB,CAAC,CAAC;MACF,IAAI,CAACzH,iBAAiB,CAAC,CAAC;MACxB,IAAI,CAACyH,sBAAsB,GAAG,IAAI;MAElC,IAAI,CAACP,oBAAoB,CAACnQ,KAAK,CAAC;IACpC;EACJ;EAEAwG,UAAUA,CAACX,CAAC,EAAE;IACV,MAAMgE,MAAM,GAAG,IAAI,CAACC,iBAAiB,CAACjE,CAAC,CAAC;IACxC,MAAMhI,QAAQ,GAAG,IAAI,CAACE,SAAS;IAE/B,IAAI,CAACmT,gBAAgB,CAACrH,MAAM,CAAC;IAE7B,IAAIhM,QAAQ,CAAC8P,KAAK,EAAE;MAChB,MAAMwD,YAAY,GAAGtT,QAAQ,CAACsM,uBAAuB,CAACN,MAAM,CAAC;MAC7D,IAAIsH,YAAY,EAAE;QACd,IAAI,CAAC5I,gBAAgB,GAAG,IAAI;QAC5B,IAAI,CAACxK,SAAS,CAAC4P,KAAK,CAAC,IAAI,EAAE9H,CAAC,CAAC;MACjC,CAAC,MAAM,IAAI,IAAI,CAAC0C,gBAAgB,IAAI,CAAC4I,YAAY,EAAE;QAC/C,IAAI,CAAC5I,gBAAgB,GAAG,KAAK;QAC7B,IAAI,CAACrN,OAAO,CAAC5C,eAAe,CAAC;MACjC;IACJ;IAEA,IAAI,IAAI,CAACuH,cAAc,CAAC,CAAC,EAAE;MACvB,IAAI,CAAC0N,mBAAmB,CAAC1D,MAAM,EAAEhE,CAAC,CAAC;IACvC;EACJ;EAEAqL,gBAAgBA,CAACrH,MAAM,EAAE;IACrB,MAAMuH,UAAU,GAAG,IAAI,CAACrT,SAAS,CAACqT,UAAU;IAE5C,KAAK,IAAIxV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwV,UAAU,CAACvV,MAAM,EAAED,CAAC,EAAE,EAAE;MACxC,MAAMwJ,OAAO,GAAGgM,UAAU,CAACxV,CAAC,CAAC;MAE7B,IAAIwJ,OAAO,CAACyL,GAAG,CAACC,aAAa,CAACjH,MAAM,CAAC,EAAE;QACnCzE,OAAO,CAAC9E,MAAM,CAACuJ,MAAM,CAAC;MAC1B,CAAC,MAAM;QACHzE,OAAO,CAAC5E,IAAI,CAAC,CAAC;MAClB;IACJ;EACJ;EAEA+M,mBAAmBA,CAAC1D,MAAM,EAAEhE,CAAC,EAAEwL,MAAM,EAAE;IACnC,IAAI,IAAI,CAAChH,cAAc,EAAE;MACrB;IACJ;IAEA,MAAM;MAAE7P,OAAO,EAAE;QAAEuF,OAAO,EAAE8D;MAAe,CAAC;MAAE9F,SAAS,EAAEF,QAAQ;MAAEE,SAAS,EAAE;QAAEqC;MAAa,CAAC;MAAEN,QAAQ,EAAEC,OAAO;MAAEN,UAAU,EAAED;IAAU,CAAC,GAAG,IAAI;IAEjJ,IAAI3B,QAAQ,CAACsM,uBAAuB,CAACN,MAAM,CAAC,EAAE;MAC1C,MAAMnD,KAAK,GAAGtG,YAAY,CAACkR,kBAAkB,CAACzH,MAAM,CAAC;MACrD,IAAInD,KAAK,KAAK,IAAI,CAAC6K,kBAAkB,IAAK,CAAC,IAAI,CAACC,gBAAgB,IAAIH,MAAO,EAAE;QACzE,MAAMvS,MAAM,GAAGjB,QAAQ,CAACwC,qBAAqB,CAACqG,KAAK,CAAC;QACpD,MAAM+K,SAAS,GAAG3S,MAAM,CAAC4S,GAAG,CAAC,UAAS1R,KAAK,EAAE;UACzC,OAAOA,KAAK,CAAC2R,SAAS,CAAC9L,CAAC,CAAC;QAC7B,CAAC,CAAC;QACF,MAAM+L,SAAS,GAAGH,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACpCG,SAAS,CAACC,cAAc,GAAGJ,SAAS;QAEpC,IAAI3S,MAAM,CAACjD,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAACX,OAAO,CAAChC,YAAY,EAAE0Y,SAAS,CAAC,EAAE;UAC7D,IAAI/N,cAAc,CAACtG,OAAO,EAAE;YACxBwC,OAAO,CAACO,MAAM,CAACxB,MAAM,EAAE+K,MAAM,CAAC;UAClC;UAEArK,SAAS,CAACd,IAAI,CAACI,MAAM,CAAC;UAEtB,IAAI,CAAC0S,gBAAgB,GAAG,IAAI;QAChC,CAAC,MAAM;UACHzR,OAAO,CAACS,IAAI,CAAC,CAAC;QAClB;QAEA,IAAI,CAAC+Q,kBAAkB,GAAG7K,KAAK;MACnC,CAAC,MAAM,IAAI2K,MAAM,IAAI,IAAI,CAACG,gBAAgB,EAAE;QACxChS,SAAS,CAACgB,IAAI,CAAC,CAAC;QAChBT,OAAO,CAACS,IAAI,CAAC,CAAC;QACd,IAAI,CAACgR,gBAAgB,GAAG,KAAK;MACjC;IACJ,CAAC,MAAM,IAAI,IAAI,CAACA,gBAAgB,EAAE;MAC9BhS,SAAS,CAACgB,IAAI,CAAC,CAAC;MAChBT,OAAO,CAACS,IAAI,CAAC,CAAC;MACd,IAAI,CAAC+Q,kBAAkB,GAAG,IAAI;MAC9B,IAAI,CAACC,gBAAgB,GAAG,KAAK;IACjC;EACJ;EAEAM,YAAYA,CAACtX,OAAO,EAAE;IAClB,MAAMqD,QAAQ,GAAG,IAAI,CAACE,SAAS;IAC/B,IAAI,CAACyI,UAAU,CAACqC,MAAM,CAAC,CAAC;IAExBhL,QAAQ,CAACkU,cAAc,CAAC,CAAC;IAEzB,IAAI,CAAC9I,iBAAiB,CAACzO,OAAO,CAAC;EACnC;EAEAyO,iBAAiBA,CAACzO,OAAO,EAAE;IACvB,MAAM;MAAEsF,QAAQ,EAAEC,OAAO;MAAEN,UAAU,EAAED;IAAU,CAAC,GAAG,IAAI;IAEzD,IAAI,CAACyQ,YAAY,GAAG,IAAI;IACxB,IAAI,CAAC5H,aAAa,GAAG,IAAI;IAEzB,IAAItI,OAAO,IAAI,EAAEvF,OAAO,IAAIA,OAAO,CAACwX,eAAe,CAAC,EAAE;MAClDjS,OAAO,CAACS,IAAI,CAAC,CAAC;IAClB;IAEA,IAAI,CAAC+Q,kBAAkB,GAAG,IAAI;IAC9B,IAAI,CAACC,gBAAgB,GAAG,KAAK;IAE7B,IAAIhS,SAAS,EAAE;MACXA,SAAS,CAACgB,IAAI,CAAC,CAAC;IACpB;EACJ;EAEAyR,YAAYA,CAAA,EAAG;IACX,IAAI,CAAC9W,OAAO,CAAC,CAAC;EAClB;EAEA+W,mBAAmBA,CAAA,EAAG;IAClB,IAAI,IAAI,CAACC,cAAc,EAAE;MACrBC,aAAa,CAAC,IAAI,CAACD,cAAc,CAAC;MAClC,IAAI,CAACA,cAAc,GAAG,IAAI;IAC9B;EACJ;EAEArX,cAAcA,CAAA,EAAG;IACb,MAAMN,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,MAAM6X,WAAW,GAAG,EAAE,CAACzD,MAAM,CAACpU,OAAO,CAAC4F,YAAY,CAAC;IAEnD,KAAK,IAAIkS,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAGD,WAAW,CAACxW,MAAM,EAAEyW,MAAM,EAAE,EAAE;MACxD,MAAMhN,IAAI,GAAG+M,WAAW,CAACC,MAAM,CAAC;MAChC,IAAIhN,IAAI,CAACiN,QAAQ,KAAK,KAAK,EAAE;QACzB,IAAI,CAACC,0BAA0B,CAAClN,IAAI,EAAEgN,MAAM,CAAC;MACjD;IACJ;EACJ;EAEAE,0BAA0BA,CAAClN,IAAI,EAAEgN,MAAM,EAAE;IACrC,MAAM3W,MAAM,GAAG,IAAI,CAACnB,OAAO,CAACmB,MAAM;IAClC,MAAM8W,YAAY,GAAG9W,MAAM,CAACE,MAAM;IAClC,MAAM6W,gBAAgB,GAAG,IAAIjb,OAAO,CAAC,CAAC,CAAC;IACvC,IAAIkb,KAAK,GAAG,EAAE;IACd,IAAIC,QAAQ,GAAG,KAAK;IACpB,IAAIC,QAAQ;IAEZ,KAAK,IAAI5B,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAGwB,YAAY,EAAExB,QAAQ,EAAE,EAAE;MACxD,MAAM3T,CAAC,GAAG3B,MAAM,CAACsV,QAAQ,CAAC;MAC1B,MAAM6B,MAAM,GAAGxV,CAAC,CAAC8C,YAAY,KAAKkF,IAAI,CAACnH,IAAI,IAAK,CAACb,CAAC,CAAC8C,YAAY,IAAIkS,MAAM,KAAK,CAAE;MAChF,MAAMS,IAAI,GAAGzV,CAAC,CAACyV,IAAI;MACnB,MAAMC,UAAU,GAAGD,IAAI,CAAClX,MAAM;MAC9B,MAAMmF,IAAI,GAAG1D,CAAC,CAAC2V,aAAa,IAAIH,MAAM;MACtCF,QAAQ,GAAG5R,IAAI,IAAI4R,QAAQ;MAE3B,IAAI5R,IAAI,IAAIgS,UAAU,GAAG,CAAC,EAAE;QACxBH,QAAQ,GAAGnd,UAAU,CAAC4P,IAAI,EAAE7P,QAAQ,CAAC6H,CAAC,CAAC2V,aAAa,EAAEF,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAE/D,MAAMG,KAAK,GAAGL,QAAQ,GAAGld,YAAY,GAAGF,QAAQ;QAEhD,KAAK,IAAI0d,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAGH,UAAU,EAAEG,MAAM,EAAE,EAAE;UAChD,MAAMC,OAAO,GAAGL,IAAI,CAACI,MAAM,CAAC;UAC5B,MAAMjU,QAAQ,GAAGgU,KAAK,CAAC5V,CAAC,CAAC2V,aAAa,EAAEG,OAAO,EAAE,IAAI,CAAC/Y,YAAY,CAACgZ,IAAI,CAAC;UAExE,IAAIR,QAAQ,IAAI,CAACH,gBAAgB,CAACY,GAAG,CAACpU,QAAQ,CAAC,EAAE;YAC7CyT,KAAK,CAAC7W,IAAI,CAAC,CAAEoD,QAAQ,EAAEkU,OAAO,CAAE,CAAC;YAEjC,IAAI,CAACP,QAAQ,EAAE;cACXH,gBAAgB,CAACa,GAAG,CAACrU,QAAQ,EAAE,IAAI,CAAC;YACxC;UACJ;QACJ;MACJ;IACJ;IAEA,IAAIyT,KAAK,CAAC9W,MAAM,GAAG,CAAC,EAAE;MAClB,IAAIgX,QAAQ,EAAE;QACVF,KAAK,GAAGa,WAAW,CAACb,KAAK,EAAE,UAASc,CAAC,EAAEC,CAAC,EAAE;UACtC,OAAO/b,YAAY,CAAC8b,CAAC,CAAC,CAAC,CAAC,EAAEC,CAAC,CAAC,CAAC,CAAC,CAAC;QACnC,CAAC,CAAC;MACN;MAEA,MAAMC,MAAM,GAAGC,SAAS,CAACjB,KAAK,CAAC;MAC/BrN,IAAI,CAACuO,UAAU,GAAGF,MAAM,CAAC,CAAC,CAAC;IAC/B,CAAC,MAAM,IAAIf,QAAQ,EAAE;MACjBtN,IAAI,CAACuO,UAAU,GAAG,EAAE;IACxB;EACJ;EAEAC,WAAWA,CAACnY,MAAM,EAAE;IAChB,MAAMoY,WAAW,GAAG7e,YAAY,CAACkQ,OAAO,CAAC2O,WAAW,CAACpY,MAAM,CAAC;IAC5D,IAAIgY,MAAM,GAAG,IAAI;IAEjB,KAAK,IAAI/X,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmY,WAAW,CAAClY,MAAM,EAAED,CAAC,EAAE,EAAE;MACzC,IAAIoY,KAAK,GAAGD,WAAW,CAACnY,CAAC,CAAC;MAC1B,IAAIoY,KAAK,KAAK/d,KAAK,EAAE;QACjB+d,KAAK,GAAG,OAAO;MACnB,CAAC,MAAM;QACHA,KAAK,GAAGA,KAAK,GAAG,OAAO;MAC3B;MAEA,IAAI,CAACvd,OAAO,CAACkF,MAAM,CAACqY,KAAK,CAAC,CAAC,EAAE;QACzBL,MAAM,GAAG,KAAK;QACd;MACJ;IACJ;IAEA,OAAOA,MAAM;EACjB;EAEAjW,oBAAoBA,CAAA,EAAG;IACnB,MAAMlD,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,IAAIyZ,gBAAgB;IAEpB,IAAIzZ,OAAO,CAACgH,WAAW,KAAK,KAAK,EAAE;MAC/BhH,OAAO,CAACgH,WAAW,GAAG,KAAK;MAC3ByS,gBAAgB,GAAG,IAAI;IAC3B;IAEA,IAAI,CAAC9Y,OAAO,CAAC,CAAC;IAEd,IAAI8Y,gBAAgB,EAAE;MAClBzZ,OAAO,CAACgH,WAAW,GAAG,IAAI;IAC9B;EACJ;EAEA0S,gBAAgBA,CAACC,WAAW,EAAEC,UAAU,EAAE;IACtC,MAAM;MAAErW,SAAS,EAAEF,QAAQ;MAAE4B,UAAU,EAAED;IAAU,CAAC,GAAG,IAAI;IAC3D,MAAM0E,aAAa,GAAG,CAACrG,QAAQ,CAACgB,SAAS,IAAIhB,QAAQ,CAAClC,MAAM,EAAEwY,WAAW,CAAC;IAC1E,IAAIxB,KAAK;IAET,IAAIrb,OAAO,CAAC4M,aAAa,CAAC/E,IAAI,EAAE,CAAE1G,GAAG,EAAEC,KAAK,EAAEC,MAAM,EAAEC,OAAO,CAAE,CAAC,EAAE;MAC9D+Z,KAAK,GAAG9U,QAAQ,CAACqC,SAAS,CAAC,UAASF,KAAK,EAAE;QACvC,OAAOA,KAAK,CAACrE,MAAM,CAAC+K,KAAK,KAAKyN,WAAW,IAAInU,KAAK,CAAC0G,KAAK,KAAK0N,UAAU;MAC3E,CAAC,CAAC;IACN,CAAC,MAAM;MACHzB,KAAK,GAAG9U,QAAQ,CAACwW,mBAAmB,CAACF,WAAW,CAAC;IACrD;IAEA,IAAI,IAAI,CAAC3L,mBAAmB,CAAC,CAAC,IAAItE,aAAa,CAAC3G,OAAO,IAAIoV,KAAK,EAAE;MAC9D,MAAM1E,cAAc,GAAGpQ,QAAQ,CAAClC,MAAM,CAACE,MAAM,GAAG,CAAC;MACjD,MAAMmE,KAAK,GAAG2S,KAAK,CAAC9W,MAAM,GAAG8W,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK;MAE7C,IAAI,CAAC5E,uBAAuB,CAAC/N,KAAK,EAAEiO,cAAc,EAAE0E,KAAK,CAAC;IAC9D,CAAC,MAAM;MACHnT,SAAS,CAACd,IAAI,CAACiU,KAAK,CAAC;IACzB;EACJ;EAEArL,sBAAsBA,CAAA,EAAG;IACrB,OAAO,IAAI,CAACvJ,SAAS,CAACqT,UAAU,CAACvV,MAAM,IAAK,IAAI,CAACiE,QAAQ,IAAI,IAAI,CAACD,cAAc,CAAC,CAAE,IAAI,IAAI,CAACqD,gBAAgB,CAAC,CAAE7K,eAAe,EAAEC,eAAe,CAAE,CAAC;EACtJ;EAEAgc,sBAAsBA,CAAA,EAAG;IACrBnd,YAAY,CAAC,IAAI,CAAC2C,OAAO,EAAE;MACvB,CAAEN,SAAS,GAAI,IAAI,CAACgN;IACxB,CAAC,CAAC;IAEF,IAAI,IAAI,CAACc,sBAAsB,CAAC,CAAC,EAAE;MAC/BpQ,UAAU,CAAC,IAAI,CAAC4C,OAAO,EAAE;QACrB,CAAEN,SAAS,GAAI,IAAI,CAACgN;MACxB,CAAC,CAAC;IACN;EACJ;EAEA+N,YAAYA,CAAC/Z,OAAO,EAAEF,KAAK,EAAE;IACzBkI,kBAAkB,CAAC,IAAI,CAAC/H,gBAAgB,EAAED,OAAO,CAAC;IAClD,IAAI,CAACC,gBAAgB,GAAGjE,UAAU,CAAC,IAAI,CAACiE,gBAAgB,EAAED,OAAO,CAAC;IAClE,IAAI,CAACA,OAAO,GAAGhE,UAAU,CAAC,CAAC,CAAC,EAAE,IAAI,CAACiE,gBAAgB,CAAC;IAEpD,IAAIH,KAAK,EAAE;MACP,IAAI,CAACI,MAAM,GAAGJ,KAAK;MACnB,IAAI,CAACD,YAAY,CAACC,KAAK,GAAGA,KAAK;IACnC;IACA,IAAI,CAACK,UAAU,CAAC,IAAI,CAACH,OAAO,EAAE,IAAI,CAACE,MAAM,CAAC;IAE1C,IAAI,CAACsI,qBAAqB,CAAC,CAAC;EAChC;EAEAwR,UAAUA,CAACha,OAAO,EAAEF,KAAK,EAAE;IACvB,IAAI,CAACia,YAAY,CAAC/Z,OAAO,EAAEF,KAAK,CAAC;IACjC,IAAI,CAACQ,cAAc,CAAC,CAAC;IACrB,IAAI,CAAC6C,MAAM,CAAC,CAAC;IACb,IAAI,CAAC2W,sBAAsB,CAAC,CAAC;EACjC;EAEAG,YAAYA,CAACC,GAAG,EAAE;IACd,IAAI,CAACra,YAAY,CAACqa,GAAG,GAAGC,OAAO,CAACD,GAAG,CAAC;IACpC,IAAI,IAAI,CAACjU,OAAO,IAAI,IAAI,CAACA,OAAO,CAACtB,IAAI,KAAK,KAAK,EAAE;MAC7C,IAAI,CAAC0B,eAAe,CAAC,CAAC;IAC1B;EACJ;EAEA+T,cAAcA,CAACvB,IAAI,EAAE;IACjB,IAAI,CAAChZ,YAAY,CAACgZ,IAAI,GAAGA,IAAI;EACjC;EAEAwB,mBAAmBA,CAAA,EAAG;IAClB,IAAI,CAACnX,oBAAoB,CAAC,CAAC;EAC/B;EAEAoX,OAAOA,CAAA,EAAG;IACN,IAAI,CAAC7Z,UAAU,GAAG,IAAI;IAEtB9D,YAAY,CAAC,IAAI,CAAC2C,OAAO,EAAE;MACvB,CAAEL,WAAW,GAAI,IAAI,CAACuM,aAAa;MACnC,CAAElN,UAAU,GAAI,IAAI,CAACoN,kBAAkB;MACvC,CAAE1M,SAAS,GAAI,IAAI,CAACgN,UAAU;MAC9B,CAAE9M,UAAU,GAAI,IAAI,CAAC0M;IACzB,CAAC,CAAC;IAEF,IAAI,IAAI,CAAC1C,SAAS,EAAE;MAChB,IAAI,CAACA,SAAS,CAACoR,OAAO,CAAC,CAAC;MACxB,OAAO,IAAI,CAACpR,SAAS;IACzB;IAEA,IAAI,IAAI,CAACgN,sBAAsB,EAAE;MAC7BvZ,YAAY,CAACyZ,QAAQ,EAAE;QACnB,CAAEpX,SAAS,GAAI,IAAI,CAACkX;MACxB,CAAC,CAAC;IACN;IAEA,IAAI,CAACpP,YAAY,CAAC,CAAC;IAEnB,IAAI,CAACT,eAAe,CAAC,CAAC;IAEtB,IAAI,CAACqR,mBAAmB,CAAC,CAAC;EAC9B;EAEArR,eAAeA,CAAA,EAAG;IACd,MAAMJ,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,IAAIA,OAAO,EAAE;MACTA,OAAO,CAACsU,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC9T,yBAAyB,CAAC;MAC5DR,OAAO,CAACsU,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC7T,yBAAyB,CAAC;MAC5DT,OAAO,CAACqU,OAAO,CAAC,CAAC;MAEjB,IAAI,CAACrU,OAAO,GAAG,IAAI;IACvB;EACJ;EAEAjD,kBAAkBA,CAAA,EAAG;IACjB,MAAM6H,UAAU,GAAG,IAAI,CAAChI,WAAW;IAEnC,IAAIgI,UAAU,EAAE;MACZ,OAAOA,UAAU,CAACxJ,MAAM,GAAG,CAAC,EAAE;QAC1BwJ,UAAU,CAAC2P,KAAK,CAAC,CAAC,CAACF,OAAO,CAAC,CAAC;MAChC;IACJ;EACJ;EAEAxT,YAAYA,CAAA,EAAG;IACX,MAAMF,KAAK,GAAG,IAAI,CAACtD,MAAM;IAEzB,IAAIsD,KAAK,EAAE;MACPA,KAAK,CAAC0T,OAAO,CAAC,CAAC;MACf,IAAI,CAAChX,MAAM,GAAG,IAAI;IACtB;IAEA,IAAI,CAACmL,iBAAiB,CAAC,CAAC;IACxB,IAAI,CAAC9B,oBAAoB,CAAC,CAAC;IAC3B,IAAI,CAAC3J,kBAAkB,CAAC,CAAC;IAEzB,IAAI,IAAI,CAACsC,QAAQ,EAAE;MACf,IAAI,CAACA,QAAQ,CAACgV,OAAO,CAAC,CAAC;IAC3B;IAEA,IAAI,IAAI,CAACrV,UAAU,EAAE;MACjB,IAAI,CAACA,UAAU,CAACqV,OAAO,CAAC,CAAC;IAC7B;IAEA,IAAI,IAAI,CAACjS,cAAc,EAAE;MACrB,IAAI,CAACA,cAAc,CAACiS,OAAO,CAAC,CAAC;MAC7B,OAAO,IAAI,CAACjS,cAAc;IAC9B;IAEA,IAAI,IAAI,CAACH,SAAS,EAAE;MAChB,IAAI,CAACA,SAAS,CAACoS,OAAO,CAAC,CAAC;MACxB,OAAO,IAAI,CAACpS,SAAS;IACzB;IAEA,IAAI,IAAI,CAACK,eAAe,EAAE;MACtB,IAAI,CAACA,eAAe,CAAC+R,OAAO,CAAC,CAAC;MAC9B,OAAO,IAAI,CAAC/R,eAAe;IAC/B;EACJ;AACJ;AAEA,SAAS9G,kBAAkBA,CAACzB,OAAO,EAAE;EACjC,MAAMya,OAAO,GAAG1b,UAAU;EAE1B,KAAK,IAAIgF,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG0W,OAAO,CAACpZ,MAAM,EAAE0C,GAAG,EAAE,EAAE;IAC3C,MAAM2W,KAAK,GAAGD,OAAO,CAAC1W,GAAG,CAAC,GAAG,MAAM;IACnC,IAAI/D,OAAO,CAAC0a,KAAK,CAAC,EAAE;MAChB1a,OAAO,CAACya,OAAO,CAAC1W,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG/D,OAAO,CAAC0a,KAAK,CAAC;MAC/C,OAAO1a,OAAO,CAAC0a,KAAK,CAAC;IACzB;EACJ;AACJ;AAEA,SAAS9V,mBAAmBA,CAACN,MAAM,EAAEX,IAAI,EAAE;EACvC,IAAIW,MAAM,EAAE;IACR,KAAK,IAAIP,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGO,MAAM,CAACjD,MAAM,EAAE0C,GAAG,EAAE,EAAE;MAC1C,IAAIO,MAAM,CAACP,GAAG,CAAC,CAACW,QAAQ,KAAKf,IAAI,EAAE;QAC/B,OAAO,CAAEW,MAAM,CAACP,GAAG,CAAC,CAAE;MAC1B;IACJ;EACJ;AACJ;AAEA,SAASwF,iBAAiBA,CAACvJ,OAAO,EAAER,YAAY,EAAE;EAC9C,MAAMmb,iBAAiB,GAAI,CAACnb,YAAY,IAAI,CAAC,CAAC,EAAEob,YAAY,IAAK,CAAC,CAAC;EACnE,IAAI1K,QAAQ,EAAE0K,YAAY,EAAEhX,IAAI;EAEhC,SAASiX,cAAcA,CAACC,WAAW,EAAE;IACjC,MAAMC,SAAS,GAAG,CAACD,WAAW,IAAI,CAAC,CAAC,EAAEhR,KAAK,IAAI8Q,YAAY,CAAC9Q,KAAK;IACjE,MAAMqP,MAAM,GAAGnd,UAAU,CAAC,CAAC,CAAC,EACxB2e,iBAAiB,EACjBA,iBAAiB,CAACzK,QAAQ,CAAC,EAC3B0K,YAAY,EACZA,YAAY,CAAC1K,QAAQ,CAAC,EAAE;MACpBkF,IAAI,EAAE;QAAEtL,KAAK,EAAEiR;MAAU,CAAC;MAC1BC,MAAM,EAAE;QAAElR,KAAK,EAAEiR;MAAU,CAAC;MAC5B7Q,KAAK,EAAE;QAAEJ,KAAK,EAAEiR;MAAU;IAC9B,CAAC,EACDD,WACJ,CAAC;IAED,OAAO3B,MAAM,CAACjJ,QAAQ,CAAC;IAEvB,OAAOiJ,MAAM;EACjB;EAEA,KAAK,IAAIpV,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGhF,UAAU,CAACsC,MAAM,EAAE0C,GAAG,EAAE,EAAE;IAC9CmM,QAAQ,GAAGnR,UAAU,CAACgF,GAAG,CAAC,GAAG,MAAM;IACnC6W,YAAY,GAAG5a,OAAO,CAAC4a,YAAY,IAAI,CAAC,CAAC;IACzChX,IAAI,GAAG,EAAE,CAACwQ,MAAM,CAACpU,OAAO,CAACkQ,QAAQ,CAAC,CAAC;IAEnCtM,IAAI,GAAGA,IAAI,CAACsT,GAAG,CAAC2D,cAAc,CAAC;IAE/B7a,OAAO,CAACkQ,QAAQ,CAAC,GAAGtM,IAAI,CAACvC,MAAM,GAAG,CAAC,GAAGuC,IAAI,GAAGA,IAAI,CAAC,CAAC,CAAC;EACxD;AACJ;AAEA,SAAS4F,mBAAmBA,CAACxJ,OAAO,EAAER,YAAY,EAAE;EAChD,MAAM2B,MAAM,GAAGnB,OAAO,CAACmB,MAAM;EAC7B,MAAM8W,YAAY,GAAG9W,MAAM,CAACE,MAAM;EAClC,MAAMwU,cAAc,GAAG7V,OAAO,CAAC6V,cAAc;EAC7C,MAAMoF,cAAc,GAAGjf,UAAU,CAAC,CAAC,CAAC,EAAEgE,OAAO,CAAC6V,cAAc,CAAC;EAC7D,MAAMqF,mBAAmB,GAAG1b,YAAY,GAAGxD,UAAU,CAAC,CAAC,CAAC,EAAEwD,YAAY,CAACqW,cAAc,CAAC,GAAG,CAAC,CAAC;EAC3F,MAAMsF,mBAAmB,GAAGnf,UAAU,CAAC,CAAC,CAAC,EAAEkf,mBAAmB,CAAC;EAE/DE,2BAA2B,CAACH,cAAc,CAAC;EAC3CG,2BAA2B,CAACD,mBAAmB,CAAC;EAEhD,KAAK,IAAI/Z,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6W,YAAY,EAAE7W,CAAC,EAAE,EAAE;IACnC,MAAMia,UAAU,GAAGla,MAAM,CAACC,CAAC,CAAC,CAACuD,IAAI,IAAI3E,OAAO,CAAC6V,cAAc,CAAClR,IAAI;IAEhE,MAAM2W,WAAW,GAAGtf,UAAU,CAC1B;MAAEuc,IAAI,EAAE;IAAG,CAAC,EACZ4C,mBAAmB,EACnBD,mBAAmB,CAACG,UAAU,CAAC,EAC/B;MAAE9V,OAAO,EAAEvF,OAAO,CAACuF;IAAQ,CAAC,EAC5B0V,cAAc,EACdpF,cAAc,CAACwF,UAAU,CAC7B,CAAC;IAEDla,MAAM,CAACC,CAAC,CAAC,CAACyI,SAAS,GAAGyR,WAAW;IACjCna,MAAM,CAACC,CAAC,CAAC,GAAGpF,UAAU,CAAC,CAAC,CAAC,EAAEsf,WAAW,EAAEna,MAAM,CAACC,CAAC,CAAC,CAAC;IAClDD,MAAM,CAACC,CAAC,CAAC,CAACmX,IAAI,GAAGpX,MAAM,CAACC,CAAC,CAAC,CAACmX,IAAI,IAAI,EAAE;EACzC;AACJ;AAEA,SAAS6C,2BAA2BA,CAACvF,cAAc,EAAE;EACjD,OAAOA,cAAc,CAAC0F,GAAG;EACzB,OAAO1F,cAAc,CAAC2F,MAAM;EAC5B,OAAO3F,cAAc,CAAC4F,WAAW;EACjC,OAAO5F,cAAc,CAACT,IAAI;EAC1B,OAAOS,cAAc,CAAC6F,YAAY;EAClC,OAAO7F,cAAc,CAAC8F,GAAG;EACzB,OAAO9F,cAAc,CAAC+F,KAAK;EAC3B,OAAO/F,cAAc,CAACgG,IAAI;EAC1B,OAAOhG,cAAc,CAACiG,YAAY;EAClC,OAAOjG,cAAc,CAACkG,OAAO;EAC7B,OAAOlG,cAAc,CAACmG,WAAW;EACjC,OAAOnG,cAAc,CAACoG,MAAM;EAC5B,OAAOpG,cAAc,CAACqG,WAAW;EACjC,OAAOrG,cAAc,CAACsG,IAAI;EAC1B,OAAOtG,cAAc,CAACuG,OAAO;EAC7B,OAAOvG,cAAc,CAACwG,MAAM;EAC5B,OAAOxG,cAAc,CAACyG,cAAc;EACpC,OAAOzG,cAAc,CAAC0G,SAAS;EAC/B,OAAO1G,cAAc,CAAC2G,SAAS;EAC/B,OAAO3G,cAAc,CAAC4G,SAAS;EAC/B,OAAO5G,cAAc,CAAC6G,SAAS;EAC/B,OAAO7G,cAAc,CAAC8G,SAAS;AACnC;AAGA,SAASxN,UAAUA,CAACvL,IAAI,EAAE;EACtB,MAAM2L,MAAM,GAAG,CAAC,CAAC;EAEjB,KAAK,IAAInO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwC,IAAI,CAACvC,MAAM,EAAED,CAAC,EAAE,EAAE;IAClC,MAAM0J,IAAI,GAAGlH,IAAI,CAACxC,CAAC,CAAC;IACpB,MAAM8O,QAAQ,GAAGpF,IAAI,CAAC9K,OAAO,CAAC2D,IAAI;IAClC,IAAIuM,QAAQ,EAAE;MACVX,MAAM,CAACW,QAAQ,CAAC,GAAGpF,IAAI,CAACG,KAAK,CAAC,CAAC;IACnC;EACJ;EAEA,OAAOsE,MAAM;AACjB;AAEA,SAASqN,SAASA,CAACC,KAAK,EAAEC,QAAQ,GAAG3f,YAAY,EAAE;EAC/C,KAAK,IAAIiE,CAAC,GAAG,CAAC,EAAEC,MAAM,GAAGwb,KAAK,CAACxb,MAAM,EAAED,CAAC,GAAGC,MAAM,EAAED,CAAC,EAAE,EAAE;IACpD,IAAI0b,QAAQ,CAACD,KAAK,CAACzb,CAAC,CAAC,EAAEyb,KAAK,CAACzb,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;MACtCyb,KAAK,CAACE,IAAI,CAACD,QAAQ,CAAC;MACpB;IACJ;EACJ;EAEA,OAAOD,KAAK;AAChB;AAEA,SAAS7D,WAAWA,CAACgE,QAAQ,EAAEF,QAAQ,GAAG3f,YAAY,EAAE;EACpD,MAAM0f,KAAK,GAAGD,SAAS,CAACI,QAAQ,EAAEF,QAAQ,CAAC;EAC3C,MAAMzb,MAAM,GAAGwb,KAAK,CAACxb,MAAM;EAC3B,MAAM8X,MAAM,GAAG9X,MAAM,GAAG,CAAC,GAAG,CAAEwb,KAAK,CAAC,CAAC,CAAC,CAAE,GAAG,EAAE;EAE7C,KAAK,IAAIzb,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,MAAM,EAAED,CAAC,EAAE,EAAE;IAC7B,IAAI0b,QAAQ,CAACD,KAAK,CAACzb,CAAC,CAAC,EAAErE,IAAI,CAACoc,MAAM,CAAC,CAAC,KAAK,CAAC,EAAE;MACxCA,MAAM,CAAC7X,IAAI,CAACub,KAAK,CAACzb,CAAC,CAAC,CAAC;IACzB;EACJ;EAEA,OAAO+X,MAAM;AACjB;AAEA,SAASC,SAASA,CAAC6D,IAAI,EAAE;EACrB,MAAMC,QAAQ,GAAGD,IAAI,CAAC5b,MAAM;EAC5B,MAAM8X,MAAM,GAAG,EAAE;EAEjB,KAAK,IAAIgE,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGD,QAAQ,EAAEC,KAAK,EAAE,EAAE;IAC3C,MAAMC,GAAG,GAAGH,IAAI,CAACE,KAAK,CAAC;IACvB,MAAME,QAAQ,GAAGD,GAAG,CAAC/b,MAAM;IAE3B,KAAK,IAAIic,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGD,QAAQ,EAAEC,KAAK,EAAE,EAAE;MAC3CnE,MAAM,CAACmE,KAAK,CAAC,GAAGnE,MAAM,CAACmE,KAAK,CAAC,IAAI,EAAE;MACnCnE,MAAM,CAACmE,KAAK,CAAC,CAAChc,IAAI,CAAC8b,GAAG,CAACE,KAAK,CAAC,CAAC;IAClC;EACJ;EAEA,OAAOnE,MAAM;AACjB;AAEA,MAAMoE,WAAW,GAAG,CAAE,MAAM,EAAE,YAAY,CAAE;AAE5C,SAASvV,kBAAkBA,CAACwV,eAAe,EAAExd,OAAO,EAAE;EAClD,KAAK,IAAIwZ,KAAK,IAAIxZ,OAAO,EAAE;IACvB,IAAI,CAAClD,OAAO,CAAC0c,KAAK,EAAE+D,WAAW,CAAC,IAAIvd,OAAO,CAACyd,cAAc,CAACjE,KAAK,CAAC,EAAE;MAC/D,MAAMkE,UAAU,GAAG1d,OAAO,CAACwZ,KAAK,CAAC;MACjC,MAAMmE,aAAa,GAAGH,eAAe,CAAChE,KAAK,CAAC;MAC5C,IAAIvd,OAAO,CAAC0hB,aAAa,CAAC,EAAE;QACxB,MAAMC,SAAS,GAAGF,UAAU,KAAK,IAAI;QACrC,IAAKE,SAAS,IAAI,CAAC3hB,OAAO,CAACyhB,UAAU,CAAC,EAAG;UACrC,OAAOF,eAAe,CAAChE,KAAK,CAAC;UAC7B,IAAIoE,SAAS,EAAE;YACX,OAAO5d,OAAO,CAACwZ,KAAK,CAAC;UACzB;QACJ,CAAC,MAAM,IAAImE,aAAa,IAAIxhB,QAAQ,CAACuhB,UAAU,CAAC,EAAE;UAC9C,IAAIvhB,QAAQ,CAACwhB,aAAa,CAAC,EAAE;YACzB3V,kBAAkB,CAAC2V,aAAa,EAAED,UAAU,CAAC;UACjD;QACJ;MACJ;IACJ;EACJ;AACJ;AAEA,SAAShW,iBAAiBA,CAAC5D,KAAK,EAAE;EAC9B,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGD,KAAK,CAACzC,MAAM,EAAE0C,GAAG,EAAE,EAAE;IACzCD,KAAK,CAACC,GAAG,CAAC,CAAC8Z,YAAY,CAAC,CAAC;EAC7B;AACJ;AAEA9hB,iBAAiB,CAACqD,KAAK,EAAE;EACrBgH,QAAQ,EAAE,EAAE;EACZtE,SAAS,EAAE,CAAC,CAAC;EACb2I,MAAM,EAAE;IACJ1H,OAAO,EAAE,IAAI;IACbiY,MAAM,EAAE,CAAC;EACb,CAAC;EACDpV,YAAY,EAAE,CAAC,CAAC;EAChBiQ,cAAc,EAAE;IACZlR,IAAI,EAAEtG,MAAM;IACZka,IAAI,EAAE,EAAE;IACRvT,SAAS,EAAE;MACPjC,OAAO,EAAE;IACb,CAAC;IACDiY,MAAM,EAAE,CAAC,CAAC;IACV8C,cAAc,EAAE;MACZ/a,OAAO,EAAE;IACb;EACJ,CAAC;EACD5B,MAAM,EAAE,EAAE;EACVQ,YAAY,EAAE,IAAI;EAClB4D,OAAO,EAAE;IACLxC,OAAO,EAAE;EACb,CAAC;EACDiE,WAAW,EAAE,IAAI;EACjB+W,SAAS,EAAE,CAAC,CAAC;EACb1a,QAAQ,EAAE,CAAC,CAAC;EACZ6G,KAAK,EAAE,CAAC,CAAC;EACT8T,KAAK,EAAE,CAAC,CAAC;EACTC,KAAK,EAAE,CAAC,CAAC;EACTna,KAAK,EAAE,CAAE,CAAC,CAAC,CAAE;EACbmE,QAAQ,EAAE,KAAK;EACfE,QAAQ,EAAE;AACd,CAAC,CAAC;AAEF,eAAe/I,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}