{"ast":null,"code":"import { MIN_MOVING_AVERAGE_PERIOD } from '../constants';\nimport calculateMovingAverage from './calculate-moving-average';\nfunction movingAverageTrendline(context) {\n  const {\n    options\n  } = context;\n  const {\n    data\n  } = getData(context);\n  if (data) {\n    return Object.assign({}, options, {\n      type: 'line',\n      data,\n      categoryField: 'category',\n      field: 'value'\n    });\n  }\n  return null;\n}\nconst valueGetter = fieldName => ({\n  categoryIx,\n  valueFields\n}) => ({\n  xValue: categoryIx,\n  yValue: valueFields[fieldName]\n});\nfunction calculatePoints({\n  options,\n  categoryAxis,\n  seriesValues\n}) {\n  const period = (options.trendline || {}).period || MIN_MOVING_AVERAGE_PERIOD;\n  const totalRange = categoryAxis.totalRangeIndices();\n  const currentRange = categoryAxis.currentRangeIndices();\n  const range = {\n    min: Math.floor(Math.max(currentRange.min - period, totalRange.min)),\n    max: Math.ceil(Math.min(currentRange.max + period + 2, totalRange.max))\n  };\n  return calculateMovingAverage(seriesValues(range), valueGetter(options.field), period);\n}\nfunction getData(context) {\n  const {\n    categoryAxis\n  } = context;\n  const points = calculatePoints(context);\n  const data = [];\n  points.forEach(([categoryIx, value]) => {\n    data[categoryIx] = {\n      category: categoryAxis.categoryAt(categoryIx, true),\n      value\n    };\n  });\n  if (data.length > 0) {\n    return {\n      data\n    };\n  }\n  return {\n    data: null\n  };\n}\nexport default movingAverageTrendline;","map":{"version":3,"names":["MIN_MOVING_AVERAGE_PERIOD","calculateMovingAverage","movingAverageTrendline","context","options","data","getData","Object","assign","type","categoryField","field","valueGetter","fieldName","categoryIx","valueFields","xValue","yValue","calculatePoints","categoryAxis","seriesValues","period","trendline","totalRange","totalRangeIndices","currentRange","currentRangeIndices","range","min","Math","floor","max","ceil","points","forEach","value","category","categoryAt","length"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-charts/dist/es2015/chart/trendlines/moving-average.js"],"sourcesContent":["import { MIN_MOVING_AVERAGE_PERIOD } from '../constants';\nimport calculateMovingAverage from './calculate-moving-average';\n\nfunction movingAverageTrendline(context) {\n    const { options } = context;\n\n    const { data } = getData(context);\n    if (data) {\n        return Object.assign({}, options,\n\n            {type: 'line',\n            data,\n            categoryField: 'category',\n            field: 'value'});\n    }\n\n    return null;\n}\n\nconst valueGetter = fieldName => ({ categoryIx, valueFields }) =>\n    ({ xValue: categoryIx, yValue: valueFields[fieldName] });\n\nfunction calculatePoints({ options, categoryAxis, seriesValues }) {\n    const period = (options.trendline || {}).period || MIN_MOVING_AVERAGE_PERIOD;\n    const totalRange = categoryAxis.totalRangeIndices();\n    const currentRange = categoryAxis.currentRangeIndices();\n    const range = {\n        min: Math.floor(Math.max(currentRange.min - period, totalRange.min)),\n        max: Math.ceil(Math.min(currentRange.max + period + 2, totalRange.max))\n    };\n\n    return calculateMovingAverage(seriesValues(range), valueGetter(options.field), period);\n}\n\nfunction getData(context) {\n    const { categoryAxis } = context;\n    const points = calculatePoints(context);\n    const data = [];\n    points.forEach(([categoryIx, value]) => {\n        data[categoryIx] = {\n            category: categoryAxis.categoryAt(categoryIx, true),\n            value\n        };\n    });\n\n    if (data.length > 0) {\n        return { data };\n    }\n\n    return { data: null };\n}\n\nexport default movingAverageTrendline;\n"],"mappings":"AAAA,SAASA,yBAAyB,QAAQ,cAAc;AACxD,OAAOC,sBAAsB,MAAM,4BAA4B;AAE/D,SAASC,sBAAsBA,CAACC,OAAO,EAAE;EACrC,MAAM;IAAEC;EAAQ,CAAC,GAAGD,OAAO;EAE3B,MAAM;IAAEE;EAAK,CAAC,GAAGC,OAAO,CAACH,OAAO,CAAC;EACjC,IAAIE,IAAI,EAAE;IACN,OAAOE,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEJ,OAAO,EAE5B;MAACK,IAAI,EAAE,MAAM;MACbJ,IAAI;MACJK,aAAa,EAAE,UAAU;MACzBC,KAAK,EAAE;IAAO,CAAC,CAAC;EACxB;EAEA,OAAO,IAAI;AACf;AAEA,MAAMC,WAAW,GAAGC,SAAS,IAAI,CAAC;EAAEC,UAAU;EAAEC;AAAY,CAAC,MACxD;EAAEC,MAAM,EAAEF,UAAU;EAAEG,MAAM,EAAEF,WAAW,CAACF,SAAS;AAAE,CAAC,CAAC;AAE5D,SAASK,eAAeA,CAAC;EAAEd,OAAO;EAAEe,YAAY;EAAEC;AAAa,CAAC,EAAE;EAC9D,MAAMC,MAAM,GAAG,CAACjB,OAAO,CAACkB,SAAS,IAAI,CAAC,CAAC,EAAED,MAAM,IAAIrB,yBAAyB;EAC5E,MAAMuB,UAAU,GAAGJ,YAAY,CAACK,iBAAiB,CAAC,CAAC;EACnD,MAAMC,YAAY,GAAGN,YAAY,CAACO,mBAAmB,CAAC,CAAC;EACvD,MAAMC,KAAK,GAAG;IACVC,GAAG,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,GAAG,CAACN,YAAY,CAACG,GAAG,GAAGP,MAAM,EAAEE,UAAU,CAACK,GAAG,CAAC,CAAC;IACpEG,GAAG,EAAEF,IAAI,CAACG,IAAI,CAACH,IAAI,CAACD,GAAG,CAACH,YAAY,CAACM,GAAG,GAAGV,MAAM,GAAG,CAAC,EAAEE,UAAU,CAACQ,GAAG,CAAC;EAC1E,CAAC;EAED,OAAO9B,sBAAsB,CAACmB,YAAY,CAACO,KAAK,CAAC,EAAEf,WAAW,CAACR,OAAO,CAACO,KAAK,CAAC,EAAEU,MAAM,CAAC;AAC1F;AAEA,SAASf,OAAOA,CAACH,OAAO,EAAE;EACtB,MAAM;IAAEgB;EAAa,CAAC,GAAGhB,OAAO;EAChC,MAAM8B,MAAM,GAAGf,eAAe,CAACf,OAAO,CAAC;EACvC,MAAME,IAAI,GAAG,EAAE;EACf4B,MAAM,CAACC,OAAO,CAAC,CAAC,CAACpB,UAAU,EAAEqB,KAAK,CAAC,KAAK;IACpC9B,IAAI,CAACS,UAAU,CAAC,GAAG;MACfsB,QAAQ,EAAEjB,YAAY,CAACkB,UAAU,CAACvB,UAAU,EAAE,IAAI,CAAC;MACnDqB;IACJ,CAAC;EACL,CAAC,CAAC;EAEF,IAAI9B,IAAI,CAACiC,MAAM,GAAG,CAAC,EAAE;IACjB,OAAO;MAAEjC;IAAK,CAAC;EACnB;EAEA,OAAO;IAAEA,IAAI,EAAE;EAAK,CAAC;AACzB;AAEA,eAAeH,sBAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}