{"ast":null,"code":"import { geometry as geo, drawing } from '@progress/kendo-drawing';\nimport { setDefaultOptions, deepExtend, round, isArray } from '../../common';\nimport { COORD_PRECISION } from '../../common/constants';\nimport Gauge from '../gauge';\nimport RadialScale from './radial-scale';\nimport RadialPointer from './radial-pointer';\nconst Group = drawing.Group;\nclass RadialGauge extends Gauge {\n  reflow(bbox) {\n    const pointers = this.pointers;\n    this.scale.reflow(bbox);\n    this._initialPlotArea = this.scale.bbox;\n    for (let i = 0; i < pointers.length; i++) {\n      pointers[i].reflow(this.scale.arc);\n      this._initialPlotArea = geo.Rect.union(this._initialPlotArea, pointers[i].bbox);\n    }\n    this.fitScale(bbox);\n    this.alignScale(bbox);\n    this._buildVisual(this.gaugeArea, pointers, this.scale);\n    this._draw();\n  }\n  _buildVisual(gaugeArea, pointers, scale) {\n    const visuals = this._visuals = new Group();\n    visuals.append(gaugeArea);\n    visuals.append(scale.ticks);\n    visuals.append(scale.ranges);\n    this._buildPointers(pointers);\n    visuals.append(scale.labelElements);\n  }\n  _buildPointers(pointers) {\n    for (let i = 0; i < pointers.length; i++) {\n      const current = pointers[i];\n      current.render();\n      this._visuals.append(current.elements);\n      current.value(current.options.value);\n    }\n  }\n  fitScale(bbox) {\n    const arc = this.scale.arc;\n    const plotAreaBox = this._initialPlotArea;\n    const step = Math.abs(this.getDiff(plotAreaBox, bbox));\n    let min = round(step, COORD_PRECISION);\n    let max = round(-step, COORD_PRECISION);\n    let minDiff, midDiff, maxDiff, mid, oldDiff;\n    let staleFlag = 0;\n    let i = 0;\n    while (i++ < 100) {\n      staleFlag = oldDiff === maxDiff ? staleFlag + 1 : 0;\n      if (staleFlag > 5) {\n        break;\n      }\n      if (min !== mid) {\n        minDiff = this.getPlotBox(min, bbox, arc);\n        if (0 <= minDiff && minDiff <= 2) {\n          break;\n        }\n      }\n      if (max !== mid) {\n        maxDiff = this.getPlotBox(max, bbox, arc);\n        if (0 <= maxDiff && maxDiff <= 2) {\n          break;\n        }\n      }\n      if (minDiff > 0 && maxDiff > 0) {\n        mid = min * 2;\n      } else if (minDiff < 0 && maxDiff < 0) {\n        mid = max * 2;\n      } else {\n        mid = round((min + max) / 2 || 1, COORD_PRECISION);\n      }\n      midDiff = this.getPlotBox(mid, bbox, arc);\n      if (0 <= midDiff && midDiff <= 2) {\n        break;\n      }\n      oldDiff = maxDiff;\n      if (midDiff > 0) {\n        max = mid;\n        maxDiff = midDiff;\n      } else {\n        min = mid;\n        minDiff = midDiff;\n      }\n    }\n  }\n  getPlotBox(step, bbox, arc) {\n    const scale = this.scale;\n    const pointers = this.pointers;\n    const radius = arc.getRadiusX();\n    const scaleArc = arc.clone();\n    scaleArc.setRadiusX(radius + step).setRadiusY(radius + step);\n    scale.arc = scaleArc;\n    scale.reflow(bbox);\n    this.plotBbox = scale.bbox;\n    for (let i = 0; i < pointers.length; i++) {\n      pointers[i].reflow(scaleArc);\n      this.plotBbox = geo.Rect.union(this.plotBbox, pointers[i].bbox);\n    }\n    return this.getDiff(this.plotBbox, bbox);\n  }\n  getDiff(plotBox, box) {\n    return Math.min(box.width() - plotBox.width(), box.height() - plotBox.height());\n  }\n  alignScale(bbox) {\n    const plotBoxCenter = this.plotBbox.center();\n    const boxCenter = bbox.center();\n    const paddingX = plotBoxCenter.x - boxCenter.x;\n    const paddingY = plotBoxCenter.y - boxCenter.y;\n    const {\n      scale,\n      pointers\n    } = this;\n    scale.arc.center.x -= paddingX;\n    scale.arc.center.y -= paddingY;\n    scale.reflow(bbox);\n    for (let i = 0; i < pointers.length; i++) {\n      pointers[i].reflow(scale.arc);\n      this.plotBbox = geo.Rect.union(scale.bbox, pointers[i].bbox);\n    }\n  }\n  _createModel() {\n    const options = this.options;\n    const pointers = options.pointer;\n    const scale = this.scale = new RadialScale(options.scale, this.contextService);\n    this.pointers = [];\n    const pointersArr = isArray(pointers) ? pointers : [pointers];\n    for (let i = 0; i < pointersArr.length; i++) {\n      const current = new RadialPointer(scale, deepExtend({}, pointersArr[i], {\n        animation: {\n          transitions: options.transitions\n        }\n      }));\n      this.pointers.push(current);\n    }\n  }\n}\nsetDefaultOptions(RadialGauge, {\n  transitions: true,\n  gaugeArea: {\n    background: \"\"\n  }\n});\nexport default RadialGauge;","map":{"version":3,"names":["geometry","geo","drawing","setDefaultOptions","deepExtend","round","isArray","COORD_PRECISION","Gauge","RadialScale","RadialPointer","Group","RadialGauge","reflow","bbox","pointers","scale","_initialPlotArea","i","length","arc","Rect","union","fitScale","alignScale","_buildVisual","gaugeArea","_draw","visuals","_visuals","append","ticks","ranges","_buildPointers","labelElements","current","render","elements","value","options","plotAreaBox","step","Math","abs","getDiff","min","max","minDiff","midDiff","maxDiff","mid","oldDiff","staleFlag","getPlotBox","radius","getRadiusX","scaleArc","clone","setRadiusX","setRadiusY","plotBbox","plotBox","box","width","height","plotBoxCenter","center","boxCenter","paddingX","x","paddingY","y","_createModel","pointer","contextService","pointersArr","animation","transitions","push","background"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-charts/dist/es2015/gauges/radial/radial-gauge.js"],"sourcesContent":["import { geometry as geo, drawing } from '@progress/kendo-drawing';\nimport { setDefaultOptions, deepExtend, round, isArray } from '../../common';\nimport { COORD_PRECISION } from '../../common/constants';\nimport Gauge from '../gauge';\nimport RadialScale from './radial-scale';\nimport RadialPointer from './radial-pointer';\n\nconst Group = drawing.Group;\n\nclass RadialGauge extends Gauge {\n\n    reflow(bbox) {\n        const pointers = this.pointers;\n        this.scale.reflow(bbox);\n        this._initialPlotArea = this.scale.bbox;\n\n        for (let i = 0; i < pointers.length; i++) {\n            pointers[i].reflow(this.scale.arc);\n            this._initialPlotArea = geo.Rect.union(this._initialPlotArea, pointers[i].bbox);\n        }\n\n        this.fitScale(bbox);\n        this.alignScale(bbox);\n        this._buildVisual(this.gaugeArea, pointers, this.scale);\n        this._draw();\n    }\n\n    _buildVisual(gaugeArea, pointers, scale) {\n        const visuals = this._visuals = new Group();\n\n        visuals.append(gaugeArea);\n        visuals.append(scale.ticks);\n        visuals.append(scale.ranges);\n        this._buildPointers(pointers);\n        visuals.append(scale.labelElements);\n    }\n\n    _buildPointers(pointers) {\n        for (let i = 0; i < pointers.length; i++) {\n            const current = pointers[i];\n            current.render();\n            this._visuals.append(current.elements);\n\n            current.value(current.options.value);\n        }\n    }\n\n    fitScale(bbox) {\n        const arc = this.scale.arc;\n        const plotAreaBox = this._initialPlotArea;\n        const step = Math.abs(this.getDiff(plotAreaBox, bbox));\n        let min = round(step, COORD_PRECISION);\n        let max = round(-step, COORD_PRECISION);\n        let minDiff, midDiff, maxDiff, mid, oldDiff;\n        let staleFlag = 0;\n        let i = 0;\n\n        while (i++ < 100) {\n            staleFlag = (oldDiff === maxDiff) ? (staleFlag + 1) : 0;\n\n            if (staleFlag > 5) {\n                break;\n            }\n\n            if (min !== mid) {\n                minDiff = this.getPlotBox(min, bbox, arc);\n                if (0 <= minDiff && minDiff <= 2) {\n                    break;\n                }\n            }\n\n            if (max !== mid) {\n                maxDiff = this.getPlotBox(max, bbox, arc);\n                if (0 <= maxDiff && maxDiff <= 2) {\n                    break;\n                }\n            }\n\n            if (minDiff > 0 && maxDiff > 0) {\n                mid = min * 2;\n            } else if (minDiff < 0 && maxDiff < 0) {\n                mid = max * 2;\n            } else {\n                mid = round(((min + max) / 2) || 1, COORD_PRECISION);\n            }\n\n            midDiff = this.getPlotBox(mid, bbox, arc);\n            if (0 <= midDiff && midDiff <= 2) {\n                break;\n            }\n\n            oldDiff = maxDiff;\n\n            if (midDiff > 0) {\n                max = mid;\n                maxDiff = midDiff;\n            } else {\n                min = mid;\n                minDiff = midDiff;\n            }\n        }\n    }\n\n    getPlotBox(step, bbox, arc) {\n        const scale = this.scale;\n        const pointers = this.pointers;\n        const radius = arc.getRadiusX();\n        const scaleArc = arc.clone();\n\n        scaleArc.setRadiusX(radius + step).setRadiusY(radius + step);\n\n        scale.arc = scaleArc;\n        scale.reflow(bbox);\n        this.plotBbox = scale.bbox;\n\n        for (let i = 0; i < pointers.length; i++) {\n            pointers[i].reflow(scaleArc);\n            this.plotBbox = geo.Rect.union(this.plotBbox, pointers[i].bbox);\n        }\n\n        return this.getDiff(this.plotBbox, bbox);\n    }\n\n    getDiff(plotBox, box) {\n        return Math.min(box.width() - plotBox.width(), box.height() - plotBox.height());\n    }\n\n    alignScale(bbox) {\n        const plotBoxCenter = this.plotBbox.center();\n        const boxCenter = bbox.center();\n        const paddingX = plotBoxCenter.x - boxCenter.x;\n        const paddingY = plotBoxCenter.y - boxCenter.y;\n        const { scale, pointers } = this;\n\n        scale.arc.center.x -= paddingX;\n        scale.arc.center.y -= paddingY;\n\n        scale.reflow(bbox);\n\n        for (let i = 0; i < pointers.length; i++) {\n            pointers[i].reflow(scale.arc);\n            this.plotBbox = geo.Rect.union(scale.bbox, pointers[i].bbox);\n        }\n    }\n\n    _createModel() {\n        const options = this.options;\n        const pointers = options.pointer;\n        const scale = this.scale = new RadialScale(options.scale, this.contextService);\n\n        this.pointers = [];\n\n        const pointersArr = isArray(pointers) ? pointers : [ pointers ];\n        for (let i = 0; i < pointersArr.length; i++) {\n            const current = new RadialPointer(scale, deepExtend({}, pointersArr[i], {\n                animation: {\n                    transitions: options.transitions\n                }\n            }));\n\n            this.pointers.push(current);\n        }\n    }\n}\n\nsetDefaultOptions(RadialGauge, {\n    transitions: true,\n    gaugeArea: {\n        background: \"\"\n    }\n});\n\nexport default RadialGauge;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}