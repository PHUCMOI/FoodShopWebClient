{"ast":null,"code":"import { QRDataMode } from './qr-data-mode';\nimport { extend } from '../../utils';\nimport { toBitsString, splitInto } from '../../utils';\nexport class AlphaNumericQRDataMode extends QRDataMode {\n  initProperties() {\n    super.initProperties();\n    extend(this, {\n      characters: {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15,\n        \"G\": 16,\n        \"H\": 17,\n        \"I\": 18,\n        \"J\": 19,\n        \"K\": 20,\n        \"L\": 21,\n        \"M\": 22,\n        \"N\": 23,\n        \"O\": 24,\n        \"P\": 25,\n        \"Q\": 26,\n        \"R\": 27,\n        \"S\": 28,\n        \"T\": 29,\n        \"U\": 30,\n        \"V\": 31,\n        \"W\": 32,\n        \"X\": 33,\n        \"Y\": 34,\n        \"Z\": 35,\n        \" \": 36,\n        \"$\": 37,\n        \"%\": 38,\n        \"*\": 39,\n        \"+\": 40,\n        \"-\": 41,\n        \".\": 42,\n        \"/\": 43,\n        \":\": 44\n      },\n      bitsInCharacterCount: [9, 11, 13],\n      modeIndicator: \"0010\"\n    });\n  }\n  getValue(character) {\n    return this.characters[character];\n  }\n  encode(str, version) {\n    let parts = splitInto(str, 2),\n      result = this.getModeCountString(str.length, version),\n      value;\n    let i;\n    for (i = 0; i < parts.length - 1; i++) {\n      value = 45 * this.getValue(parts[i].charAt(0)) + this.getValue(parts[i].charAt(1));\n      result += toBitsString(value, 11);\n    }\n    value = parts[i].length === 2 ? 45 * this.getValue(parts[i].charAt(0)) + this.getValue(parts[i].charAt(1)) : this.getValue(parts[i].charAt(0));\n    return result + toBitsString(value, 1 + 5 * parts[i].length);\n  }\n  getStringBitsLength(inputLength, version) {\n    return 4 + this.getBitsCharacterCount(version) + 11 * Math.floor(inputLength / 2) + 6 * (inputLength % 2);\n  }\n}","map":{"version":3,"names":["QRDataMode","extend","toBitsString","splitInto","AlphaNumericQRDataMode","initProperties","characters","bitsInCharacterCount","modeIndicator","getValue","character","encode","str","version","parts","result","getModeCountString","length","value","i","charAt","getStringBitsLength","inputLength","getBitsCharacterCount","Math","floor"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-charts/dist/es2015/qrcode/encodings/data-modes/alpha-numeric-data-mode.js"],"sourcesContent":["import { QRDataMode } from './qr-data-mode';\nimport { extend } from '../../utils';\nimport {\n    toBitsString,\n    splitInto\n} from '../../utils';\n\nexport class AlphaNumericQRDataMode extends QRDataMode {\n    initProperties() {\n        super.initProperties();\n\n        extend(this, {\n            characters: {\n                \"0\": 0,\n                \"1\": 1,\n                \"2\": 2,\n                \"3\": 3,\n                \"4\": 4,\n                \"5\": 5,\n                \"6\": 6,\n                \"7\": 7,\n                \"8\": 8,\n                \"9\": 9,\n                \"A\": 10,\n                \"B\": 11,\n                \"C\": 12,\n                \"D\": 13,\n                \"E\": 14,\n                \"F\": 15,\n                \"G\": 16,\n                \"H\": 17,\n                \"I\": 18,\n                \"J\": 19,\n                \"K\": 20,\n                \"L\": 21,\n                \"M\": 22,\n                \"N\": 23,\n                \"O\": 24,\n                \"P\": 25,\n                \"Q\": 26,\n                \"R\": 27,\n                \"S\": 28,\n                \"T\": 29,\n                \"U\": 30,\n                \"V\": 31,\n                \"W\": 32,\n                \"X\": 33,\n                \"Y\": 34,\n                \"Z\": 35,\n                \" \": 36,\n                \"$\": 37,\n                \"%\": 38,\n                \"*\": 39,\n                \"+\": 40,\n                \"-\": 41,\n                \".\": 42,\n                \"/\": 43,\n                \":\": 44\n            },\n            bitsInCharacterCount: [9, 11, 13],\n            modeIndicator: \"0010\"\n        });\n    }\n\n    getValue(character) {\n        return this.characters[character];\n    }\n\n    encode(str, version) {\n        let\n            parts = splitInto(str, 2),\n            result = this.getModeCountString(str.length, version),\n            value;\n        let i;\n\n        for (i = 0; i < parts.length - 1; i++) {\n            value = 45 * this.getValue(parts[i].charAt(0)) + this.getValue(parts[i].charAt(1));\n            result += toBitsString(value, 11);\n        }\n\n        value = parts[i].length === 2 ?\n            45 * this.getValue(parts[i].charAt(0)) + this.getValue(parts[i].charAt(1)) :\n            this.getValue(parts[i].charAt(0));\n\n        return result + toBitsString(value, 1 + 5 * parts[i].length);\n    }\n\n    getStringBitsLength(inputLength, version) {\n        return 4 + this.getBitsCharacterCount(version) + 11 * Math.floor(inputLength / 2) + 6 * (inputLength % 2);\n    }\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,MAAM,QAAQ,aAAa;AACpC,SACIC,YAAY,EACZC,SAAS,QACN,aAAa;AAEpB,OAAO,MAAMC,sBAAsB,SAASJ,UAAU,CAAC;EACnDK,cAAcA,CAAA,EAAG;IACb,KAAK,CAACA,cAAc,CAAC,CAAC;IAEtBJ,MAAM,CAAC,IAAI,EAAE;MACTK,UAAU,EAAE;QACR,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,GAAG,EAAE;MACT,CAAC;MACDC,oBAAoB,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;MACjCC,aAAa,EAAE;IACnB,CAAC,CAAC;EACN;EAEAC,QAAQA,CAACC,SAAS,EAAE;IAChB,OAAO,IAAI,CAACJ,UAAU,CAACI,SAAS,CAAC;EACrC;EAEAC,MAAMA,CAACC,GAAG,EAAEC,OAAO,EAAE;IACjB,IACIC,KAAK,GAAGX,SAAS,CAACS,GAAG,EAAE,CAAC,CAAC;MACzBG,MAAM,GAAG,IAAI,CAACC,kBAAkB,CAACJ,GAAG,CAACK,MAAM,EAAEJ,OAAO,CAAC;MACrDK,KAAK;IACT,IAAIC,CAAC;IAEL,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,KAAK,CAACG,MAAM,GAAG,CAAC,EAAEE,CAAC,EAAE,EAAE;MACnCD,KAAK,GAAG,EAAE,GAAG,IAAI,CAACT,QAAQ,CAACK,KAAK,CAACK,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAACX,QAAQ,CAACK,KAAK,CAACK,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;MAClFL,MAAM,IAAIb,YAAY,CAACgB,KAAK,EAAE,EAAE,CAAC;IACrC;IAEAA,KAAK,GAAGJ,KAAK,CAACK,CAAC,CAAC,CAACF,MAAM,KAAK,CAAC,GACzB,EAAE,GAAG,IAAI,CAACR,QAAQ,CAACK,KAAK,CAACK,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAACX,QAAQ,CAACK,KAAK,CAACK,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC,GAC1E,IAAI,CAACX,QAAQ,CAACK,KAAK,CAACK,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;IAErC,OAAOL,MAAM,GAAGb,YAAY,CAACgB,KAAK,EAAE,CAAC,GAAG,CAAC,GAAGJ,KAAK,CAACK,CAAC,CAAC,CAACF,MAAM,CAAC;EAChE;EAEAI,mBAAmBA,CAACC,WAAW,EAAET,OAAO,EAAE;IACtC,OAAO,CAAC,GAAG,IAAI,CAACU,qBAAqB,CAACV,OAAO,CAAC,GAAG,EAAE,GAAGW,IAAI,CAACC,KAAK,CAACH,WAAW,GAAG,CAAC,CAAC,GAAG,CAAC,IAAIA,WAAW,GAAG,CAAC,CAAC;EAC7G;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}