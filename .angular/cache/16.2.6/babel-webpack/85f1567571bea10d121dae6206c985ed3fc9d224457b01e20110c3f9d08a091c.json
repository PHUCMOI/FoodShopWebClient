{"ast":null,"code":"import { MIN_MOVING_AVERAGE_PERIOD } from '../constants';\nfunction calculateMovingAverage(sourceValues, valueGetter, period) {\n  const averagePoints = [];\n  const values = [];\n  const start = Math.max(MIN_MOVING_AVERAGE_PERIOD, period) - 1;\n  let end = 0;\n  let sum = 0;\n  for (let i = 0; i < sourceValues.length; i++) {\n    const value = sourceValues[i];\n    const {\n      xValue,\n      yValue\n    } = valueGetter(value);\n    if (isFinite(yValue) && yValue !== null) {\n      values.push(yValue);\n      sum += yValue;\n      end = Math.max(i, end);\n    } else {\n      values.push(null);\n    }\n    if (i >= start) {\n      const count = values.filter(value => value !== null).length;\n      const lastValue = values.shift() || 0;\n      if (count > 0) {\n        const average = sum / count;\n        averagePoints.push([xValue, average]);\n        sum -= lastValue;\n        continue;\n      }\n    }\n    averagePoints.push([xValue, null]);\n  }\n  return averagePoints.slice(0, end + 1);\n}\nexport default calculateMovingAverage;","map":{"version":3,"names":["MIN_MOVING_AVERAGE_PERIOD","calculateMovingAverage","sourceValues","valueGetter","period","averagePoints","values","start","Math","max","end","sum","i","length","value","xValue","yValue","isFinite","push","count","filter","lastValue","shift","average","slice"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-charts/dist/es2015/chart/trendlines/calculate-moving-average.js"],"sourcesContent":["import { MIN_MOVING_AVERAGE_PERIOD } from '../constants';\n\nfunction calculateMovingAverage(sourceValues, valueGetter, period) {\n    const averagePoints = [];\n    const values = [];\n    const start = Math.max(MIN_MOVING_AVERAGE_PERIOD, period) - 1;\n\n    let end = 0;\n    let sum = 0;\n\n    for (let i = 0; i < sourceValues.length; i++) {\n        const value = sourceValues[i];\n        const { xValue, yValue } = valueGetter(value);\n\n        if (isFinite(yValue) && yValue !== null) {\n            values.push(yValue);\n            sum += yValue;\n            end = Math.max(i, end);\n        } else {\n            values.push(null);\n        }\n\n        if (i >= start) {\n            const count = values.filter(value => value !== null).length;\n            const lastValue = values.shift() || 0;\n\n            if (count > 0) {\n                const average = sum / count;\n                averagePoints.push([xValue, average]);\n\n                sum -= lastValue;\n                continue;\n            }\n        }\n\n        averagePoints.push([xValue, null]);\n    }\n\n    return averagePoints.slice(0, end + 1);\n}\n\nexport default calculateMovingAverage;\n"],"mappings":"AAAA,SAASA,yBAAyB,QAAQ,cAAc;AAExD,SAASC,sBAAsBA,CAACC,YAAY,EAAEC,WAAW,EAAEC,MAAM,EAAE;EAC/D,MAAMC,aAAa,GAAG,EAAE;EACxB,MAAMC,MAAM,GAAG,EAAE;EACjB,MAAMC,KAAK,GAAGC,IAAI,CAACC,GAAG,CAACT,yBAAyB,EAAEI,MAAM,CAAC,GAAG,CAAC;EAE7D,IAAIM,GAAG,GAAG,CAAC;EACX,IAAIC,GAAG,GAAG,CAAC;EAEX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,YAAY,CAACW,MAAM,EAAED,CAAC,EAAE,EAAE;IAC1C,MAAME,KAAK,GAAGZ,YAAY,CAACU,CAAC,CAAC;IAC7B,MAAM;MAAEG,MAAM;MAAEC;IAAO,CAAC,GAAGb,WAAW,CAACW,KAAK,CAAC;IAE7C,IAAIG,QAAQ,CAACD,MAAM,CAAC,IAAIA,MAAM,KAAK,IAAI,EAAE;MACrCV,MAAM,CAACY,IAAI,CAACF,MAAM,CAAC;MACnBL,GAAG,IAAIK,MAAM;MACbN,GAAG,GAAGF,IAAI,CAACC,GAAG,CAACG,CAAC,EAAEF,GAAG,CAAC;IAC1B,CAAC,MAAM;MACHJ,MAAM,CAACY,IAAI,CAAC,IAAI,CAAC;IACrB;IAEA,IAAIN,CAAC,IAAIL,KAAK,EAAE;MACZ,MAAMY,KAAK,GAAGb,MAAM,CAACc,MAAM,CAACN,KAAK,IAAIA,KAAK,KAAK,IAAI,CAAC,CAACD,MAAM;MAC3D,MAAMQ,SAAS,GAAGf,MAAM,CAACgB,KAAK,CAAC,CAAC,IAAI,CAAC;MAErC,IAAIH,KAAK,GAAG,CAAC,EAAE;QACX,MAAMI,OAAO,GAAGZ,GAAG,GAAGQ,KAAK;QAC3Bd,aAAa,CAACa,IAAI,CAAC,CAACH,MAAM,EAAEQ,OAAO,CAAC,CAAC;QAErCZ,GAAG,IAAIU,SAAS;QAChB;MACJ;IACJ;IAEAhB,aAAa,CAACa,IAAI,CAAC,CAACH,MAAM,EAAE,IAAI,CAAC,CAAC;EACtC;EAEA,OAAOV,aAAa,CAACmB,KAAK,CAAC,CAAC,EAAEd,GAAG,GAAG,CAAC,CAAC;AAC1C;AAEA,eAAeT,sBAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}