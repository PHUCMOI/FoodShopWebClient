{"ast":null,"code":"import BaseNode from '../core/base-node';\nimport renderAllAttr from './utils/render-all-attributes';\nimport renderAttr from './utils/render-attribute';\nimport renderStyle from './utils/render-style';\nimport NODE_MAP from './node-map';\nimport renderSVG from './utils/render-svg';\nimport { SVG_NS, NONE } from './constants';\nimport { support } from '../common';\nimport { defined } from '../util';\nconst TRANSFORM = \"transform\";\nconst DefinitionMap = {\n  clip: \"clip-path\",\n  fill: \"fill\"\n};\nfunction isDefinition(type, value) {\n  return type === \"clip\" || type === \"fill\" && (!value || value.nodeType === \"Gradient\");\n}\nfunction baseUrl() {\n  const base = document.getElementsByTagName(\"base\")[0];\n  let href = document.location.href;\n  let url = \"\";\n  if (base && !(support.browser || {}).msie) {\n    const hashIndex = href.indexOf(\"#\");\n    if (hashIndex !== -1) {\n      href = href.substring(0, hashIndex);\n    }\n    url = href;\n  }\n  return url;\n}\nclass Node extends BaseNode {\n  constructor(srcElement, options) {\n    super(srcElement);\n    this.definitions = {};\n    this.options = options;\n  }\n  destroy() {\n    if (this.element) {\n      this.element._kendoNode = null;\n      this.element = null;\n    }\n    this.clearDefinitions();\n    super.destroy();\n  }\n  load(elements, pos) {\n    for (let i = 0; i < elements.length; i++) {\n      const srcElement = elements[i];\n      const children = srcElement.children;\n      const childNode = new NODE_MAP[srcElement.nodeType](srcElement, this.options);\n      if (defined(pos)) {\n        this.insertAt(childNode, pos);\n      } else {\n        this.append(childNode);\n      }\n      childNode.createDefinitions();\n      if (children && children.length > 0) {\n        childNode.load(children);\n      }\n      const element = this.element;\n      if (element) {\n        childNode.attachTo(element, pos);\n      }\n    }\n  }\n  root() {\n    let root = this;\n    while (root.parent) {\n      root = root.parent;\n    }\n    return root;\n  }\n  attachTo(domElement, pos) {\n    const container = document.createElement(\"div\");\n    renderSVG(container, \"<svg xmlns='\" + SVG_NS + \"' version='1.1'>\" + this.render() + \"</svg>\");\n    const element = container.firstChild.firstChild;\n    if (element) {\n      if (defined(pos)) {\n        domElement.insertBefore(element, domElement.childNodes[pos] || null);\n      } else {\n        domElement.appendChild(element);\n      }\n      this.setElement(element);\n    }\n  }\n  setElement(element) {\n    if (this.element) {\n      this.element._kendoNode = null;\n    }\n    this.element = element;\n    this.element._kendoNode = this;\n    const nodes = this.childNodes;\n    for (let i = 0; i < nodes.length; i++) {\n      let childElement = element.childNodes[i];\n      nodes[i].setElement(childElement);\n    }\n  }\n  clear() {\n    this.clearDefinitions();\n    if (this.element) {\n      this.element.innerHTML = \"\";\n    }\n    const children = this.childNodes;\n    for (let i = 0; i < children.length; i++) {\n      children[i].destroy();\n    }\n    this.childNodes = [];\n  }\n  removeSelf() {\n    if (this.element) {\n      const parentNode = this.element.parentNode;\n      if (parentNode) {\n        parentNode.removeChild(this.element);\n      }\n      this.element = null;\n    }\n    super.removeSelf();\n  }\n  template() {\n    return this.renderChildren();\n  }\n  render() {\n    return this.template();\n  }\n  renderChildren() {\n    const nodes = this.childNodes;\n    let output = \"\";\n    for (let i = 0; i < nodes.length; i++) {\n      output += nodes[i].render();\n    }\n    return output;\n  }\n  optionsChange(e) {\n    const {\n      field,\n      value\n    } = e;\n    if (field === \"visible\") {\n      this.css(\"display\", value ? \"\" : NONE);\n    } else if (DefinitionMap[field] && isDefinition(field, value)) {\n      this.updateDefinition(field, value);\n    } else if (field === \"opacity\") {\n      this.attr(\"opacity\", value);\n    } else if (field === \"cursor\") {\n      this.css(\"cursor\", value);\n    } else if (field === \"id\") {\n      if (value) {\n        this.attr(\"id\", value);\n      } else {\n        this.removeAttr(\"id\");\n      }\n    }\n    super.optionsChange(e);\n  }\n  accessibilityOptionsChange(e) {\n    const {\n      field,\n      value\n    } = e;\n    if (field === \"role\") {\n      if (value) {\n        this.attr(\"role\", value);\n      } else {\n        this.removeAttr(\"role\");\n      }\n    } else if (field === \"ariaLabel\") {\n      if (value) {\n        this.attr(\"aria-label\", value);\n      } else {\n        this.removeAttr(\"aria-label\");\n      }\n    } else if (field === \"ariaRoleDescription\") {\n      if (value) {\n        this.attr(\"aria-roledescription\", value);\n      } else {\n        this.removeAttr(\"aria-roledescription\");\n      }\n    } else if (field === \"className\") {\n      this.className(value);\n    }\n  }\n  attr(name, value) {\n    if (this.element) {\n      this.element.setAttribute(name, value);\n    }\n  }\n  allAttr(attrs) {\n    for (let i = 0; i < attrs.length; i++) {\n      this.attr(attrs[i][0], attrs[i][1]);\n    }\n  }\n  css(name, value) {\n    if (this.element) {\n      this.element.style[name] = value;\n    }\n  }\n  allCss(styles) {\n    for (let i = 0; i < styles.length; i++) {\n      this.css(styles[i][0], styles[i][1]);\n    }\n  }\n  className(value) {\n    if (this.element) {\n      this.element.classList.remove(...this.element.classList);\n      value.split(\" \").forEach(item => {\n        this.element.classList.add(item);\n      });\n    }\n  }\n  removeAttr(name) {\n    if (this.element) {\n      this.element.removeAttribute(name);\n    }\n  }\n  mapTransform(transform) {\n    const attrs = [];\n    if (transform) {\n      attrs.push([TRANSFORM, \"matrix(\" + transform.matrix().toString(6) + \")\"]);\n    }\n    return attrs;\n  }\n  renderTransform() {\n    return renderAllAttr(this.mapTransform(this.srcElement.transform()));\n  }\n  transformChange(value) {\n    if (value) {\n      this.allAttr(this.mapTransform(value));\n    } else {\n      this.removeAttr(TRANSFORM);\n    }\n  }\n  mapStyle() {\n    const options = this.srcElement.options;\n    const style = [[\"cursor\", options.cursor]];\n    if (options.visible === false) {\n      style.push([\"display\", NONE]);\n    }\n    return style;\n  }\n  renderStyle() {\n    return renderAttr(\"style\", renderStyle(this.mapStyle(true)));\n  }\n  renderOpacity() {\n    return renderAttr(\"opacity\", this.srcElement.options.opacity);\n  }\n  renderId() {\n    return renderAttr(\"id\", this.srcElement.options.id);\n  }\n  renderClassName() {\n    return renderAttr(\"class\", this.srcElement.options.className);\n  }\n  renderRole() {\n    return renderAttr(\"role\", this.srcElement.options.role);\n  }\n  renderAriaLabel() {\n    return renderAttr(\"aria-label\", this.srcElement.options.ariaLabel);\n  }\n  renderAriaRoleDescription() {\n    return renderAttr(\"aria-roledescription\", this.srcElement.options.ariaRoleDescription);\n  }\n  createDefinitions() {\n    const srcElement = this.srcElement;\n    const definitions = this.definitions;\n    if (srcElement) {\n      const options = srcElement.options;\n      let hasDefinitions;\n      for (let field in DefinitionMap) {\n        let definition = options.get(field);\n        if (definition && isDefinition(field, definition)) {\n          definitions[field] = definition;\n          hasDefinitions = true;\n        }\n      }\n      if (hasDefinitions) {\n        this.definitionChange({\n          action: \"add\",\n          definitions: definitions\n        });\n      }\n    }\n  }\n  definitionChange(e) {\n    if (this.parent) {\n      this.parent.definitionChange(e);\n    }\n  }\n  updateDefinition(type, value) {\n    const definitions = this.definitions;\n    const current = definitions[type];\n    const attr = DefinitionMap[type];\n    const definition = {};\n    if (current) {\n      definition[type] = current;\n      this.definitionChange({\n        action: \"remove\",\n        definitions: definition\n      });\n      delete definitions[type];\n    }\n    if (!value) {\n      if (current) {\n        this.removeAttr(attr);\n      }\n    } else {\n      definition[type] = value;\n      this.definitionChange({\n        action: \"add\",\n        definitions: definition\n      });\n      definitions[type] = value;\n      this.attr(attr, this.refUrl(value.id));\n    }\n  }\n  clearDefinitions() {\n    const definitions = this.definitions;\n    this.definitionChange({\n      action: \"remove\",\n      definitions: definitions\n    });\n    this.definitions = {};\n  }\n  renderDefinitions() {\n    return renderAllAttr(this.mapDefinitions());\n  }\n  mapDefinitions() {\n    const definitions = this.definitions;\n    const attrs = [];\n    for (let field in definitions) {\n      attrs.push([DefinitionMap[field], this.refUrl(definitions[field].id)]);\n    }\n    return attrs;\n  }\n  refUrl(id) {\n    const skipBaseHref = (this.options || {}).skipBaseHref;\n    const baseHref = this.baseUrl().replace(/'/g, \"\\\\'\");\n    const base = skipBaseHref ? '' : baseHref;\n    return `url(${base}#${id})`;\n  }\n  baseUrl() {\n    return baseUrl();\n  }\n}\nexport default Node;","map":{"version":3,"names":["BaseNode","renderAllAttr","renderAttr","renderStyle","NODE_MAP","renderSVG","SVG_NS","NONE","support","defined","TRANSFORM","DefinitionMap","clip","fill","isDefinition","type","value","nodeType","baseUrl","base","document","getElementsByTagName","href","location","url","browser","msie","hashIndex","indexOf","substring","Node","constructor","srcElement","options","definitions","destroy","element","_kendoNode","clearDefinitions","load","elements","pos","i","length","children","childNode","insertAt","append","createDefinitions","attachTo","root","parent","domElement","container","createElement","render","firstChild","insertBefore","childNodes","appendChild","setElement","nodes","childElement","clear","innerHTML","removeSelf","parentNode","removeChild","template","renderChildren","output","optionsChange","e","field","css","updateDefinition","attr","removeAttr","accessibilityOptionsChange","className","name","setAttribute","allAttr","attrs","style","allCss","styles","classList","remove","split","forEach","item","add","removeAttribute","mapTransform","transform","push","matrix","toString","renderTransform","transformChange","mapStyle","cursor","visible","renderOpacity","opacity","renderId","id","renderClassName","renderRole","role","renderAriaLabel","ariaLabel","renderAriaRoleDescription","ariaRoleDescription","hasDefinitions","definition","get","definitionChange","action","current","refUrl","renderDefinitions","mapDefinitions","skipBaseHref","baseHref","replace"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-drawing/dist/es2015/svg/node.js"],"sourcesContent":["import BaseNode from '../core/base-node';\nimport renderAllAttr from './utils/render-all-attributes';\nimport renderAttr from './utils/render-attribute';\nimport renderStyle from './utils/render-style';\nimport NODE_MAP from './node-map';\nimport renderSVG from './utils/render-svg';\nimport { SVG_NS, NONE } from './constants';\nimport { support } from '../common';\nimport { defined } from '../util';\n\nconst TRANSFORM = \"transform\";\nconst DefinitionMap = {\n    clip: \"clip-path\",\n    fill: \"fill\"\n};\n\nfunction isDefinition(type, value) {\n    return type === \"clip\" || (type === \"fill\" && (!value || value.nodeType === \"Gradient\"));\n}\n\nfunction baseUrl() {\n    const base = document.getElementsByTagName(\"base\")[0];\n    let href = document.location.href;\n    let url = \"\";\n\n    if (base && !(support.browser || {}).msie) {\n        const hashIndex = href.indexOf(\"#\");\n        if (hashIndex !== -1) {\n            href = href.substring(0, hashIndex);\n        }\n\n        url = href;\n    }\n\n    return url;\n}\n\nclass Node extends BaseNode {\n\n    constructor(srcElement, options) {\n        super(srcElement);\n        this.definitions = {};\n\n        this.options = options;\n    }\n\n    destroy() {\n        if (this.element) {\n            this.element._kendoNode = null;\n            this.element = null;\n        }\n\n        this.clearDefinitions();\n        super.destroy();\n    }\n\n    load(elements, pos) {\n        for (let i = 0; i < elements.length; i++) {\n            const srcElement = elements[i];\n            const children = srcElement.children;\n\n            const childNode = new NODE_MAP[srcElement.nodeType](srcElement, this.options);\n\n            if (defined(pos)) {\n                this.insertAt(childNode, pos);\n            } else {\n                this.append(childNode);\n            }\n\n            childNode.createDefinitions();\n\n            if (children && children.length > 0) {\n                childNode.load(children);\n            }\n\n            const element = this.element;\n            if (element) {\n                childNode.attachTo(element, pos);\n            }\n        }\n    }\n\n    root() {\n        let root = this;\n\n        while (root.parent) {\n            root = root.parent;\n        }\n\n        return root;\n    }\n\n    attachTo(domElement, pos) {\n        const container = document.createElement(\"div\");\n        renderSVG(container,\n            \"<svg xmlns='\" + SVG_NS + \"' version='1.1'>\" +\n                this.render() +\n            \"</svg>\"\n        );\n\n        const element = container.firstChild.firstChild;\n        if (element) {\n            if (defined(pos)) {\n                domElement.insertBefore(element, domElement.childNodes[pos] || null);\n            } else {\n                domElement.appendChild(element);\n            }\n            this.setElement(element);\n        }\n    }\n\n    setElement(element) {\n        if (this.element) {\n            this.element._kendoNode = null;\n        }\n\n        this.element = element;\n        this.element._kendoNode = this;\n\n        const nodes = this.childNodes;\n        for (let i = 0; i < nodes.length; i++) {\n            let childElement = element.childNodes[i];\n            nodes[i].setElement(childElement);\n        }\n    }\n\n    clear() {\n        this.clearDefinitions();\n\n        if (this.element) {\n            this.element.innerHTML = \"\";\n        }\n\n        const children = this.childNodes;\n        for (let i = 0; i < children.length; i++) {\n            children[i].destroy();\n        }\n\n        this.childNodes = [];\n    }\n\n    removeSelf() {\n        if (this.element) {\n            const parentNode = this.element.parentNode;\n            if (parentNode) {\n                parentNode.removeChild(this.element);\n            }\n            this.element = null;\n        }\n\n        super.removeSelf();\n    }\n\n    template() {\n        return this.renderChildren();\n    }\n\n    render() {\n        return this.template();\n    }\n\n    renderChildren() {\n        const nodes = this.childNodes;\n        let output = \"\";\n\n        for (let i = 0; i < nodes.length; i++) {\n            output += nodes[i].render();\n        }\n\n        return output;\n    }\n\n    optionsChange(e) {\n        const { field, value } = e;\n\n        if (field === \"visible\") {\n            this.css(\"display\", value ? \"\" : NONE);\n        } else if (DefinitionMap[field] && isDefinition(field, value)) {\n            this.updateDefinition(field, value);\n        } else if (field === \"opacity\") {\n            this.attr(\"opacity\", value);\n        } else if (field === \"cursor\") {\n            this.css(\"cursor\", value);\n        } else if (field === \"id\") {\n            if (value) {\n                this.attr(\"id\", value);\n            } else {\n                this.removeAttr(\"id\");\n            }\n        }\n\n        super.optionsChange(e);\n    }\n\n    accessibilityOptionsChange(e) {\n        const { field, value } = e;\n        \n        if (field === \"role\") {\n            if (value) {\n                this.attr(\"role\", value);\n            } else {\n                this.removeAttr(\"role\");\n            }\n        } else if (field === \"ariaLabel\") {\n            if (value) {\n                this.attr(\"aria-label\", value);\n            } else {\n                this.removeAttr(\"aria-label\");\n            }\n        } else if (field === \"ariaRoleDescription\") {\n            if (value) {\n                this.attr(\"aria-roledescription\", value);\n            } else {\n                this.removeAttr(\"aria-roledescription\");\n            }\n        } else if (field === \"className\") {\n            this.className(value);\n        }\n    }\n\n    attr(name, value) {\n        if (this.element) {\n            this.element.setAttribute(name, value);\n        }\n    }\n\n    allAttr(attrs) {\n        for (let i = 0; i < attrs.length; i++) {\n            this.attr(attrs[i][0], attrs[i][1]);\n        }\n    }\n\n    css(name, value) {\n        if (this.element) {\n            this.element.style[name] = value;\n        }\n    }\n\n    allCss(styles) {\n        for (let i = 0; i < styles.length; i++) {\n            this.css(styles[i][0], styles[i][1]);\n        }\n    }\n\n    className(value) {\n        if (this.element) {\n            this.element.classList.remove(...this.element.classList);\n            value.split(\" \").forEach((item) => {\n                this.element.classList.add(item);\n            });            \n        }\n    }\n\n    removeAttr(name) {\n        if (this.element) {\n            this.element.removeAttribute(name);\n        }\n    }\n\n    mapTransform(transform) {\n        const attrs = [];\n        if (transform) {\n            attrs.push([\n                TRANSFORM,\n                \"matrix(\" + transform.matrix().toString(6) + \")\"\n            ]);\n        }\n\n        return attrs;\n    }\n\n    renderTransform() {\n        return renderAllAttr(\n            this.mapTransform(this.srcElement.transform())\n        );\n    }\n\n    transformChange(value) {\n        if (value) {\n            this.allAttr(this.mapTransform(value));\n        } else {\n            this.removeAttr(TRANSFORM);\n        }\n    }\n\n    mapStyle() {\n        const options = this.srcElement.options;\n        const style = [ [ \"cursor\", options.cursor ] ];\n\n        if (options.visible === false) {\n            style.push([ \"display\", NONE ]);\n        }\n\n        return style;\n    }\n\n    renderStyle() {\n        return renderAttr(\"style\", renderStyle(this.mapStyle(true)));\n    }\n\n    renderOpacity() {\n        return renderAttr(\"opacity\", this.srcElement.options.opacity);\n    }\n\n    renderId() {\n        return renderAttr(\"id\", this.srcElement.options.id);\n    }\n\n    renderClassName() {\n        return renderAttr(\"class\", this.srcElement.options.className);\n    }\n\n    renderRole() {\n        return renderAttr(\"role\", this.srcElement.options.role);\n    }\n\n    renderAriaLabel() {\n        return renderAttr(\"aria-label\", this.srcElement.options.ariaLabel);\n    }\n\n    renderAriaRoleDescription() {\n        return renderAttr(\"aria-roledescription\", this.srcElement.options.ariaRoleDescription);\n    }\n\n    createDefinitions() {\n        const srcElement = this.srcElement;\n        const definitions = this.definitions;\n        if (srcElement) {\n            const options = srcElement.options;\n            let hasDefinitions;\n\n            for (let field in DefinitionMap) {\n                let definition = options.get(field);\n                if (definition && isDefinition(field, definition)) {\n                    definitions[field] = definition;\n                    hasDefinitions = true;\n                }\n            }\n            if (hasDefinitions) {\n                this.definitionChange({\n                    action: \"add\",\n                    definitions: definitions\n                });\n            }\n        }\n    }\n\n    definitionChange(e) {\n        if (this.parent) {\n            this.parent.definitionChange(e);\n        }\n    }\n\n    updateDefinition(type, value) {\n        const definitions = this.definitions;\n        const current = definitions[type];\n        const attr = DefinitionMap[type];\n        const definition = {};\n        if (current) {\n            definition[type] = current;\n            this.definitionChange({\n                action: \"remove\",\n                definitions: definition\n            });\n            delete definitions[type];\n        }\n\n        if (!value) {\n            if (current) {\n                this.removeAttr(attr);\n            }\n        } else {\n            definition[type] = value;\n            this.definitionChange({\n                action: \"add\",\n                definitions: definition\n            });\n            definitions[type] = value;\n            this.attr(attr, this.refUrl(value.id));\n        }\n    }\n\n    clearDefinitions() {\n        const definitions = this.definitions;\n\n        this.definitionChange({\n            action: \"remove\",\n            definitions: definitions\n        });\n        this.definitions = {};\n    }\n\n    renderDefinitions() {\n        return renderAllAttr(this.mapDefinitions());\n    }\n\n    mapDefinitions() {\n        const definitions = this.definitions;\n        const attrs = [];\n\n        for (let field in definitions) {\n            attrs.push([ DefinitionMap[field], this.refUrl(definitions[field].id) ]);\n        }\n\n        return attrs;\n    }\n\n    refUrl(id) {\n        const skipBaseHref = (this.options || {}).skipBaseHref;\n        const baseHref = this.baseUrl().replace(/'/g, \"\\\\'\");\n        const base = skipBaseHref ? '' : baseHref;\n        return `url(${ base }#${ id })`;\n    }\n\n    baseUrl() {\n        return baseUrl();\n    }\n}\n\nexport default Node;\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,mBAAmB;AACxC,OAAOC,aAAa,MAAM,+BAA+B;AACzD,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,WAAW,MAAM,sBAAsB;AAC9C,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,SAAS,MAAM,oBAAoB;AAC1C,SAASC,MAAM,EAAEC,IAAI,QAAQ,aAAa;AAC1C,SAASC,OAAO,QAAQ,WAAW;AACnC,SAASC,OAAO,QAAQ,SAAS;AAEjC,MAAMC,SAAS,GAAG,WAAW;AAC7B,MAAMC,aAAa,GAAG;EAClBC,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE;AACV,CAAC;AAED,SAASC,YAAYA,CAACC,IAAI,EAAEC,KAAK,EAAE;EAC/B,OAAOD,IAAI,KAAK,MAAM,IAAKA,IAAI,KAAK,MAAM,KAAK,CAACC,KAAK,IAAIA,KAAK,CAACC,QAAQ,KAAK,UAAU,CAAE;AAC5F;AAEA,SAASC,OAAOA,CAAA,EAAG;EACf,MAAMC,IAAI,GAAGC,QAAQ,CAACC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;EACrD,IAAIC,IAAI,GAAGF,QAAQ,CAACG,QAAQ,CAACD,IAAI;EACjC,IAAIE,GAAG,GAAG,EAAE;EAEZ,IAAIL,IAAI,IAAI,CAAC,CAACX,OAAO,CAACiB,OAAO,IAAI,CAAC,CAAC,EAAEC,IAAI,EAAE;IACvC,MAAMC,SAAS,GAAGL,IAAI,CAACM,OAAO,CAAC,GAAG,CAAC;IACnC,IAAID,SAAS,KAAK,CAAC,CAAC,EAAE;MAClBL,IAAI,GAAGA,IAAI,CAACO,SAAS,CAAC,CAAC,EAAEF,SAAS,CAAC;IACvC;IAEAH,GAAG,GAAGF,IAAI;EACd;EAEA,OAAOE,GAAG;AACd;AAEA,MAAMM,IAAI,SAAS9B,QAAQ,CAAC;EAExB+B,WAAWA,CAACC,UAAU,EAAEC,OAAO,EAAE;IAC7B,KAAK,CAACD,UAAU,CAAC;IACjB,IAAI,CAACE,WAAW,GAAG,CAAC,CAAC;IAErB,IAAI,CAACD,OAAO,GAAGA,OAAO;EAC1B;EAEAE,OAAOA,CAAA,EAAG;IACN,IAAI,IAAI,CAACC,OAAO,EAAE;MACd,IAAI,CAACA,OAAO,CAACC,UAAU,GAAG,IAAI;MAC9B,IAAI,CAACD,OAAO,GAAG,IAAI;IACvB;IAEA,IAAI,CAACE,gBAAgB,CAAC,CAAC;IACvB,KAAK,CAACH,OAAO,CAAC,CAAC;EACnB;EAEAI,IAAIA,CAACC,QAAQ,EAAEC,GAAG,EAAE;IAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MACtC,MAAMV,UAAU,GAAGQ,QAAQ,CAACE,CAAC,CAAC;MAC9B,MAAME,QAAQ,GAAGZ,UAAU,CAACY,QAAQ;MAEpC,MAAMC,SAAS,GAAG,IAAIzC,QAAQ,CAAC4B,UAAU,CAACf,QAAQ,CAAC,CAACe,UAAU,EAAE,IAAI,CAACC,OAAO,CAAC;MAE7E,IAAIxB,OAAO,CAACgC,GAAG,CAAC,EAAE;QACd,IAAI,CAACK,QAAQ,CAACD,SAAS,EAAEJ,GAAG,CAAC;MACjC,CAAC,MAAM;QACH,IAAI,CAACM,MAAM,CAACF,SAAS,CAAC;MAC1B;MAEAA,SAAS,CAACG,iBAAiB,CAAC,CAAC;MAE7B,IAAIJ,QAAQ,IAAIA,QAAQ,CAACD,MAAM,GAAG,CAAC,EAAE;QACjCE,SAAS,CAACN,IAAI,CAACK,QAAQ,CAAC;MAC5B;MAEA,MAAMR,OAAO,GAAG,IAAI,CAACA,OAAO;MAC5B,IAAIA,OAAO,EAAE;QACTS,SAAS,CAACI,QAAQ,CAACb,OAAO,EAAEK,GAAG,CAAC;MACpC;IACJ;EACJ;EAEAS,IAAIA,CAAA,EAAG;IACH,IAAIA,IAAI,GAAG,IAAI;IAEf,OAAOA,IAAI,CAACC,MAAM,EAAE;MAChBD,IAAI,GAAGA,IAAI,CAACC,MAAM;IACtB;IAEA,OAAOD,IAAI;EACf;EAEAD,QAAQA,CAACG,UAAU,EAAEX,GAAG,EAAE;IACtB,MAAMY,SAAS,GAAGjC,QAAQ,CAACkC,aAAa,CAAC,KAAK,CAAC;IAC/CjD,SAAS,CAACgD,SAAS,EACf,cAAc,GAAG/C,MAAM,GAAG,kBAAkB,GACxC,IAAI,CAACiD,MAAM,CAAC,CAAC,GACjB,QACJ,CAAC;IAED,MAAMnB,OAAO,GAAGiB,SAAS,CAACG,UAAU,CAACA,UAAU;IAC/C,IAAIpB,OAAO,EAAE;MACT,IAAI3B,OAAO,CAACgC,GAAG,CAAC,EAAE;QACdW,UAAU,CAACK,YAAY,CAACrB,OAAO,EAAEgB,UAAU,CAACM,UAAU,CAACjB,GAAG,CAAC,IAAI,IAAI,CAAC;MACxE,CAAC,MAAM;QACHW,UAAU,CAACO,WAAW,CAACvB,OAAO,CAAC;MACnC;MACA,IAAI,CAACwB,UAAU,CAACxB,OAAO,CAAC;IAC5B;EACJ;EAEAwB,UAAUA,CAACxB,OAAO,EAAE;IAChB,IAAI,IAAI,CAACA,OAAO,EAAE;MACd,IAAI,CAACA,OAAO,CAACC,UAAU,GAAG,IAAI;IAClC;IAEA,IAAI,CAACD,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACA,OAAO,CAACC,UAAU,GAAG,IAAI;IAE9B,MAAMwB,KAAK,GAAG,IAAI,CAACH,UAAU;IAC7B,KAAK,IAAIhB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmB,KAAK,CAAClB,MAAM,EAAED,CAAC,EAAE,EAAE;MACnC,IAAIoB,YAAY,GAAG1B,OAAO,CAACsB,UAAU,CAAChB,CAAC,CAAC;MACxCmB,KAAK,CAACnB,CAAC,CAAC,CAACkB,UAAU,CAACE,YAAY,CAAC;IACrC;EACJ;EAEAC,KAAKA,CAAA,EAAG;IACJ,IAAI,CAACzB,gBAAgB,CAAC,CAAC;IAEvB,IAAI,IAAI,CAACF,OAAO,EAAE;MACd,IAAI,CAACA,OAAO,CAAC4B,SAAS,GAAG,EAAE;IAC/B;IAEA,MAAMpB,QAAQ,GAAG,IAAI,CAACc,UAAU;IAChC,KAAK,IAAIhB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGE,QAAQ,CAACD,MAAM,EAAED,CAAC,EAAE,EAAE;MACtCE,QAAQ,CAACF,CAAC,CAAC,CAACP,OAAO,CAAC,CAAC;IACzB;IAEA,IAAI,CAACuB,UAAU,GAAG,EAAE;EACxB;EAEAO,UAAUA,CAAA,EAAG;IACT,IAAI,IAAI,CAAC7B,OAAO,EAAE;MACd,MAAM8B,UAAU,GAAG,IAAI,CAAC9B,OAAO,CAAC8B,UAAU;MAC1C,IAAIA,UAAU,EAAE;QACZA,UAAU,CAACC,WAAW,CAAC,IAAI,CAAC/B,OAAO,CAAC;MACxC;MACA,IAAI,CAACA,OAAO,GAAG,IAAI;IACvB;IAEA,KAAK,CAAC6B,UAAU,CAAC,CAAC;EACtB;EAEAG,QAAQA,CAAA,EAAG;IACP,OAAO,IAAI,CAACC,cAAc,CAAC,CAAC;EAChC;EAEAd,MAAMA,CAAA,EAAG;IACL,OAAO,IAAI,CAACa,QAAQ,CAAC,CAAC;EAC1B;EAEAC,cAAcA,CAAA,EAAG;IACb,MAAMR,KAAK,GAAG,IAAI,CAACH,UAAU;IAC7B,IAAIY,MAAM,GAAG,EAAE;IAEf,KAAK,IAAI5B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmB,KAAK,CAAClB,MAAM,EAAED,CAAC,EAAE,EAAE;MACnC4B,MAAM,IAAIT,KAAK,CAACnB,CAAC,CAAC,CAACa,MAAM,CAAC,CAAC;IAC/B;IAEA,OAAOe,MAAM;EACjB;EAEAC,aAAaA,CAACC,CAAC,EAAE;IACb,MAAM;MAAEC,KAAK;MAAEzD;IAAM,CAAC,GAAGwD,CAAC;IAE1B,IAAIC,KAAK,KAAK,SAAS,EAAE;MACrB,IAAI,CAACC,GAAG,CAAC,SAAS,EAAE1D,KAAK,GAAG,EAAE,GAAGT,IAAI,CAAC;IAC1C,CAAC,MAAM,IAAII,aAAa,CAAC8D,KAAK,CAAC,IAAI3D,YAAY,CAAC2D,KAAK,EAAEzD,KAAK,CAAC,EAAE;MAC3D,IAAI,CAAC2D,gBAAgB,CAACF,KAAK,EAAEzD,KAAK,CAAC;IACvC,CAAC,MAAM,IAAIyD,KAAK,KAAK,SAAS,EAAE;MAC5B,IAAI,CAACG,IAAI,CAAC,SAAS,EAAE5D,KAAK,CAAC;IAC/B,CAAC,MAAM,IAAIyD,KAAK,KAAK,QAAQ,EAAE;MAC3B,IAAI,CAACC,GAAG,CAAC,QAAQ,EAAE1D,KAAK,CAAC;IAC7B,CAAC,MAAM,IAAIyD,KAAK,KAAK,IAAI,EAAE;MACvB,IAAIzD,KAAK,EAAE;QACP,IAAI,CAAC4D,IAAI,CAAC,IAAI,EAAE5D,KAAK,CAAC;MAC1B,CAAC,MAAM;QACH,IAAI,CAAC6D,UAAU,CAAC,IAAI,CAAC;MACzB;IACJ;IAEA,KAAK,CAACN,aAAa,CAACC,CAAC,CAAC;EAC1B;EAEAM,0BAA0BA,CAACN,CAAC,EAAE;IAC1B,MAAM;MAAEC,KAAK;MAAEzD;IAAM,CAAC,GAAGwD,CAAC;IAE1B,IAAIC,KAAK,KAAK,MAAM,EAAE;MAClB,IAAIzD,KAAK,EAAE;QACP,IAAI,CAAC4D,IAAI,CAAC,MAAM,EAAE5D,KAAK,CAAC;MAC5B,CAAC,MAAM;QACH,IAAI,CAAC6D,UAAU,CAAC,MAAM,CAAC;MAC3B;IACJ,CAAC,MAAM,IAAIJ,KAAK,KAAK,WAAW,EAAE;MAC9B,IAAIzD,KAAK,EAAE;QACP,IAAI,CAAC4D,IAAI,CAAC,YAAY,EAAE5D,KAAK,CAAC;MAClC,CAAC,MAAM;QACH,IAAI,CAAC6D,UAAU,CAAC,YAAY,CAAC;MACjC;IACJ,CAAC,MAAM,IAAIJ,KAAK,KAAK,qBAAqB,EAAE;MACxC,IAAIzD,KAAK,EAAE;QACP,IAAI,CAAC4D,IAAI,CAAC,sBAAsB,EAAE5D,KAAK,CAAC;MAC5C,CAAC,MAAM;QACH,IAAI,CAAC6D,UAAU,CAAC,sBAAsB,CAAC;MAC3C;IACJ,CAAC,MAAM,IAAIJ,KAAK,KAAK,WAAW,EAAE;MAC9B,IAAI,CAACM,SAAS,CAAC/D,KAAK,CAAC;IACzB;EACJ;EAEA4D,IAAIA,CAACI,IAAI,EAAEhE,KAAK,EAAE;IACd,IAAI,IAAI,CAACoB,OAAO,EAAE;MACd,IAAI,CAACA,OAAO,CAAC6C,YAAY,CAACD,IAAI,EAAEhE,KAAK,CAAC;IAC1C;EACJ;EAEAkE,OAAOA,CAACC,KAAK,EAAE;IACX,KAAK,IAAIzC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyC,KAAK,CAACxC,MAAM,EAAED,CAAC,EAAE,EAAE;MACnC,IAAI,CAACkC,IAAI,CAACO,KAAK,CAACzC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEyC,KAAK,CAACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvC;EACJ;EAEAgC,GAAGA,CAACM,IAAI,EAAEhE,KAAK,EAAE;IACb,IAAI,IAAI,CAACoB,OAAO,EAAE;MACd,IAAI,CAACA,OAAO,CAACgD,KAAK,CAACJ,IAAI,CAAC,GAAGhE,KAAK;IACpC;EACJ;EAEAqE,MAAMA,CAACC,MAAM,EAAE;IACX,KAAK,IAAI5C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4C,MAAM,CAAC3C,MAAM,EAAED,CAAC,EAAE,EAAE;MACpC,IAAI,CAACgC,GAAG,CAACY,MAAM,CAAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE4C,MAAM,CAAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC;EACJ;EAEAqC,SAASA,CAAC/D,KAAK,EAAE;IACb,IAAI,IAAI,CAACoB,OAAO,EAAE;MACd,IAAI,CAACA,OAAO,CAACmD,SAAS,CAACC,MAAM,CAAC,GAAG,IAAI,CAACpD,OAAO,CAACmD,SAAS,CAAC;MACxDvE,KAAK,CAACyE,KAAK,CAAC,GAAG,CAAC,CAACC,OAAO,CAAEC,IAAI,IAAK;QAC/B,IAAI,CAACvD,OAAO,CAACmD,SAAS,CAACK,GAAG,CAACD,IAAI,CAAC;MACpC,CAAC,CAAC;IACN;EACJ;EAEAd,UAAUA,CAACG,IAAI,EAAE;IACb,IAAI,IAAI,CAAC5C,OAAO,EAAE;MACd,IAAI,CAACA,OAAO,CAACyD,eAAe,CAACb,IAAI,CAAC;IACtC;EACJ;EAEAc,YAAYA,CAACC,SAAS,EAAE;IACpB,MAAMZ,KAAK,GAAG,EAAE;IAChB,IAAIY,SAAS,EAAE;MACXZ,KAAK,CAACa,IAAI,CAAC,CACPtF,SAAS,EACT,SAAS,GAAGqF,SAAS,CAACE,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC,GAAG,GAAG,CACnD,CAAC;IACN;IAEA,OAAOf,KAAK;EAChB;EAEAgB,eAAeA,CAAA,EAAG;IACd,OAAOlG,aAAa,CAChB,IAAI,CAAC6F,YAAY,CAAC,IAAI,CAAC9D,UAAU,CAAC+D,SAAS,CAAC,CAAC,CACjD,CAAC;EACL;EAEAK,eAAeA,CAACpF,KAAK,EAAE;IACnB,IAAIA,KAAK,EAAE;MACP,IAAI,CAACkE,OAAO,CAAC,IAAI,CAACY,YAAY,CAAC9E,KAAK,CAAC,CAAC;IAC1C,CAAC,MAAM;MACH,IAAI,CAAC6D,UAAU,CAACnE,SAAS,CAAC;IAC9B;EACJ;EAEA2F,QAAQA,CAAA,EAAG;IACP,MAAMpE,OAAO,GAAG,IAAI,CAACD,UAAU,CAACC,OAAO;IACvC,MAAMmD,KAAK,GAAG,CAAE,CAAE,QAAQ,EAAEnD,OAAO,CAACqE,MAAM,CAAE,CAAE;IAE9C,IAAIrE,OAAO,CAACsE,OAAO,KAAK,KAAK,EAAE;MAC3BnB,KAAK,CAACY,IAAI,CAAC,CAAE,SAAS,EAAEzF,IAAI,CAAE,CAAC;IACnC;IAEA,OAAO6E,KAAK;EAChB;EAEAjF,WAAWA,CAAA,EAAG;IACV,OAAOD,UAAU,CAAC,OAAO,EAAEC,WAAW,CAAC,IAAI,CAACkG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAChE;EAEAG,aAAaA,CAAA,EAAG;IACZ,OAAOtG,UAAU,CAAC,SAAS,EAAE,IAAI,CAAC8B,UAAU,CAACC,OAAO,CAACwE,OAAO,CAAC;EACjE;EAEAC,QAAQA,CAAA,EAAG;IACP,OAAOxG,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC8B,UAAU,CAACC,OAAO,CAAC0E,EAAE,CAAC;EACvD;EAEAC,eAAeA,CAAA,EAAG;IACd,OAAO1G,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC8B,UAAU,CAACC,OAAO,CAAC8C,SAAS,CAAC;EACjE;EAEA8B,UAAUA,CAAA,EAAG;IACT,OAAO3G,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC8B,UAAU,CAACC,OAAO,CAAC6E,IAAI,CAAC;EAC3D;EAEAC,eAAeA,CAAA,EAAG;IACd,OAAO7G,UAAU,CAAC,YAAY,EAAE,IAAI,CAAC8B,UAAU,CAACC,OAAO,CAAC+E,SAAS,CAAC;EACtE;EAEAC,yBAAyBA,CAAA,EAAG;IACxB,OAAO/G,UAAU,CAAC,sBAAsB,EAAE,IAAI,CAAC8B,UAAU,CAACC,OAAO,CAACiF,mBAAmB,CAAC;EAC1F;EAEAlE,iBAAiBA,CAAA,EAAG;IAChB,MAAMhB,UAAU,GAAG,IAAI,CAACA,UAAU;IAClC,MAAME,WAAW,GAAG,IAAI,CAACA,WAAW;IACpC,IAAIF,UAAU,EAAE;MACZ,MAAMC,OAAO,GAAGD,UAAU,CAACC,OAAO;MAClC,IAAIkF,cAAc;MAElB,KAAK,IAAI1C,KAAK,IAAI9D,aAAa,EAAE;QAC7B,IAAIyG,UAAU,GAAGnF,OAAO,CAACoF,GAAG,CAAC5C,KAAK,CAAC;QACnC,IAAI2C,UAAU,IAAItG,YAAY,CAAC2D,KAAK,EAAE2C,UAAU,CAAC,EAAE;UAC/ClF,WAAW,CAACuC,KAAK,CAAC,GAAG2C,UAAU;UAC/BD,cAAc,GAAG,IAAI;QACzB;MACJ;MACA,IAAIA,cAAc,EAAE;QAChB,IAAI,CAACG,gBAAgB,CAAC;UAClBC,MAAM,EAAE,KAAK;UACbrF,WAAW,EAAEA;QACjB,CAAC,CAAC;MACN;IACJ;EACJ;EAEAoF,gBAAgBA,CAAC9C,CAAC,EAAE;IAChB,IAAI,IAAI,CAACrB,MAAM,EAAE;MACb,IAAI,CAACA,MAAM,CAACmE,gBAAgB,CAAC9C,CAAC,CAAC;IACnC;EACJ;EAEAG,gBAAgBA,CAAC5D,IAAI,EAAEC,KAAK,EAAE;IAC1B,MAAMkB,WAAW,GAAG,IAAI,CAACA,WAAW;IACpC,MAAMsF,OAAO,GAAGtF,WAAW,CAACnB,IAAI,CAAC;IACjC,MAAM6D,IAAI,GAAGjE,aAAa,CAACI,IAAI,CAAC;IAChC,MAAMqG,UAAU,GAAG,CAAC,CAAC;IACrB,IAAII,OAAO,EAAE;MACTJ,UAAU,CAACrG,IAAI,CAAC,GAAGyG,OAAO;MAC1B,IAAI,CAACF,gBAAgB,CAAC;QAClBC,MAAM,EAAE,QAAQ;QAChBrF,WAAW,EAAEkF;MACjB,CAAC,CAAC;MACF,OAAOlF,WAAW,CAACnB,IAAI,CAAC;IAC5B;IAEA,IAAI,CAACC,KAAK,EAAE;MACR,IAAIwG,OAAO,EAAE;QACT,IAAI,CAAC3C,UAAU,CAACD,IAAI,CAAC;MACzB;IACJ,CAAC,MAAM;MACHwC,UAAU,CAACrG,IAAI,CAAC,GAAGC,KAAK;MACxB,IAAI,CAACsG,gBAAgB,CAAC;QAClBC,MAAM,EAAE,KAAK;QACbrF,WAAW,EAAEkF;MACjB,CAAC,CAAC;MACFlF,WAAW,CAACnB,IAAI,CAAC,GAAGC,KAAK;MACzB,IAAI,CAAC4D,IAAI,CAACA,IAAI,EAAE,IAAI,CAAC6C,MAAM,CAACzG,KAAK,CAAC2F,EAAE,CAAC,CAAC;IAC1C;EACJ;EAEArE,gBAAgBA,CAAA,EAAG;IACf,MAAMJ,WAAW,GAAG,IAAI,CAACA,WAAW;IAEpC,IAAI,CAACoF,gBAAgB,CAAC;MAClBC,MAAM,EAAE,QAAQ;MAChBrF,WAAW,EAAEA;IACjB,CAAC,CAAC;IACF,IAAI,CAACA,WAAW,GAAG,CAAC,CAAC;EACzB;EAEAwF,iBAAiBA,CAAA,EAAG;IAChB,OAAOzH,aAAa,CAAC,IAAI,CAAC0H,cAAc,CAAC,CAAC,CAAC;EAC/C;EAEAA,cAAcA,CAAA,EAAG;IACb,MAAMzF,WAAW,GAAG,IAAI,CAACA,WAAW;IACpC,MAAMiD,KAAK,GAAG,EAAE;IAEhB,KAAK,IAAIV,KAAK,IAAIvC,WAAW,EAAE;MAC3BiD,KAAK,CAACa,IAAI,CAAC,CAAErF,aAAa,CAAC8D,KAAK,CAAC,EAAE,IAAI,CAACgD,MAAM,CAACvF,WAAW,CAACuC,KAAK,CAAC,CAACkC,EAAE,CAAC,CAAE,CAAC;IAC5E;IAEA,OAAOxB,KAAK;EAChB;EAEAsC,MAAMA,CAACd,EAAE,EAAE;IACP,MAAMiB,YAAY,GAAG,CAAC,IAAI,CAAC3F,OAAO,IAAI,CAAC,CAAC,EAAE2F,YAAY;IACtD,MAAMC,QAAQ,GAAG,IAAI,CAAC3G,OAAO,CAAC,CAAC,CAAC4G,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC;IACpD,MAAM3G,IAAI,GAAGyG,YAAY,GAAG,EAAE,GAAGC,QAAQ;IACzC,OAAQ,OAAO1G,IAAM,IAAIwF,EAAI,GAAE;EACnC;EAEAzF,OAAOA,CAAA,EAAG;IACN,OAAOA,OAAO,CAAC,CAAC;EACpB;AACJ;AAEA,eAAeY,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}