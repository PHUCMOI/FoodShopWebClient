{"ast":null,"code":"import { BehaviorSubject, map } from 'rxjs';\nimport { User } from '../models/User';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst CREATE_ACTION = 'Create';\nconst UPDATE_ACTION = 'Update';\nconst DELETE_ACTION = 'Delete';\nconst itemIndex = (item, data) => {\n  for (let idx = 0; idx < data.length; idx++) {\n    if (data[idx].userId === item.userId) {\n      return idx;\n    }\n  }\n  return -1;\n};\nconst cloneData = data => data.map(item => Object.assign({}, item));\nexport class UserService extends BehaviorSubject {\n  constructor(http) {\n    super([]);\n    this.http = http;\n    this.url = \"Users\";\n    this.data = [];\n    this.originalData = [];\n    this.updatedItems = [];\n  }\n  getUser() {\n    return this.http.get(`${environment.apiUrl}${this.url}`);\n  }\n  read() {\n    if (this.data.length) {\n      return super.next(this.data);\n    }\n    this.fetch().subscribe(data => {\n      this.data = data;\n      this.originalData = cloneData(data);\n      super.next(data);\n    });\n  }\n  create(item) {\n    this.data.unshift(item);\n    this.createdItems = item;\n    super.next(this.data);\n  }\n  update(item) {\n    if (!this.isNew(item)) {\n      const index = itemIndex(item, this.updatedItems);\n      if (index !== -1) {\n        this.updatedItems.splice(index, 1, item);\n      } else {\n        this.updatedItems.push(item);\n      }\n    }\n  }\n  remove(item) {\n    let index = itemIndex(item, this.data);\n    this.data.splice(index, 1);\n    index = itemIndex(item, this.updatedItems);\n    if (index >= 0) {\n      this.updatedItems.splice(index, 1);\n    }\n    super.next(this.data);\n  }\n  isNew(item) {\n    return !item.userId;\n  }\n  hasChanges() {\n    return Boolean(this.deletedItems || this.updatedItems.length || this.createdItems);\n  }\n  cancelChanges() {\n    this.reset();\n    this.data = this.originalData;\n    this.originalData = cloneData(this.originalData);\n    super.next(this.data);\n  }\n  assignValues(target, source) {\n    Object.assign(target, source);\n  }\n  reset() {\n    this.data = [];\n    this.deletedItems = 0;\n    this.updatedItems = [];\n    this.createdItems = new User();\n  }\n  deleteUser(action = '', data) {\n    const url = `${environment.apiUrl}${this.url}/${action}/${data}`;\n    return this.http.get(url);\n  }\n  UpdateUser(data, userId) {\n    data.userId = userId;\n    const url = `${environment.apiUrl}${this.url}/Update`;\n    return this.http.post(url, data);\n  }\n  CreateUser(action = '', data) {\n    const url = `${environment.apiUrl}${this.url}/${action}`;\n    return this.http.post(url, data).pipe(map(res => res));\n  }\n  fetch(action = '', data) {\n    return this.http.jsonp(`${environment.apiUrl}${action}?${this.serializeModels(data)}`, 'callback').pipe(map(res => res));\n  }\n  serializeModels(data) {\n    return data ? `&models=${JSON.stringify(data)}` : '';\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","map","User","environment","CREATE_ACTION","UPDATE_ACTION","DELETE_ACTION","itemIndex","item","data","idx","length","userId","cloneData","Object","assign","UserService","constructor","http","url","originalData","updatedItems","getUser","get","apiUrl","read","next","fetch","subscribe","create","unshift","createdItems","update","isNew","index","splice","push","remove","hasChanges","Boolean","deletedItems","cancelChanges","reset","assignValues","target","source","deleteUser","action","UpdateUser","post","CreateUser","pipe","res","jsonp","serializeModels","JSON","stringify","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Internship\\FoodShopUI\\src\\app\\services\\user.service.ts"],"sourcesContent":["// search.service.ts\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, catchError, map, of, zip } from 'rxjs';\r\nimport { User } from '../models/User';\r\nimport { environment } from 'src/environments/environment';\r\n\r\nconst CREATE_ACTION = 'Create';\r\nconst UPDATE_ACTION = 'Update';\r\nconst DELETE_ACTION = 'Delete';\r\n\r\nconst itemIndex = (item: User, data: User[]): number => {\r\n    for (let idx = 0; idx < data.length; idx++) {\r\n        if (data[idx].userId === item.userId) {\r\n            return idx;\r\n        }\r\n    }\r\n\r\n    return -1;\r\n};\r\n\r\nconst cloneData = (data: User[]) => data.map(item => Object.assign({}, item));\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService extends BehaviorSubject<unknown[]> {\r\n    public url = \"Users\"\r\n    private data: User[] = [];\r\n    private originalData: User[] = [];\r\n    private createdItems!: User;\r\n    private updatedItems: User[] = [];\r\n    private deletedItems!: number;\r\n    constructor(private http : HttpClient) {\r\n        super([]);\r\n    }\r\n\r\n    getUser() : Observable<User[]> {\r\n        return this.http.get<User[]>(`${environment.apiUrl}${this.url}`)\r\n    }\r\n    public read(): void {\r\n        if (this.data.length) {\r\n            return super.next(this.data);\r\n        }\r\n\r\n        this.fetch()\r\n            .subscribe(data => {\r\n                this.data = data;\r\n                this.originalData = cloneData(data);\r\n                super.next(data);\r\n            });\r\n    }\r\n\r\n    public create(item: User): void {\r\n        this.data.unshift(item);\r\n        this.createdItems = item;\r\n\r\n        super.next(this.data);\r\n    }\r\n\r\n    public update(item: User): void {\r\n        if (!this.isNew(item)) {\r\n            const index = itemIndex(item, this.updatedItems);\r\n            if (index !== -1) {\r\n                this.updatedItems.splice(index, 1, item);\r\n            } else {\r\n                this.updatedItems.push(item);\r\n            }\r\n        } \r\n    }\r\n\r\n    public remove(item: User): void {\r\n        let index = itemIndex(item, this.data);\r\n        this.data.splice(index, 1);\r\n\r\n        index = itemIndex(item, this.updatedItems);\r\n        if (index >= 0) {\r\n            this.updatedItems.splice(index, 1);\r\n        }\r\n\r\n        super.next(this.data);\r\n    }\r\n\r\n    public isNew(item: User): boolean {\r\n        return !item.userId;\r\n    }\r\n\r\n    public hasChanges(): boolean {\r\n        return Boolean(this.deletedItems || this.updatedItems.length || this.createdItems);\r\n    }\r\n\r\n    public cancelChanges(): void {\r\n        this.reset();\r\n\r\n        this.data = this.originalData;\r\n        this.originalData = cloneData(this.originalData);\r\n        super.next(this.data);\r\n    }\r\n\r\n    public assignValues(target: object, source: object): void {\r\n        Object.assign(target, source);\r\n    }   \r\n\r\n    private reset() {\r\n        this.data = [];\r\n        this.deletedItems = 0;\r\n        this.updatedItems = [];\r\n        this.createdItems = new User();\r\n    }\r\n\r\n    deleteUser(action = '', data?: number) {\r\n        const url = `${environment.apiUrl}${this.url}/${action}/${data}`;\r\n\r\n        return this.http.get(url)\r\n    }\r\n\r\n    UpdateUser(data: User, userId : number) {\r\n        data.userId = userId;\r\n        const url = `${environment.apiUrl}${this.url}/Update`;\r\n        return this.http.post(url, data);\r\n    }\r\n\r\n    CreateUser(action = '', data?: User): Observable<User> {\r\n        const url = `${environment.apiUrl}${this.url}/${action}`;\r\n\r\n        return this.http.post(url, data).pipe(map(res => <User>res));\r\n    }\r\n\r\n    private fetch(action = '', data?: User[]): Observable<User[]> {\r\n        return this.http\r\n            .jsonp(`${environment.apiUrl}${action}?${this.serializeModels(data)}`, 'callback')\r\n            .pipe(map(res => <User[]>res));\r\n    }\r\n\r\n    private serializeModels(data?: User[]): string {\r\n        return data ? `&models=${JSON.stringify(data)}` : '';\r\n    }  \r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}