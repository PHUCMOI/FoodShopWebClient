{"ast":null,"code":"import { isString, isDate } from './utils';\n/**\n * @hidden\n * Creates a single arity function which wraps the value based on the provided predicate.\n * @example\n * ```\n * wrapIf(() => ignoreCase) `tolower(${field})`\n * //ignoreCase=true -> tolower(${field})`\n * //ignoreCase=false -> ${field}`\n * ```\n */\nexport const wrapIf = predicate => (str, ...args) => predicate() ? `${str[0]}${args[0]}${str[1]}` : args[0];\n/**\n * @hidden\n */\nexport const toUTC = date => new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n/**\n * @hidden\n */\nexport const quote = ({\n  field,\n  value,\n  ignoreCase,\n  operator\n}) => ({\n  value: `'${value.replace(/'/g, \"''\")}'`,\n  field,\n  ignoreCase,\n  operator\n});\n/**\n * @hidden\n */\nexport const encodeValue = ({\n  field,\n  value,\n  ignoreCase,\n  operator\n}) => ({\n  value: `${encodeURIComponent(value)}`,\n  field,\n  ignoreCase,\n  operator\n});\n/**\n * @hidden\n */\nexport const toLower = ({\n  field,\n  value,\n  ignoreCase,\n  operator\n}) => ({\n  field: wrapIf(() => ignoreCase)`tolower(${field})`,\n  value,\n  ignoreCase,\n  operator\n});\n/**\n * @hidden\n */\nexport const normalizeField = ({\n  field,\n  value,\n  ignoreCase,\n  operator\n}) => ({\n  value,\n  field: field.replace(/\\./g, \"/\"),\n  ignoreCase,\n  operator\n});\n/**\n * @hidden\n */\nexport const isStringValue = x => isString(x.value);\n/**\n * @hidden\n */\nexport const isDateValue = x => isDate(x.value);\n/**\n * @hidden\n */\nexport const serializeFilters = (map, join) => filter => {\n  const brackets = wrapIf(() => filter.filters.length > 1);\n  return brackets`(${filter.filters.map(map).join(join(filter))})`;\n};","map":{"version":3,"names":["isString","isDate","wrapIf","predicate","str","args","toUTC","date","Date","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","quote","field","value","ignoreCase","operator","replace","encodeValue","encodeURIComponent","toLower","normalizeField","isStringValue","x","isDateValue","serializeFilters","map","join","filter","brackets","filters","length"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-data-query/dist/es2015/filter-serialization.common.js"],"sourcesContent":["import { isString, isDate } from './utils';\n/**\n * @hidden\n * Creates a single arity function which wraps the value based on the provided predicate.\n * @example\n * ```\n * wrapIf(() => ignoreCase) `tolower(${field})`\n * //ignoreCase=true -> tolower(${field})`\n * //ignoreCase=false -> ${field}`\n * ```\n */\nexport const wrapIf = predicate => (str, ...args) => predicate() ? `${str[0]}${args[0]}${str[1]}` : args[0];\n/**\n * @hidden\n */\nexport const toUTC = (date) => new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n/**\n * @hidden\n */\nexport const quote = ({ field, value, ignoreCase, operator }) => ({\n    value: `'${value.replace(/'/g, \"''\")}'`,\n    field,\n    ignoreCase,\n    operator\n});\n/**\n * @hidden\n */\nexport const encodeValue = ({ field, value, ignoreCase, operator }) => ({\n    value: `${encodeURIComponent(value)}`,\n    field,\n    ignoreCase,\n    operator\n});\n/**\n * @hidden\n */\nexport const toLower = ({ field, value, ignoreCase, operator }) => ({\n    field: wrapIf(() => ignoreCase) `tolower(${field})`,\n    value,\n    ignoreCase,\n    operator\n});\n/**\n * @hidden\n */\nexport const normalizeField = ({ field, value, ignoreCase, operator }) => ({\n    value,\n    field: field.replace(/\\./g, \"/\"),\n    ignoreCase,\n    operator\n});\n/**\n * @hidden\n */\nexport const isStringValue = x => isString(x.value);\n/**\n * @hidden\n */\nexport const isDateValue = x => isDate(x.value);\n/**\n * @hidden\n */\nexport const serializeFilters = (map, join) => (filter) => {\n    const brackets = wrapIf(() => filter.filters.length > 1);\n    return brackets `(${filter.filters\n        .map(map)\n        .join(join(filter))})`;\n};\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,SAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,MAAM,GAAGC,SAAS,IAAI,CAACC,GAAG,EAAE,GAAGC,IAAI,KAAKF,SAAS,CAAC,CAAC,GAAI,GAAEC,GAAG,CAAC,CAAC,CAAE,GAAEC,IAAI,CAAC,CAAC,CAAE,GAAED,GAAG,CAAC,CAAC,CAAE,EAAC,GAAGC,IAAI,CAAC,CAAC,CAAC;AAC3G;AACA;AACA;AACA,OAAO,MAAMC,KAAK,GAAIC,IAAI,IAAK,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,CAACF,IAAI,CAACG,WAAW,CAAC,CAAC,EAAEH,IAAI,CAACI,QAAQ,CAAC,CAAC,EAAEJ,IAAI,CAACK,OAAO,CAAC,CAAC,EAAEL,IAAI,CAACM,QAAQ,CAAC,CAAC,EAAEN,IAAI,CAACO,UAAU,CAAC,CAAC,EAAEP,IAAI,CAACQ,UAAU,CAAC,CAAC,EAAER,IAAI,CAACS,eAAe,CAAC,CAAC,CAAC,CAAC;AACrL;AACA;AACA;AACA,OAAO,MAAMC,KAAK,GAAGA,CAAC;EAAEC,KAAK;EAAEC,KAAK;EAAEC,UAAU;EAAEC;AAAS,CAAC,MAAM;EAC9DF,KAAK,EAAG,IAAGA,KAAK,CAACG,OAAO,CAAC,IAAI,EAAE,IAAI,CAAE,GAAE;EACvCJ,KAAK;EACLE,UAAU;EACVC;AACJ,CAAC,CAAC;AACF;AACA;AACA;AACA,OAAO,MAAME,WAAW,GAAGA,CAAC;EAAEL,KAAK;EAAEC,KAAK;EAAEC,UAAU;EAAEC;AAAS,CAAC,MAAM;EACpEF,KAAK,EAAG,GAAEK,kBAAkB,CAACL,KAAK,CAAE,EAAC;EACrCD,KAAK;EACLE,UAAU;EACVC;AACJ,CAAC,CAAC;AACF;AACA;AACA;AACA,OAAO,MAAMI,OAAO,GAAGA,CAAC;EAAEP,KAAK;EAAEC,KAAK;EAAEC,UAAU;EAAEC;AAAS,CAAC,MAAM;EAChEH,KAAK,EAAEhB,MAAM,CAAC,MAAMkB,UAAU,CAAG,WAAUF,KAAM,GAAE;EACnDC,KAAK;EACLC,UAAU;EACVC;AACJ,CAAC,CAAC;AACF;AACA;AACA;AACA,OAAO,MAAMK,cAAc,GAAGA,CAAC;EAAER,KAAK;EAAEC,KAAK;EAAEC,UAAU;EAAEC;AAAS,CAAC,MAAM;EACvEF,KAAK;EACLD,KAAK,EAAEA,KAAK,CAACI,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;EAChCF,UAAU;EACVC;AACJ,CAAC,CAAC;AACF;AACA;AACA;AACA,OAAO,MAAMM,aAAa,GAAGC,CAAC,IAAI5B,QAAQ,CAAC4B,CAAC,CAACT,KAAK,CAAC;AACnD;AACA;AACA;AACA,OAAO,MAAMU,WAAW,GAAGD,CAAC,IAAI3B,MAAM,CAAC2B,CAAC,CAACT,KAAK,CAAC;AAC/C;AACA;AACA;AACA,OAAO,MAAMW,gBAAgB,GAAGA,CAACC,GAAG,EAAEC,IAAI,KAAMC,MAAM,IAAK;EACvD,MAAMC,QAAQ,GAAGhC,MAAM,CAAC,MAAM+B,MAAM,CAACE,OAAO,CAACC,MAAM,GAAG,CAAC,CAAC;EACxD,OAAOF,QAAU,IAAGD,MAAM,CAACE,OAAO,CAC7BJ,GAAG,CAACA,GAAG,CAAC,CACRC,IAAI,CAACA,IAAI,CAACC,MAAM,CAAC,CAAE,GAAE;AAC9B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}