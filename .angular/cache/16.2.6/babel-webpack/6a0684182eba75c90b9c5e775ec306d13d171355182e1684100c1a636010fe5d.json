{"ast":null,"code":"import { isPresent } from '../utils';\nimport { compose } from '../funcs';\n// tslint:enable:max-line-length\nconst set = (field, target, value) => {\n  target[field] = value;\n  return target;\n};\nconst toCamelCase = str => str.replace(/(^[A-Z])/g, (_, g1) => g1.toLowerCase());\nconst prop = fieldName => obj => {\n  const value = obj[fieldName];\n  if (isPresent(value)) {\n    return value;\n  }\n  return obj[toCamelCase(fieldName)];\n};\nconst member = prop(\"Member\");\nconst aggregateMethodName = prop(\"AggregateMethodName\");\nconst value = prop(\"Value\");\nconst convert = mapper => values => Object.keys(values).reduce(mapper.bind(null, values), {});\nconst translateAggregate = convert((source, acc, field) => set(field.toLowerCase(), acc, source[field]));\nconst translateAggregates = convert((source, acc, field) => set(field, acc, translateAggregate(source[field])));\nconst valueOrDefault = (value, defaultValue) => isPresent(value) ? value : defaultValue;\nconst normalizeGroup = group => ({\n  aggregates: group.Aggregates || group.aggregates,\n  field: group.Member || group.member || group.field,\n  hasSubgroups: group.HasSubgroups || group.hasSubgroups || false,\n  items: group.Items || group.items,\n  value: valueOrDefault(group.Key, valueOrDefault(group.key, group.value))\n});\nconst translateGroup = compose(({\n  field,\n  hasSubgroups,\n  value,\n  aggregates,\n  items\n}) => ({\n  aggregates: translateAggregates(aggregates),\n  field,\n  items: hasSubgroups ? items.map(translateGroup) : items,\n  value\n}), normalizeGroup);\n// tslint:disable:max-line-length\n/**\n * Converts the grouped result, which is returned into the `Data` field of the UI for ASP.NET MVC `ToDataSourceResult` method, to a comparable format.\n * @param data - The value of the `Data` field of the response.\n * @returns {GroupResult[]} - The converted result.\n */\nexport const translateDataSourceResultGroups = data => data.map(translateGroup);\n/**\n * Converts the `AggregateResults` field content, which is returned by the UI for ASP.NET MVC `ToDataSourceResult` method, to a comparable format.\n * @param data - The value of the `AggregateResults` field of the response.\n * @returns {AggregateResult} - The converted result.\n */\n// tslint:enable:max-line-length\nexport const translateAggregateResults = data => (data || []).reduce((acc, x) => set(member(x), acc, set(aggregateMethodName(x).toLowerCase(), acc[member(x)] || {}, value(x))), {});","map":{"version":3,"names":["isPresent","compose","set","field","target","value","toCamelCase","str","replace","_","g1","toLowerCase","prop","fieldName","obj","member","aggregateMethodName","convert","mapper","values","Object","keys","reduce","bind","translateAggregate","source","acc","translateAggregates","valueOrDefault","defaultValue","normalizeGroup","group","aggregates","Aggregates","Member","hasSubgroups","HasSubgroups","items","Items","Key","key","translateGroup","map","translateDataSourceResultGroups","data","translateAggregateResults","x"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-data-query/dist/es2015/mvc/deserialization.js"],"sourcesContent":["import { isPresent } from '../utils';\nimport { compose } from '../funcs';\n// tslint:enable:max-line-length\nconst set = (field, target, value) => {\n    target[field] = value;\n    return target;\n};\nconst toCamelCase = str => str.replace(/(^[A-Z])/g, (_, g1) => g1.toLowerCase());\nconst prop = (fieldName) => (obj) => {\n    const value = obj[fieldName];\n    if (isPresent(value)) {\n        return value;\n    }\n    return obj[toCamelCase(fieldName)];\n};\nconst member = prop(\"Member\");\nconst aggregateMethodName = prop(\"AggregateMethodName\");\nconst value = prop(\"Value\");\nconst convert = mapper => values => Object.keys(values).reduce(mapper.bind(null, values), {});\nconst translateAggregate = convert((source, acc, field) => set(field.toLowerCase(), acc, source[field]));\nconst translateAggregates = convert((source, acc, field) => set(field, acc, translateAggregate(source[field])));\nconst valueOrDefault = (value, defaultValue) => isPresent(value) ? value : defaultValue;\nconst normalizeGroup = group => ({\n    aggregates: group.Aggregates || group.aggregates,\n    field: group.Member || group.member || group.field,\n    hasSubgroups: group.HasSubgroups || group.hasSubgroups || false,\n    items: group.Items || group.items,\n    value: valueOrDefault(group.Key, valueOrDefault(group.key, group.value))\n});\nconst translateGroup = compose(({ field, hasSubgroups, value, aggregates, items }) => ({\n    aggregates: translateAggregates(aggregates),\n    field,\n    items: hasSubgroups ? items.map(translateGroup) : items,\n    value\n}), normalizeGroup);\n// tslint:disable:max-line-length\n/**\n * Converts the grouped result, which is returned into the `Data` field of the UI for ASP.NET MVC `ToDataSourceResult` method, to a comparable format.\n * @param data - The value of the `Data` field of the response.\n * @returns {GroupResult[]} - The converted result.\n */\nexport const translateDataSourceResultGroups = (data) => data.map(translateGroup);\n/**\n * Converts the `AggregateResults` field content, which is returned by the UI for ASP.NET MVC `ToDataSourceResult` method, to a comparable format.\n * @param data - The value of the `AggregateResults` field of the response.\n * @returns {AggregateResult} - The converted result.\n */\n// tslint:enable:max-line-length\nexport const translateAggregateResults = (data) => ((data || []).reduce((acc, x) => set(member(x), acc, set(aggregateMethodName(x).toLowerCase(), acc[member(x)] || {}, value(x))), {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}