{"ast":null,"code":"const fromCharCode = String.fromCharCode;\nexport const BOM = '\\xfe\\xff';\n\n// Encodes a string as UTF-8\nexport function encodeUTF8(input) {\n  let output = \"\";\n  for (let i = 0; i < input.length; i++) {\n    let code = input.charCodeAt(i);\n    if (0xD800 <= code && code <= 0xDBFF) {\n      const hi = code;\n      const low = input.charCodeAt(++i);\n      if (!isNaN(low)) {\n        // Combine high and low surrogate\n        // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\n        code = (hi - 0xD800) * 0x400 + (low - 0xDC00) + 0x10000;\n      }\n    }\n    if (code < 0x80) {\n      // One byte\n      output += fromCharCode(code);\n    } else if (code < 0x800) {\n      // Two bytes\n      output += fromCharCode(0xC0 | code >>> 6);\n      output += fromCharCode(0x80 | code & 0x3f);\n    } else if (code < 0x10000) {\n      // Three bytes\n      output += fromCharCode(0xE0 | code >>> 12);\n      output += fromCharCode(0x80 | code >>> 6 & 0x3f);\n      output += fromCharCode(0x80 | code & 0x3f);\n    } else if (code < 0x10FFFF) {\n      // Four bytes\n      output += fromCharCode(0xF0 | code >>> 18);\n      output += fromCharCode(0x80 | code >>> 12 & 0x3f);\n      output += fromCharCode(0x80 | code >>> 6 & 0x3f);\n      output += fromCharCode(0x80 | code & 0x3f);\n    }\n  }\n  return output;\n}\nfunction encodeUnit(codeUnit) {\n  return fromCharCode(codeUnit >> 8) + fromCharCode(codeUnit & 0x00ff);\n}\n\n// Encodes a string as UTF-16 big-endian\nexport function encodeUTF16BE(input) {\n  let output = '';\n  for (let i = 0; i < input.length; i++) {\n    const c = input.charCodeAt(i);\n    if (c < 0xFFFF) {\n      output += encodeUnit(c);\n    } else {\n      const lead = (c - 0x10000 >> 10) + 0xD800;\n      const trail = (c - 0x10000 & 0x3FF) + 0xDC00;\n      output += encodeUnit(lead);\n      output += encodeUnit(trail);\n    }\n  }\n  return output;\n}","map":{"version":3,"names":["fromCharCode","String","BOM","encodeUTF8","input","output","i","length","code","charCodeAt","hi","low","isNaN","encodeUnit","codeUnit","encodeUTF16BE","c","lead","trail"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-drawing/dist/es2015/util/encode-utf.js"],"sourcesContent":["const fromCharCode = String.fromCharCode;\n\nexport const BOM = '\\xfe\\xff';\n\n// Encodes a string as UTF-8\nexport function encodeUTF8(input) {\n    let output = \"\";\n\n    for (let i = 0; i < input.length; i++) {\n        let code = input.charCodeAt(i);\n\n        if (0xD800 <= code && code <= 0xDBFF) {\n            const hi = code;\n            const low = input.charCodeAt(++i);\n\n            if (!isNaN(low)) {\n                // Combine high and low surrogate\n                // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\n                code = (hi - 0xD800) * 0x400 +\n                       (low - 0xDC00) + 0x10000;\n            }\n        }\n\n        if (code < 0x80) {\n            // One byte\n            output += fromCharCode(code);\n        } else if (code < 0x800) {\n            // Two bytes\n            output += fromCharCode(0xC0 | (code >>> 6));\n            output += fromCharCode(0x80 | (code & 0x3f));\n        } else if (code < 0x10000) {\n            // Three bytes\n            output += fromCharCode(0xE0 | (code >>> 12));\n            output += fromCharCode(0x80 | (code >>> 6 & 0x3f));\n            output += fromCharCode(0x80 | (code & 0x3f));\n        } else if (code < 0x10FFFF) {\n            // Four bytes\n            output += fromCharCode(0xF0 | (code >>> 18));\n            output += fromCharCode(0x80 | (code >>> 12 & 0x3f));\n            output += fromCharCode(0x80 | (code >>> 6 & 0x3f));\n            output += fromCharCode(0x80 | (code & 0x3f));\n        }\n    }\n\n    return output;\n}\n\nfunction encodeUnit(codeUnit) {\n    return fromCharCode(codeUnit >> 8) + fromCharCode(codeUnit & 0x00ff);\n}\n\n// Encodes a string as UTF-16 big-endian\nexport function encodeUTF16BE(input) {\n    let output = '';\n\n    for (let i = 0; i < input.length; i++) {\n        const c = input.charCodeAt(i);\n\n        if (c < 0xFFFF) {\n            output += encodeUnit(c);\n        } else {\n            const lead = ((c - 0x10000) >> 10) + 0xD800;\n            const trail = ((c - 0x10000) & 0x3FF) + 0xDC00;\n            output += encodeUnit(lead);\n            output += encodeUnit(trail);\n        }\n    }\n\n    return output;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}