{"ast":null,"code":"import { defined } from '../util';\nconst GRADIENT = \"Gradient\";\nconst paintable = TBase => class extends TBase {\n  fill(color, opacity) {\n    const options = this.options;\n    if (defined(color)) {\n      if (color && color.nodeType !== GRADIENT) {\n        const newFill = {\n          color: color\n        };\n        if (defined(opacity)) {\n          newFill.opacity = opacity;\n        }\n        options.set(\"fill\", newFill);\n      } else {\n        options.set(\"fill\", color);\n      }\n      return this;\n    }\n    return options.get(\"fill\");\n  }\n  stroke(color, width, opacity) {\n    if (defined(color)) {\n      this.options.set(\"stroke.color\", color);\n      if (defined(width)) {\n        this.options.set(\"stroke.width\", width);\n      }\n      if (defined(opacity)) {\n        this.options.set(\"stroke.opacity\", opacity);\n      }\n      return this;\n    }\n    return this.options.get(\"stroke\");\n  }\n};\nexport default paintable;","map":{"version":3,"names":["defined","GRADIENT","paintable","TBase","fill","color","opacity","options","nodeType","newFill","set","get","stroke","width"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-drawing/dist/es2015/mixins/paintable.js"],"sourcesContent":["import { defined } from '../util';\n\nconst GRADIENT = \"Gradient\";\n\nconst paintable = TBase => (\n    class extends TBase {\n        fill(color, opacity) {\n            const options = this.options;\n\n            if (defined(color)) {\n                if (color && color.nodeType !== GRADIENT) {\n                    const newFill = {\n                        color: color\n                    };\n                    if (defined(opacity)) {\n                        newFill.opacity = opacity;\n                    }\n                    options.set(\"fill\", newFill);\n                } else {\n                    options.set(\"fill\", color);\n                }\n\n                return this;\n            }\n\n            return options.get(\"fill\");\n        }\n\n        stroke(color, width, opacity) {\n            if (defined(color)) {\n                this.options.set(\"stroke.color\", color);\n\n                if (defined(width)) {\n                    this.options.set(\"stroke.width\", width);\n                }\n\n                if (defined(opacity)) {\n                    this.options.set(\"stroke.opacity\", opacity);\n                }\n\n                return this;\n            }\n\n            return this.options.get(\"stroke\");\n        }\n    }\n);\n\nexport default paintable;\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,SAAS;AAEjC,MAAMC,QAAQ,GAAG,UAAU;AAE3B,MAAMC,SAAS,GAAGC,KAAK,IACnB,cAAcA,KAAK,CAAC;EAChBC,IAAIA,CAACC,KAAK,EAAEC,OAAO,EAAE;IACjB,MAAMC,OAAO,GAAG,IAAI,CAACA,OAAO;IAE5B,IAAIP,OAAO,CAACK,KAAK,CAAC,EAAE;MAChB,IAAIA,KAAK,IAAIA,KAAK,CAACG,QAAQ,KAAKP,QAAQ,EAAE;QACtC,MAAMQ,OAAO,GAAG;UACZJ,KAAK,EAAEA;QACX,CAAC;QACD,IAAIL,OAAO,CAACM,OAAO,CAAC,EAAE;UAClBG,OAAO,CAACH,OAAO,GAAGA,OAAO;QAC7B;QACAC,OAAO,CAACG,GAAG,CAAC,MAAM,EAAED,OAAO,CAAC;MAChC,CAAC,MAAM;QACHF,OAAO,CAACG,GAAG,CAAC,MAAM,EAAEL,KAAK,CAAC;MAC9B;MAEA,OAAO,IAAI;IACf;IAEA,OAAOE,OAAO,CAACI,GAAG,CAAC,MAAM,CAAC;EAC9B;EAEAC,MAAMA,CAACP,KAAK,EAAEQ,KAAK,EAAEP,OAAO,EAAE;IAC1B,IAAIN,OAAO,CAACK,KAAK,CAAC,EAAE;MAChB,IAAI,CAACE,OAAO,CAACG,GAAG,CAAC,cAAc,EAAEL,KAAK,CAAC;MAEvC,IAAIL,OAAO,CAACa,KAAK,CAAC,EAAE;QAChB,IAAI,CAACN,OAAO,CAACG,GAAG,CAAC,cAAc,EAAEG,KAAK,CAAC;MAC3C;MAEA,IAAIb,OAAO,CAACM,OAAO,CAAC,EAAE;QAClB,IAAI,CAACC,OAAO,CAACG,GAAG,CAAC,gBAAgB,EAAEJ,OAAO,CAAC;MAC/C;MAEA,OAAO,IAAI;IACf;IAEA,OAAO,IAAI,CAACC,OAAO,CAACI,GAAG,CAAC,QAAQ,CAAC;EACrC;AACJ,CACH;AAED,eAAeT,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}