{"ast":null,"code":"import CategoricalChart from '../categorical-chart';\nimport ClusterLayout from '../layout/cluster-layout';\nimport Candlestick from './candlestick';\nimport ClipAnimationMixin from '../mixins/clip-animation-mixin';\nimport { CANDLESTICK } from '../constants';\nimport areNumbers from '../utils/are-numbers';\nimport { MIN_VALUE, MAX_VALUE } from '../../common/constants';\nimport { deepExtend, isFunction } from '../../common';\nclass CandlestickChart extends CategoricalChart {\n  reflowCategories(categorySlots) {\n    const children = this.children;\n    const childrenLength = children.length;\n    for (let i = 0; i < childrenLength; i++) {\n      children[i].reflow(categorySlots[i]);\n    }\n  }\n  addValue(data, fields) {\n    const {\n      categoryIx,\n      category,\n      series,\n      seriesIx\n    } = fields;\n    const {\n      children,\n      options\n    } = this;\n    const value = data.valueFields;\n    const valueParts = this.splitValue(value);\n    const hasValue = areNumbers(valueParts);\n    const dataItem = series.data[categoryIx];\n    let categoryPoints = this.categoryPoints[categoryIx];\n    let point;\n    if (!categoryPoints) {\n      this.categoryPoints[categoryIx] = categoryPoints = [];\n    }\n    if (hasValue) {\n      point = this.createPoint(data, fields);\n    }\n    let cluster = children[categoryIx];\n    if (!cluster) {\n      cluster = new ClusterLayout({\n        vertical: options.invertAxes,\n        gap: options.gap,\n        spacing: options.spacing,\n        rtl: !options.invertAxes && (this.chartService || {}).rtl\n      });\n      this.append(cluster);\n    }\n    if (point) {\n      this.updateRange(value, fields);\n      cluster.append(point);\n      point.categoryIx = categoryIx;\n      point.category = category;\n      point.series = series;\n      point.seriesIx = seriesIx;\n      point.owner = this;\n      point.dataItem = dataItem;\n      point.noteText = data.fields.noteText;\n    }\n    this.points.push(point);\n    categoryPoints.push(point);\n  }\n  pointType() {\n    return Candlestick;\n  }\n  createPoint(data, fields) {\n    const {\n      series\n    } = fields;\n    const pointType = this.pointType();\n    const value = data.valueFields;\n    let pointOptions = deepExtend({}, series);\n    let color = data.fields.color || series.color;\n    pointOptions = this.evalPointOptions(pointOptions, value, fields);\n    if (series.type === CANDLESTICK) {\n      if (value.open > value.close) {\n        color = data.fields.downColor || series.downColor || series.color;\n      }\n    }\n    if (isFunction(series.color)) {\n      color = pointOptions.color;\n    }\n    pointOptions.vertical = !this.options.invertAxes;\n    const point = new pointType(value, pointOptions);\n    point.color = color;\n    return point;\n  }\n  splitValue(value) {\n    return [value.low, value.open, value.close, value.high];\n  }\n  updateRange(value, fields) {\n    const axisName = fields.series.axis;\n    const parts = this.splitValue(value);\n    let axisRange = this.valueAxisRanges[axisName];\n    axisRange = this.valueAxisRanges[axisName] = axisRange || {\n      min: MAX_VALUE,\n      max: MIN_VALUE\n    };\n    axisRange = this.valueAxisRanges[axisName] = {\n      min: Math.min.apply(Math, parts.concat([axisRange.min])),\n      max: Math.max.apply(Math, parts.concat([axisRange.max]))\n    };\n  }\n  formatPointValue(point, format) {\n    const value = point.value;\n    return this.chartService.format.auto(format, value.open, value.high, value.low, value.close, point.category);\n  }\n  animationPoints() {\n    return this.points;\n  }\n}\ndeepExtend(CandlestickChart.prototype, ClipAnimationMixin);\nexport default CandlestickChart;","map":{"version":3,"names":["CategoricalChart","ClusterLayout","Candlestick","ClipAnimationMixin","CANDLESTICK","areNumbers","MIN_VALUE","MAX_VALUE","deepExtend","isFunction","CandlestickChart","reflowCategories","categorySlots","children","childrenLength","length","i","reflow","addValue","data","fields","categoryIx","category","series","seriesIx","options","value","valueFields","valueParts","splitValue","hasValue","dataItem","categoryPoints","point","createPoint","cluster","vertical","invertAxes","gap","spacing","rtl","chartService","append","updateRange","owner","noteText","points","push","pointType","pointOptions","color","evalPointOptions","type","open","close","downColor","low","high","axisName","axis","parts","axisRange","valueAxisRanges","min","max","Math","apply","concat","formatPointValue","format","auto","animationPoints","prototype"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-charts/dist/es2015/chart/candlestick-chart/candlestick-chart.js"],"sourcesContent":["import CategoricalChart from '../categorical-chart';\nimport ClusterLayout from '../layout/cluster-layout';\nimport Candlestick from './candlestick';\n\nimport ClipAnimationMixin from '../mixins/clip-animation-mixin';\nimport { CANDLESTICK } from '../constants';\nimport areNumbers from '../utils/are-numbers';\n\nimport { MIN_VALUE, MAX_VALUE } from '../../common/constants';\nimport { deepExtend, isFunction } from '../../common';\n\nclass CandlestickChart extends CategoricalChart {\n\n    reflowCategories(categorySlots) {\n        const children = this.children;\n        const childrenLength = children.length;\n\n        for (let i = 0; i < childrenLength; i++) {\n            children[i].reflow(categorySlots[i]);\n        }\n    }\n\n    addValue(data, fields) {\n        const { categoryIx, category, series, seriesIx } = fields;\n        const { children, options } = this;\n        const value = data.valueFields;\n        const valueParts = this.splitValue(value);\n        const hasValue = areNumbers(valueParts);\n        const dataItem = series.data[categoryIx];\n        let categoryPoints = this.categoryPoints[categoryIx];\n        let point;\n\n        if (!categoryPoints) {\n            this.categoryPoints[categoryIx] = categoryPoints = [];\n        }\n\n        if (hasValue) {\n            point = this.createPoint(data, fields);\n        }\n\n        let cluster = children[categoryIx];\n        if (!cluster) {\n            cluster = new ClusterLayout({\n                vertical: options.invertAxes,\n                gap: options.gap,\n                spacing: options.spacing,\n                rtl: !options.invertAxes && (this.chartService || {}).rtl\n            });\n            this.append(cluster);\n        }\n\n        if (point) {\n            this.updateRange(value, fields);\n\n            cluster.append(point);\n\n            point.categoryIx = categoryIx;\n            point.category = category;\n            point.series = series;\n            point.seriesIx = seriesIx;\n            point.owner = this;\n            point.dataItem = dataItem;\n            point.noteText = data.fields.noteText;\n        }\n\n        this.points.push(point);\n        categoryPoints.push(point);\n    }\n\n    pointType() {\n        return Candlestick;\n    }\n\n    createPoint(data, fields) {\n        const { series } = fields;\n        const pointType = this.pointType();\n        const value = data.valueFields;\n        let pointOptions = deepExtend({}, series);\n        let color = data.fields.color || series.color;\n\n        pointOptions = this.evalPointOptions(pointOptions, value, fields);\n\n        if (series.type === CANDLESTICK) {\n            if (value.open > value.close) {\n                color = data.fields.downColor || series.downColor || series.color;\n            }\n        }\n\n        if (isFunction(series.color)) {\n            color = pointOptions.color;\n        }\n\n        pointOptions.vertical = !this.options.invertAxes;\n\n        const point = new pointType(value, pointOptions);\n        point.color = color;\n\n        return point;\n    }\n\n    splitValue(value) {\n        return [ value.low, value.open, value.close, value.high ];\n    }\n\n    updateRange(value, fields) {\n        const axisName = fields.series.axis;\n        const parts = this.splitValue(value);\n        let axisRange = this.valueAxisRanges[axisName];\n\n        axisRange = this.valueAxisRanges[axisName] =\n            axisRange || { min: MAX_VALUE, max: MIN_VALUE };\n\n        axisRange = this.valueAxisRanges[axisName] = {\n            min: Math.min.apply(Math, parts.concat([ axisRange.min ])),\n            max: Math.max.apply(Math, parts.concat([ axisRange.max ]))\n        };\n    }\n\n    formatPointValue(point, format) {\n        const value = point.value;\n\n        return this.chartService.format.auto(format,\n            value.open, value.high,\n            value.low, value.close, point.category\n        );\n    }\n\n    animationPoints() {\n        return this.points;\n    }\n}\n\ndeepExtend(CandlestickChart.prototype, ClipAnimationMixin);\n\nexport default CandlestickChart;\n"],"mappings":"AAAA,OAAOA,gBAAgB,MAAM,sBAAsB;AACnD,OAAOC,aAAa,MAAM,0BAA0B;AACpD,OAAOC,WAAW,MAAM,eAAe;AAEvC,OAAOC,kBAAkB,MAAM,gCAAgC;AAC/D,SAASC,WAAW,QAAQ,cAAc;AAC1C,OAAOC,UAAU,MAAM,sBAAsB;AAE7C,SAASC,SAAS,EAAEC,SAAS,QAAQ,wBAAwB;AAC7D,SAASC,UAAU,EAAEC,UAAU,QAAQ,cAAc;AAErD,MAAMC,gBAAgB,SAASV,gBAAgB,CAAC;EAE5CW,gBAAgBA,CAACC,aAAa,EAAE;IAC5B,MAAMC,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC9B,MAAMC,cAAc,GAAGD,QAAQ,CAACE,MAAM;IAEtC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,cAAc,EAAEE,CAAC,EAAE,EAAE;MACrCH,QAAQ,CAACG,CAAC,CAAC,CAACC,MAAM,CAACL,aAAa,CAACI,CAAC,CAAC,CAAC;IACxC;EACJ;EAEAE,QAAQA,CAACC,IAAI,EAAEC,MAAM,EAAE;IACnB,MAAM;MAAEC,UAAU;MAAEC,QAAQ;MAAEC,MAAM;MAAEC;IAAS,CAAC,GAAGJ,MAAM;IACzD,MAAM;MAAEP,QAAQ;MAAEY;IAAQ,CAAC,GAAG,IAAI;IAClC,MAAMC,KAAK,GAAGP,IAAI,CAACQ,WAAW;IAC9B,MAAMC,UAAU,GAAG,IAAI,CAACC,UAAU,CAACH,KAAK,CAAC;IACzC,MAAMI,QAAQ,GAAGzB,UAAU,CAACuB,UAAU,CAAC;IACvC,MAAMG,QAAQ,GAAGR,MAAM,CAACJ,IAAI,CAACE,UAAU,CAAC;IACxC,IAAIW,cAAc,GAAG,IAAI,CAACA,cAAc,CAACX,UAAU,CAAC;IACpD,IAAIY,KAAK;IAET,IAAI,CAACD,cAAc,EAAE;MACjB,IAAI,CAACA,cAAc,CAACX,UAAU,CAAC,GAAGW,cAAc,GAAG,EAAE;IACzD;IAEA,IAAIF,QAAQ,EAAE;MACVG,KAAK,GAAG,IAAI,CAACC,WAAW,CAACf,IAAI,EAAEC,MAAM,CAAC;IAC1C;IAEA,IAAIe,OAAO,GAAGtB,QAAQ,CAACQ,UAAU,CAAC;IAClC,IAAI,CAACc,OAAO,EAAE;MACVA,OAAO,GAAG,IAAIlC,aAAa,CAAC;QACxBmC,QAAQ,EAAEX,OAAO,CAACY,UAAU;QAC5BC,GAAG,EAAEb,OAAO,CAACa,GAAG;QAChBC,OAAO,EAAEd,OAAO,CAACc,OAAO;QACxBC,GAAG,EAAE,CAACf,OAAO,CAACY,UAAU,IAAI,CAAC,IAAI,CAACI,YAAY,IAAI,CAAC,CAAC,EAAED;MAC1D,CAAC,CAAC;MACF,IAAI,CAACE,MAAM,CAACP,OAAO,CAAC;IACxB;IAEA,IAAIF,KAAK,EAAE;MACP,IAAI,CAACU,WAAW,CAACjB,KAAK,EAAEN,MAAM,CAAC;MAE/Be,OAAO,CAACO,MAAM,CAACT,KAAK,CAAC;MAErBA,KAAK,CAACZ,UAAU,GAAGA,UAAU;MAC7BY,KAAK,CAACX,QAAQ,GAAGA,QAAQ;MACzBW,KAAK,CAACV,MAAM,GAAGA,MAAM;MACrBU,KAAK,CAACT,QAAQ,GAAGA,QAAQ;MACzBS,KAAK,CAACW,KAAK,GAAG,IAAI;MAClBX,KAAK,CAACF,QAAQ,GAAGA,QAAQ;MACzBE,KAAK,CAACY,QAAQ,GAAG1B,IAAI,CAACC,MAAM,CAACyB,QAAQ;IACzC;IAEA,IAAI,CAACC,MAAM,CAACC,IAAI,CAACd,KAAK,CAAC;IACvBD,cAAc,CAACe,IAAI,CAACd,KAAK,CAAC;EAC9B;EAEAe,SAASA,CAAA,EAAG;IACR,OAAO9C,WAAW;EACtB;EAEAgC,WAAWA,CAACf,IAAI,EAAEC,MAAM,EAAE;IACtB,MAAM;MAAEG;IAAO,CAAC,GAAGH,MAAM;IACzB,MAAM4B,SAAS,GAAG,IAAI,CAACA,SAAS,CAAC,CAAC;IAClC,MAAMtB,KAAK,GAAGP,IAAI,CAACQ,WAAW;IAC9B,IAAIsB,YAAY,GAAGzC,UAAU,CAAC,CAAC,CAAC,EAAEe,MAAM,CAAC;IACzC,IAAI2B,KAAK,GAAG/B,IAAI,CAACC,MAAM,CAAC8B,KAAK,IAAI3B,MAAM,CAAC2B,KAAK;IAE7CD,YAAY,GAAG,IAAI,CAACE,gBAAgB,CAACF,YAAY,EAAEvB,KAAK,EAAEN,MAAM,CAAC;IAEjE,IAAIG,MAAM,CAAC6B,IAAI,KAAKhD,WAAW,EAAE;MAC7B,IAAIsB,KAAK,CAAC2B,IAAI,GAAG3B,KAAK,CAAC4B,KAAK,EAAE;QAC1BJ,KAAK,GAAG/B,IAAI,CAACC,MAAM,CAACmC,SAAS,IAAIhC,MAAM,CAACgC,SAAS,IAAIhC,MAAM,CAAC2B,KAAK;MACrE;IACJ;IAEA,IAAIzC,UAAU,CAACc,MAAM,CAAC2B,KAAK,CAAC,EAAE;MAC1BA,KAAK,GAAGD,YAAY,CAACC,KAAK;IAC9B;IAEAD,YAAY,CAACb,QAAQ,GAAG,CAAC,IAAI,CAACX,OAAO,CAACY,UAAU;IAEhD,MAAMJ,KAAK,GAAG,IAAIe,SAAS,CAACtB,KAAK,EAAEuB,YAAY,CAAC;IAChDhB,KAAK,CAACiB,KAAK,GAAGA,KAAK;IAEnB,OAAOjB,KAAK;EAChB;EAEAJ,UAAUA,CAACH,KAAK,EAAE;IACd,OAAO,CAAEA,KAAK,CAAC8B,GAAG,EAAE9B,KAAK,CAAC2B,IAAI,EAAE3B,KAAK,CAAC4B,KAAK,EAAE5B,KAAK,CAAC+B,IAAI,CAAE;EAC7D;EAEAd,WAAWA,CAACjB,KAAK,EAAEN,MAAM,EAAE;IACvB,MAAMsC,QAAQ,GAAGtC,MAAM,CAACG,MAAM,CAACoC,IAAI;IACnC,MAAMC,KAAK,GAAG,IAAI,CAAC/B,UAAU,CAACH,KAAK,CAAC;IACpC,IAAImC,SAAS,GAAG,IAAI,CAACC,eAAe,CAACJ,QAAQ,CAAC;IAE9CG,SAAS,GAAG,IAAI,CAACC,eAAe,CAACJ,QAAQ,CAAC,GACtCG,SAAS,IAAI;MAAEE,GAAG,EAAExD,SAAS;MAAEyD,GAAG,EAAE1D;IAAU,CAAC;IAEnDuD,SAAS,GAAG,IAAI,CAACC,eAAe,CAACJ,QAAQ,CAAC,GAAG;MACzCK,GAAG,EAAEE,IAAI,CAACF,GAAG,CAACG,KAAK,CAACD,IAAI,EAAEL,KAAK,CAACO,MAAM,CAAC,CAAEN,SAAS,CAACE,GAAG,CAAE,CAAC,CAAC;MAC1DC,GAAG,EAAEC,IAAI,CAACD,GAAG,CAACE,KAAK,CAACD,IAAI,EAAEL,KAAK,CAACO,MAAM,CAAC,CAAEN,SAAS,CAACG,GAAG,CAAE,CAAC;IAC7D,CAAC;EACL;EAEAI,gBAAgBA,CAACnC,KAAK,EAAEoC,MAAM,EAAE;IAC5B,MAAM3C,KAAK,GAAGO,KAAK,CAACP,KAAK;IAEzB,OAAO,IAAI,CAACe,YAAY,CAAC4B,MAAM,CAACC,IAAI,CAACD,MAAM,EACvC3C,KAAK,CAAC2B,IAAI,EAAE3B,KAAK,CAAC+B,IAAI,EACtB/B,KAAK,CAAC8B,GAAG,EAAE9B,KAAK,CAAC4B,KAAK,EAAErB,KAAK,CAACX,QAClC,CAAC;EACL;EAEAiD,eAAeA,CAAA,EAAG;IACd,OAAO,IAAI,CAACzB,MAAM;EACtB;AACJ;AAEAtC,UAAU,CAACE,gBAAgB,CAAC8D,SAAS,EAAErE,kBAAkB,CAAC;AAE1D,eAAeO,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}