{"ast":null,"code":"import { drawing as draw, geometry as geom } from '@progress/kendo-drawing';\nimport { ChartElement, CategoryAxis } from '../../core';\nimport CrosshairTooltip from './crosshair-tooltip';\nimport { BLACK, X, Y } from '../../common/constants';\nimport { deepExtend, setDefaultOptions } from '../../common';\nclass Crosshair extends ChartElement {\n  constructor(chartService, axis, options) {\n    super(options);\n    this.axis = axis;\n    this.stickyMode = axis instanceof CategoryAxis;\n    const tooltipOptions = this.options.tooltip;\n    if (tooltipOptions.visible) {\n      this.tooltip = new CrosshairTooltip(chartService, this, deepExtend({}, tooltipOptions, {\n        stickyMode: this.stickyMode\n      }));\n    }\n  }\n  showAt(point) {\n    this.point = point;\n    this.moveLine();\n    this.line.visible(true);\n    if (this.tooltip) {\n      this.tooltip.showAt(point);\n    }\n  }\n  hide() {\n    this.line.visible(false);\n    if (this.tooltip) {\n      this.tooltip.hide();\n    }\n  }\n  moveLine() {\n    const {\n      axis,\n      point\n    } = this;\n    const vertical = axis.options.vertical;\n    const box = this.getBox();\n    const dim = vertical ? Y : X;\n    const lineStart = new geom.Point(box.x1, box.y1);\n    let lineEnd;\n    if (vertical) {\n      lineEnd = new geom.Point(box.x2, box.y1);\n    } else {\n      lineEnd = new geom.Point(box.x1, box.y2);\n    }\n    if (point) {\n      if (this.stickyMode) {\n        const slot = axis.getSlot(axis.pointCategoryIndex(point));\n        lineStart[dim] = lineEnd[dim] = slot.center()[dim];\n      } else {\n        lineStart[dim] = lineEnd[dim] = point[dim];\n      }\n    }\n    this.box = box;\n    this.line.moveTo(lineStart).lineTo(lineEnd);\n  }\n  getBox() {\n    const axis = this.axis;\n    const axes = axis.pane.axes;\n    const length = axes.length;\n    const vertical = axis.options.vertical;\n    const box = axis.lineBox().clone();\n    const dim = vertical ? X : Y;\n    let axisLineBox;\n    for (let i = 0; i < length; i++) {\n      const currentAxis = axes[i];\n      if (currentAxis.options.vertical !== vertical) {\n        if (!axisLineBox) {\n          axisLineBox = currentAxis.lineBox().clone();\n        } else {\n          axisLineBox.wrap(currentAxis.lineBox());\n        }\n      }\n    }\n    box[dim + 1] = axisLineBox[dim + 1];\n    box[dim + 2] = axisLineBox[dim + 2];\n    return box;\n  }\n  createVisual() {\n    super.createVisual();\n    const options = this.options;\n    this.line = new draw.Path({\n      stroke: {\n        color: options.color,\n        width: options.width,\n        opacity: options.opacity,\n        dashType: options.dashType\n      },\n      visible: false\n    });\n    this.moveLine();\n    this.visual.append(this.line);\n  }\n  destroy() {\n    if (this.tooltip) {\n      this.tooltip.destroy();\n    }\n    super.destroy();\n  }\n}\nsetDefaultOptions(Crosshair, {\n  color: BLACK,\n  width: 2,\n  zIndex: -1,\n  tooltip: {\n    visible: false\n  }\n});\nexport default Crosshair;","map":{"version":3,"names":["drawing","draw","geometry","geom","ChartElement","CategoryAxis","CrosshairTooltip","BLACK","X","Y","deepExtend","setDefaultOptions","Crosshair","constructor","chartService","axis","options","stickyMode","tooltipOptions","tooltip","visible","showAt","point","moveLine","line","hide","vertical","box","getBox","dim","lineStart","Point","x1","y1","lineEnd","x2","y2","slot","getSlot","pointCategoryIndex","center","moveTo","lineTo","axes","pane","length","lineBox","clone","axisLineBox","i","currentAxis","wrap","createVisual","Path","stroke","color","width","opacity","dashType","visual","append","destroy","zIndex"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-charts/dist/es2015/chart/crosshair/crosshair.js"],"sourcesContent":["import { drawing as draw, geometry as geom } from '@progress/kendo-drawing';\n\nimport { ChartElement, CategoryAxis } from '../../core';\nimport CrosshairTooltip from './crosshair-tooltip';\n\nimport { BLACK, X, Y } from '../../common/constants';\nimport { deepExtend, setDefaultOptions } from '../../common';\n\nclass Crosshair extends ChartElement {\n    constructor(chartService, axis, options) {\n        super(options);\n\n        this.axis = axis;\n        this.stickyMode = axis instanceof CategoryAxis;\n\n        const tooltipOptions = this.options.tooltip;\n\n        if (tooltipOptions.visible) {\n            this.tooltip = new CrosshairTooltip(chartService, this,\n                deepExtend({}, tooltipOptions, { stickyMode: this.stickyMode })\n            );\n        }\n    }\n\n    showAt(point) {\n        this.point = point;\n        this.moveLine();\n        this.line.visible(true);\n\n        if (this.tooltip) {\n            this.tooltip.showAt(point);\n        }\n    }\n\n    hide() {\n        this.line.visible(false);\n\n        if (this.tooltip) {\n            this.tooltip.hide();\n        }\n    }\n\n    moveLine() {\n        const { axis, point } = this;\n        const vertical = axis.options.vertical;\n        const box = this.getBox();\n        const dim = vertical ? Y : X;\n        const lineStart = new geom.Point(box.x1, box.y1);\n        let lineEnd;\n\n        if (vertical) {\n            lineEnd = new geom.Point(box.x2, box.y1);\n        } else {\n            lineEnd = new geom.Point(box.x1, box.y2);\n        }\n\n        if (point) {\n            if (this.stickyMode) {\n                const slot = axis.getSlot(axis.pointCategoryIndex(point));\n                lineStart[dim] = lineEnd[dim] = slot.center()[dim];\n            } else {\n                lineStart[dim] = lineEnd[dim] = point[dim];\n            }\n        }\n\n        this.box = box;\n\n        this.line.moveTo(lineStart).lineTo(lineEnd);\n    }\n\n    getBox() {\n        const axis = this.axis;\n        const axes = axis.pane.axes;\n        const length = axes.length;\n        const vertical = axis.options.vertical;\n        const box = axis.lineBox().clone();\n        const dim = vertical ? X : Y;\n        let axisLineBox;\n\n        for (let i = 0; i < length; i++) {\n            const currentAxis = axes[i];\n            if (currentAxis.options.vertical !== vertical) {\n                if (!axisLineBox) {\n                    axisLineBox = currentAxis.lineBox().clone();\n                } else {\n                    axisLineBox.wrap(currentAxis.lineBox());\n                }\n            }\n        }\n\n        box[dim + 1] = axisLineBox[dim + 1];\n        box[dim + 2] = axisLineBox[dim + 2];\n\n        return box;\n    }\n\n    createVisual() {\n        super.createVisual();\n\n        const options = this.options;\n        this.line = new draw.Path({\n            stroke: {\n                color: options.color,\n                width: options.width,\n                opacity: options.opacity,\n                dashType: options.dashType\n            },\n            visible: false\n        });\n\n        this.moveLine();\n        this.visual.append(this.line);\n    }\n\n    destroy() {\n        if (this.tooltip) {\n            this.tooltip.destroy();\n        }\n\n        super.destroy();\n    }\n}\n\nsetDefaultOptions(Crosshair, {\n    color: BLACK,\n    width: 2,\n    zIndex: -1,\n    tooltip: {\n        visible: false\n    }\n});\n\nexport default Crosshair;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}