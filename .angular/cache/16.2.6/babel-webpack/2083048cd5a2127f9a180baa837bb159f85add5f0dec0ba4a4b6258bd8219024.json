{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { BehaviorSubject, map, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst CREATE_ACTION = 'create';\nconst UPDATE_ACTION = 'update';\nconst REMOVE_ACTION = 'destroy';\nexport class OrderService extends BehaviorSubject {\n  constructor(http, router) {\n    super([]);\n    this.http = http;\n    this.router = router;\n    this.url = 'Order';\n    this.data = [];\n  }\n  getAllOrder() {\n    return this.http.get(`${environment.apiUrl}${this.url}`);\n  }\n  getAllOrderDetail(orderId) {\n    return this.http.get(`${environment.apiUrl}${this.url}/Details/${orderId}`);\n  }\n  updateOrder(order) {\n    return this.http.post(`${environment.apiUrl}${this.url}/Update`, order);\n  }\n  removeOrder(orderId) {\n    return this.http.post(`${environment.apiUrl}${this.url}/Delete`, orderId);\n  }\n  getTotalPrice(data, quantity) {\n    let grandTotal = 0;\n    data.orderDetail.forEach(order => {\n      const product = data.orderDetail.find(p => p.productId === order.product.productId);\n      if (product) {\n        grandTotal += product.product.price * quantity;\n      }\n    });\n    return grandTotal;\n  }\n  read() {\n    if (this.data.length) {\n      return super.next(this.data);\n    }\n    this.fetch().pipe(tap(data => {\n      this.data = data;\n    })).subscribe(data => {\n      super.next(data);\n    });\n  }\n  save(data) {\n    return this.http.post(`${environment.apiUrl}${this.url}`, data);\n  }\n  remove(data) {\n    this.reset();\n    this.fetch(REMOVE_ACTION, data).subscribe(() => this.read(), () => this.read());\n  }\n  resetItem(dataItem) {\n    if (!dataItem) {\n      return;\n    }\n    // Find the original data item\n    const originalDataItem = this.data.find(item => item.orderId === dataItem.orderId);\n    if (originalDataItem) {\n      // Revert changes\n      Object.assign(originalDataItem, dataItem);\n    }\n    super.next(this.data);\n  }\n  reset() {\n    this.data = [];\n  }\n  fetch(action = '', data) {\n    return this.http.jsonp(`https://demos.telerik.com/kendo-ui/service/Products/${action}?${this.serializeModels(data)}`, 'callback').pipe(map(res => res));\n  }\n  serializeModels(data) {\n    return data ? `&models=${JSON.stringify([data])}` : '';\n  }\n  static #_ = this.ɵfac = function OrderService_Factory(t) {\n    return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrderService,\n    factory: OrderService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["environment","BehaviorSubject","map","tap","CREATE_ACTION","UPDATE_ACTION","REMOVE_ACTION","OrderService","constructor","http","router","url","data","getAllOrder","get","apiUrl","getAllOrderDetail","orderId","updateOrder","order","post","removeOrder","getTotalPrice","quantity","grandTotal","orderDetail","forEach","product","find","p","productId","price","read","length","next","fetch","pipe","subscribe","save","remove","reset","resetItem","dataItem","originalDataItem","item","Object","assign","action","jsonp","serializeModels","res","JSON","stringify","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Internship\\FoodShopUI\\src\\app\\services\\order.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Order } from '../models/Order';\r\nimport { BehaviorSubject, Observable, map, tap } from 'rxjs';\r\nimport { OrderDetailResponse } from '../models/orderDetail';\r\nimport { or } from '@progress/kendo-angular-grid/utils';\r\n\r\nconst CREATE_ACTION = 'create';\r\nconst UPDATE_ACTION = 'update';\r\nconst REMOVE_ACTION = 'destroy';\r\n\r\n@Injectable({\r\n    providedIn: 'root' \r\n})\r\nexport class OrderService extends BehaviorSubject<Order[]> {\r\n    url : string = 'Order';\r\n    private data: Order[] = [];\r\n    constructor(private http: HttpClient, private router: Router) {\r\n        super([]); \r\n    }\r\n    getAllOrder() {\r\n        return this.http.get<Order[]>(`${environment.apiUrl}${this.url}`);\r\n    }    \r\n\r\n    getAllOrderDetail(orderId : number) {\r\n        return this.http.get<OrderDetailResponse>(`${environment.apiUrl}${this.url}/Details/${orderId}`)\r\n    }\r\n\r\n    updateOrder(order : OrderDetailResponse) {\r\n        return this.http.post<boolean>(`${environment.apiUrl}${this.url}/Update`, order)\r\n    }\r\n\r\n    removeOrder(orderId : number) {\r\n        return this.http.post<boolean>(`${environment.apiUrl}${this.url}/Delete`, orderId)\r\n    }\r\n\r\n    getTotalPrice(data : OrderDetailResponse, quantity : number) : number{\r\n        let grandTotal = 0;\r\n        data.orderDetail.forEach(order => {\r\n          const product = data.orderDetail.find(p => p.productId === order.product.productId);\r\n          if (product) {\r\n            grandTotal += product.product.price * quantity;\r\n          }\r\n        });  \r\n        return grandTotal;\r\n      }\r\n\r\n    public read(): void {\r\n        if (this.data.length) {\r\n            return super.next(this.data);\r\n        }\r\n\r\n        this.fetch()\r\n            .pipe(\r\n                tap(data => {\r\n                    this.data = data;\r\n                })\r\n            )\r\n            .subscribe(data => {\r\n                super.next(data);\r\n            });\r\n    }\r\n\r\n    public save(data: Order) {\r\n        return this.http.post<boolean>(`${environment.apiUrl}${this.url}`,data);\r\n    }\r\n\r\n    public remove(data: Order[]): void {\r\n        this.reset();\r\n\r\n        this.fetch(REMOVE_ACTION, data)\r\n            .subscribe(() => this.read(), () => this.read());\r\n    }\r\n    public resetItem(dataItem: Order): void {\r\n        if (!dataItem) { return; }\r\n      \r\n        // Find the original data item\r\n        const originalDataItem = this.data.find(item => item.orderId === dataItem.orderId);\r\n      \r\n        if (originalDataItem) {\r\n          // Revert changes\r\n          Object.assign(originalDataItem, dataItem);\r\n        }\r\n      \r\n        super.next(this.data);\r\n      }\r\n    \r\n    private reset() {\r\n        this.data = [];\r\n    }\r\n\r\n    private fetch(action = '', data?: Order[]): Observable<Order[]> {\r\n        return this.http\r\n            .jsonp(`https://demos.telerik.com/kendo-ui/service/Products/${action}?${this.serializeModels(data)}`, 'callback')\r\n            .pipe(map(res => <Order[]>res));\r\n    }\r\n\r\n    private serializeModels(data?: Order[]): string {\r\n        return data ? `&models=${JSON.stringify([data])}` : '';\r\n    }\r\n}   \r\n"],"mappings":"AAGA,SAASA,WAAW,QAAQ,8BAA8B;AAE1D,SAASC,eAAe,EAAcC,GAAG,EAAEC,GAAG,QAAQ,MAAM;;;;AAI5D,MAAMC,aAAa,GAAG,QAAQ;AAC9B,MAAMC,aAAa,GAAG,QAAQ;AAC9B,MAAMC,aAAa,GAAG,SAAS;AAK/B,OAAM,MAAOC,YAAa,SAAQN,eAAwB;EAGtDO,YAAoBC,IAAgB,EAAUC,MAAc;IACxD,KAAK,CAAC,EAAE,CAAC;IADO,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAFpD,KAAAC,GAAG,GAAY,OAAO;IACd,KAAAC,IAAI,GAAY,EAAE;EAG1B;EACAC,WAAWA,CAAA;IACP,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAU,GAAGd,WAAW,CAACe,MAAM,GAAG,IAAI,CAACJ,GAAG,EAAE,CAAC;EACrE;EAEAK,iBAAiBA,CAACC,OAAgB;IAC9B,OAAO,IAAI,CAACR,IAAI,CAACK,GAAG,CAAsB,GAAGd,WAAW,CAACe,MAAM,GAAG,IAAI,CAACJ,GAAG,YAAYM,OAAO,EAAE,CAAC;EACpG;EAEAC,WAAWA,CAACC,KAA2B;IACnC,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAU,GAAGpB,WAAW,CAACe,MAAM,GAAG,IAAI,CAACJ,GAAG,SAAS,EAAEQ,KAAK,CAAC;EACpF;EAEAE,WAAWA,CAACJ,OAAgB;IACxB,OAAO,IAAI,CAACR,IAAI,CAACW,IAAI,CAAU,GAAGpB,WAAW,CAACe,MAAM,GAAG,IAAI,CAACJ,GAAG,SAAS,EAAEM,OAAO,CAAC;EACtF;EAEAK,aAAaA,CAACV,IAA0B,EAAEW,QAAiB;IACvD,IAAIC,UAAU,GAAG,CAAC;IAClBZ,IAAI,CAACa,WAAW,CAACC,OAAO,CAACP,KAAK,IAAG;MAC/B,MAAMQ,OAAO,GAAGf,IAAI,CAACa,WAAW,CAACG,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,SAAS,KAAKX,KAAK,CAACQ,OAAO,CAACG,SAAS,CAAC;MACnF,IAAIH,OAAO,EAAE;QACXH,UAAU,IAAIG,OAAO,CAACA,OAAO,CAACI,KAAK,GAAGR,QAAQ;;IAElD,CAAC,CAAC;IACF,OAAOC,UAAU;EACnB;EAEKQ,IAAIA,CAAA;IACP,IAAI,IAAI,CAACpB,IAAI,CAACqB,MAAM,EAAE;MAClB,OAAO,KAAK,CAACC,IAAI,CAAC,IAAI,CAACtB,IAAI,CAAC;;IAGhC,IAAI,CAACuB,KAAK,EAAE,CACPC,IAAI,CACDjC,GAAG,CAACS,IAAI,IAAG;MACP,IAAI,CAACA,IAAI,GAAGA,IAAI;IACpB,CAAC,CAAC,CACL,CACAyB,SAAS,CAACzB,IAAI,IAAG;MACd,KAAK,CAACsB,IAAI,CAACtB,IAAI,CAAC;IACpB,CAAC,CAAC;EACV;EAEO0B,IAAIA,CAAC1B,IAAW;IACnB,OAAO,IAAI,CAACH,IAAI,CAACW,IAAI,CAAU,GAAGpB,WAAW,CAACe,MAAM,GAAG,IAAI,CAACJ,GAAG,EAAE,EAACC,IAAI,CAAC;EAC3E;EAEO2B,MAAMA,CAAC3B,IAAa;IACvB,IAAI,CAAC4B,KAAK,EAAE;IAEZ,IAAI,CAACL,KAAK,CAAC7B,aAAa,EAAEM,IAAI,CAAC,CAC1ByB,SAAS,CAAC,MAAM,IAAI,CAACL,IAAI,EAAE,EAAE,MAAM,IAAI,CAACA,IAAI,EAAE,CAAC;EACxD;EACOS,SAASA,CAACC,QAAe;IAC5B,IAAI,CAACA,QAAQ,EAAE;MAAE;;IAEjB;IACA,MAAMC,gBAAgB,GAAG,IAAI,CAAC/B,IAAI,CAACgB,IAAI,CAACgB,IAAI,IAAIA,IAAI,CAAC3B,OAAO,KAAKyB,QAAQ,CAACzB,OAAO,CAAC;IAElF,IAAI0B,gBAAgB,EAAE;MACpB;MACAE,MAAM,CAACC,MAAM,CAACH,gBAAgB,EAAED,QAAQ,CAAC;;IAG3C,KAAK,CAACR,IAAI,CAAC,IAAI,CAACtB,IAAI,CAAC;EACvB;EAEM4B,KAAKA,CAAA;IACT,IAAI,CAAC5B,IAAI,GAAG,EAAE;EAClB;EAEQuB,KAAKA,CAACY,MAAM,GAAG,EAAE,EAAEnC,IAAc;IACrC,OAAO,IAAI,CAACH,IAAI,CACXuC,KAAK,CAAC,uDAAuDD,MAAM,IAAI,IAAI,CAACE,eAAe,CAACrC,IAAI,CAAC,EAAE,EAAE,UAAU,CAAC,CAChHwB,IAAI,CAAClC,GAAG,CAACgD,GAAG,IAAaA,GAAG,CAAC,CAAC;EACvC;EAEQD,eAAeA,CAACrC,IAAc;IAClC,OAAOA,IAAI,GAAG,WAAWuC,IAAI,CAACC,SAAS,CAAC,CAACxC,IAAI,CAAC,CAAC,EAAE,GAAG,EAAE;EAC1D;EAAC,QAAAyC,CAAA,G;qBArFQ9C,YAAY,EAAA+C,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZrD,YAAY;IAAAsD,OAAA,EAAZtD,YAAY,CAAAuD,IAAA;IAAAC,UAAA,EAFT;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}