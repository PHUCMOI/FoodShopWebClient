{"ast":null,"code":"import { CompactType, DisplayGrid, GridType } from 'angular-gridster2';\nimport { PeopleOptions } from 'src/app/models/enum/People';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-toastr\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/material/core\";\nimport * as i4 from \"src/app/services/restaurant.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/icon\";\nimport * as i7 from \"@angular/material/button\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/form-field\";\nimport * as i10 from \"angular-gridster2\";\nimport * as i11 from \"@angular/material/datepicker\";\nimport * as i12 from \"@angular/material/select\";\nfunction ReservationComponent_mat_option_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 2);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const restaurant_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", restaurant_r4.restaurantName);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(restaurant_r4.restaurantName);\n  }\n}\nfunction ReservationComponent_mat_option_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const time_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", time_r5)(\"disabled\", time_r5 === \"Not Available\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(time_r5);\n  }\n}\nfunction ReservationComponent_div_32_gridster_item_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"gridster-item\", 14)(1, \"div\", 15)(2, \"button\", 16);\n    i0.ɵɵlistener(\"mousedown\", function ReservationComponent_div_32_gridster_item_2_Template_button_mousedown_2_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const item_r7 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r8.removeItem($event, item_r7));\n    })(\"touchstart\", function ReservationComponent_div_32_gridster_item_2_Template_button_touchstart_2_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const item_r7 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.removeItem($event, item_r7));\n    });\n    i0.ɵɵelementStart(3, \"mat-icon\");\n    i0.ɵɵtext(4, \"delete\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const item_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"item\", item_r7);\n  }\n}\nfunction ReservationComponent_div_32_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 11)(1, \"gridster\", 12);\n    i0.ɵɵtemplate(2, ReservationComponent_div_32_gridster_item_2_Template, 5, 1, \"gridster-item\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function ReservationComponent_div_32_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.saveMap());\n    });\n    i0.ɵɵtext(4, \"Save\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"options\", ctx_r3.options);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.dashboard);\n  }\n}\nexport class ReservationComponent {\n  constructor(injector, toasterService, elementRef, renderer, fb, dateAdapter, restaurantService) {\n    this.toasterService = toasterService;\n    this.elementRef = elementRef;\n    this.renderer = renderer;\n    this.fb = fb;\n    this.dateAdapter = dateAdapter;\n    this.restaurantService = restaurantService;\n    this.minValue = {\n      hour: 0,\n      minute: 0\n    }; // Example: Set the minimum time to 00:00\n    this.maxValue = {\n      hour: 24,\n      minute: 0\n    }; // Example: Set the minimum time to 00:00\n    this.selectedTime = '';\n    this.selectedPeople = PeopleOptions.None;\n    this.peopleOptions = PeopleOptions;\n    this.restaurantList = [];\n    this.timeList = [];\n    this.selectedDate = new Date();\n    this.isSelectTable = false;\n    this.minDate = new Date();\n  }\n  ngOnInit() {\n    this.getOptions();\n    this.restaurantService.getRestaurantList().subscribe({\n      next: data => {\n        this.restaurantList = data;\n      }\n    });\n    this.generateTimeList();\n  }\n  getOptions() {\n    this.options = {\n      gridType: GridType.Fixed,\n      compactType: CompactType.None,\n      emptyCellClickCallback: this.emptyCellClick.bind(this),\n      enableEmptyCellClick: true,\n      pushItems: true,\n      draggable: {\n        enabled: true\n      },\n      resizable: {\n        enabled: true\n      },\n      displayGrid: DisplayGrid.Always\n    };\n  }\n  initItem(item, itemComponent) {\n    this.itemToPush = itemComponent;\n  }\n  removeItem($event, item) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    this.dashboard.splice(this.dashboard.indexOf(item), 1);\n    console.log(this.dashboard);\n  }\n  addItem() {\n    this.dashboard.push({\n      x: 0,\n      y: 0,\n      cols: 1,\n      rows: 1\n    });\n  }\n  emptyCellClick(event, item) {\n    console.info('empty cell click', event, item);\n    this.dashboard.push(item);\n  }\n  handleTimeSelection() {\n    console.log('Selected time:', this.selectedTime);\n  }\n  generateTimeList() {\n    const currentTime = new Date();\n    const nextMultipleOf15 = Math.ceil(currentTime.getMinutes() / 15) * 15;\n    currentTime.setMinutes(nextMultipleOf15, 0, 0); // Set to the next multiple of 15 minutes\n    const endTime = new Date();\n    endTime.setHours(23, 59, 59); // Set the end time to the end of the day\n    while (currentTime < endTime) {\n      this.timeList.push(this.formatTime(currentTime));\n      currentTime.setMinutes(currentTime.getMinutes() + 15);\n    }\n  }\n  formatTime(date) {\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    return `${hours}:${minutes}`;\n  }\n  getNumberPeopleType(people) {\n    if (!people) {\n      return 0;\n    }\n    if (people === PeopleOptions.LessThan2) return 2;else if (people === PeopleOptions.MoreThan5) return 8;else if (people === PeopleOptions.ThreeToFour) return 4;else return 0;\n  }\n  getRestaurantMap() {\n    let numberPeople = this.getNumberPeopleType(this.selectedPeople);\n    const formattedDate = this.selectedDate?.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n    let selectedRestaurantId = this.findRestaurantId(this.selectedRestaurant);\n    const formData = {\n      restaurantId: selectedRestaurantId,\n      numberPeople: numberPeople,\n      reservationDate: formattedDate,\n      reservationTime: this.selectedTime\n    };\n    this.restaurantService.getRestaurantMap(formData).subscribe({\n      next: data => {\n        this.dashboard = [];\n        data.forEach(item => {\n          this.dashboard.push({\n            x: item.positionX,\n            y: item.positionY,\n            cols: item.cols,\n            rows: item.rows\n          });\n        });\n        this.isSelectTable = true;\n      }\n    });\n  }\n  findRestaurantId(restaurantName) {\n    const foundRestaurant = this.restaurantList.find(item => item.restaurantName === restaurantName);\n    if (foundRestaurant) {\n      return foundRestaurant.restaurantId;\n    }\n    return 0;\n  }\n  saveMap() {\n    let restaurantMaps = [];\n    let restaurantId = this.findRestaurantId(this.selectedRestaurant);\n    this.dashboard.forEach(item => {\n      let maps = {\n        restaurantId: restaurantId,\n        cols: item.cols,\n        rows: item.rows,\n        positionX: item.x,\n        positionY: item.y\n      };\n      restaurantMaps.push(maps);\n    });\n    this.restaurantService.createMaps(restaurantMaps).subscribe({\n      next: data => {\n        console.log(data);\n      }\n    });\n  }\n  onDateChange(event) {\n    console.log('Selected Date:', event.value);\n  }\n  static #_ = this.ɵfac = function ReservationComponent_Factory(t) {\n    return new (t || ReservationComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.ToastrService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.DateAdapter), i0.ɵɵdirectiveInject(i4.RestaurantService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ReservationComponent,\n    selectors: [[\"app-reservation\"]],\n    decls: 33,\n    vars: 14,\n    consts: [[3, \"value\", \"valueChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [\"matInput\", \"\", 3, \"matDatepicker\", \"min\", \"ngModel\", \"ngModelChange\"], [\"matIconSuffix\", \"\", 3, \"for\"], [3, \"dateChange\"], [\"picker\", \"\"], [3, \"value\", \"disabled\", 4, \"ngFor\", \"ngForOf\"], [\"mat-raised-button\", \"\", \"color\", \"accent\", 3, \"click\"], [\"class\", \"gridster-container\", 4, \"ngIf\"], [3, \"value\", \"disabled\"], [1, \"gridster-container\"], [3, \"options\"], [3, \"item\", 4, \"ngFor\", \"ngForOf\"], [3, \"item\"], [1, \"button-holder\"], [\"mat-mini-fab\", \"\", 3, \"mousedown\", \"touchstart\"]],\n    template: function ReservationComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\")(1, \"mat-form-field\")(2, \"mat-label\");\n        i0.ɵɵtext(3, \"Restaurant\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"mat-select\", 0);\n        i0.ɵɵlistener(\"valueChange\", function ReservationComponent_Template_mat_select_valueChange_4_listener($event) {\n          return ctx.selectedRestaurant = $event;\n        });\n        i0.ɵɵtemplate(5, ReservationComponent_mat_option_5_Template, 2, 2, \"mat-option\", 1);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"mat-form-field\")(7, \"mat-label\");\n        i0.ɵɵtext(8, \"People\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"mat-select\", 0);\n        i0.ɵɵlistener(\"valueChange\", function ReservationComponent_Template_mat_select_valueChange_9_listener($event) {\n          return ctx.selectedPeople = $event;\n        });\n        i0.ɵɵelementStart(10, \"mat-option\", 2);\n        i0.ɵɵtext(11, \"None\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"mat-option\", 2);\n        i0.ɵɵtext(13, \" < 2 People\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"mat-option\", 2);\n        i0.ɵɵtext(15, \"3-4 People\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"mat-option\", 2);\n        i0.ɵɵtext(17, \"> 5 People\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(18, \"mat-form-field\")(19, \"mat-label\");\n        i0.ɵɵtext(20, \"Choose a date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"input\", 3);\n        i0.ɵɵlistener(\"ngModelChange\", function ReservationComponent_Template_input_ngModelChange_21_listener($event) {\n          return ctx.selectedDate = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(22, \"mat-datepicker-toggle\", 4);\n        i0.ɵɵelementStart(23, \"mat-datepicker\", 5, 6);\n        i0.ɵɵlistener(\"dateChange\", function ReservationComponent_Template_mat_datepicker_dateChange_23_listener($event) {\n          return ctx.onDateChange($event);\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(25, \"mat-form-field\")(26, \"mat-label\");\n        i0.ɵɵtext(27, \"Time\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"mat-select\", 0);\n        i0.ɵɵlistener(\"valueChange\", function ReservationComponent_Template_mat_select_valueChange_28_listener($event) {\n          return ctx.selectedTime = $event;\n        });\n        i0.ɵɵtemplate(29, ReservationComponent_mat_option_29_Template, 2, 3, \"mat-option\", 7);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(30, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function ReservationComponent_Template_button_click_30_listener() {\n          return ctx.getRestaurantMap();\n        });\n        i0.ɵɵtext(31, \"Find\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(32, ReservationComponent_div_32_Template, 5, 2, \"div\", 9);\n      }\n      if (rf & 2) {\n        const _r1 = i0.ɵɵreference(24);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"value\", ctx.selectedRestaurant);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.restaurantList);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"value\", ctx.selectedPeople);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"value\", ctx.peopleOptions.None);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", ctx.peopleOptions.LessThan2);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", ctx.peopleOptions.ThreeToFour);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", ctx.peopleOptions.MoreThan5);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"matDatepicker\", _r1)(\"min\", ctx.minDate)(\"ngModel\", ctx.selectedDate);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"for\", _r1);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"value\", ctx.selectedTime);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.timeList);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.isSelectTable);\n      }\n    },\n    dependencies: [i5.NgForOf, i5.NgIf, i6.MatIcon, i7.MatButton, i7.MatMiniFabButton, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel, i3.MatOption, i8.MatInput, i9.MatFormField, i9.MatLabel, i9.MatSuffix, i10.GridsterComponent, i10.GridsterItemComponent, i11.MatDatepicker, i11.MatDatepickerInput, i11.MatDatepickerToggle, i12.MatSelect],\n    styles: [\"[_nghost-%COMP%] {\\n    display: flex;\\n    flex-direction: column;\\n    height: 100%;\\n  }\\n  \\n  .gridster-container[_ngcontent-%COMP%] {\\n    flex: 1;\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9yZXNlcnZhdGlvbi9yZXNlcnZhdGlvbi5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixZQUFZO0VBQ2Q7O0VBRUE7SUFDRSxPQUFPO0VBQ1QiLCJzb3VyY2VzQ29udGVudCI6WyI6aG9zdCB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIGhlaWdodDogMTAwJTtcclxuICB9XHJcbiAgXHJcbiAgLmdyaWRzdGVyLWNvbnRhaW5lciB7XHJcbiAgICBmbGV4OiAxO1xyXG4gIH0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"names":["CompactType","DisplayGrid","GridType","PeopleOptions","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","restaurant_r4","restaurantName","ɵɵadvance","ɵɵtextInterpolate","time_r5","ɵɵlistener","ReservationComponent_div_32_gridster_item_2_Template_button_mousedown_2_listener","$event","restoredCtx","ɵɵrestoreView","_r9","item_r7","$implicit","ctx_r8","ɵɵnextContext","ɵɵresetView","removeItem","ReservationComponent_div_32_gridster_item_2_Template_button_touchstart_2_listener","ctx_r10","ɵɵtemplate","ReservationComponent_div_32_gridster_item_2_Template","ReservationComponent_div_32_Template_button_click_3_listener","_r12","ctx_r11","saveMap","ctx_r3","options","dashboard","ReservationComponent","constructor","injector","toasterService","elementRef","renderer","fb","dateAdapter","restaurantService","minValue","hour","minute","maxValue","selectedTime","selectedPeople","None","peopleOptions","restaurantList","timeList","selectedDate","Date","isSelectTable","minDate","ngOnInit","getOptions","getRestaurantList","subscribe","next","data","generateTimeList","gridType","Fixed","compactType","emptyCellClickCallback","emptyCellClick","bind","enableEmptyCellClick","pushItems","draggable","enabled","resizable","displayGrid","Always","initItem","item","itemComponent","itemToPush","preventDefault","stopPropagation","splice","indexOf","console","log","addItem","push","x","y","cols","rows","event","info","handleTimeSelection","currentTime","nextMultipleOf15","Math","ceil","getMinutes","setMinutes","endTime","setHours","formatTime","date","hours","getHours","toString","padStart","minutes","getNumberPeopleType","people","LessThan2","MoreThan5","ThreeToFour","getRestaurantMap","numberPeople","formattedDate","toLocaleDateString","year","month","day","selectedRestaurantId","findRestaurantId","selectedRestaurant","formData","restaurantId","reservationDate","reservationTime","forEach","positionX","positionY","foundRestaurant","find","restaurantMaps","maps","createMaps","onDateChange","value","_","ɵɵdirectiveInject","Injector","i1","ToastrService","ElementRef","Renderer2","i2","FormBuilder","i3","DateAdapter","i4","RestaurantService","_2","selectors","decls","vars","consts","template","ReservationComponent_Template","rf","ctx","ReservationComponent_Template_mat_select_valueChange_4_listener","ReservationComponent_mat_option_5_Template","ReservationComponent_Template_mat_select_valueChange_9_listener","ReservationComponent_Template_input_ngModelChange_21_listener","ɵɵelement","ReservationComponent_Template_mat_datepicker_dateChange_23_listener","ReservationComponent_Template_mat_select_valueChange_28_listener","ReservationComponent_mat_option_29_Template","ReservationComponent_Template_button_click_30_listener","ReservationComponent_div_32_Template","_r1"],"sources":["C:\\Internship\\FoodShopUI\\src\\app\\components\\reservation\\reservation.component.ts","C:\\Internship\\FoodShopUI\\src\\app\\components\\reservation\\reservation.component.html"],"sourcesContent":["import { Component, ElementRef, Injector, OnInit, Renderer2 } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DateAdapter } from '@angular/material/core';\nimport { StringFilterCellComponent } from '@progress/kendo-angular-grid';\nimport { CompactType, DisplayGrid, GridType, GridsterConfig, GridsterItem, GridsterItemComponent } from 'angular-gridster2';\nimport * as moment from 'moment';\nimport { ToastrService } from 'ngx-toastr';\nimport { Restaurant } from 'src/app/models/Restaurant';\nimport { RestaurantMap } from 'src/app/models/RestaurantMap';\nimport { PeopleOptions } from 'src/app/models/enum/People';\nimport { ReservationData } from 'src/app/models/modelRequest/ReservationData';\nimport { RestaurantService } from 'src/app/services/restaurant.service';\n\n@Component({\n  selector: 'app-reservation',\n  templateUrl: './reservation.component.html',\n  styleUrls: ['./reservation.component.css']\n})\nexport class ReservationComponent implements OnInit {\n  options !: GridsterConfig;\n  dashboard!: GridsterItem[];\n  itemToPush!: GridsterItemComponent;\n  form!: FormGroup;\n  minValue: { hour: number, minute: number } = { hour: 0, minute: 0 }; // Example: Set the minimum time to 00:00\n  maxValue: { hour: number, minute: number } = { hour: 24, minute: 0 }; // Example: Set the minimum time to 00:00\n  selectedTime: string = '';\n  selected !: string;\n  selectedPeople: PeopleOptions | null = PeopleOptions.None;\n\n  peopleOptions = PeopleOptions;\n  selectedRestaurant !: string;\n  selectedRestaurantId !: number;\n  restaurantList: Restaurant[] = [];\n  timeList: string[] = [];\n\n  minDate: Date;\n  selectedDate: Date = new Date();;\n\n  isSelectTable = false;\n\n  constructor(\n    injector: Injector,\n    private toasterService: ToastrService,\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private fb: FormBuilder,\n    private dateAdapter: DateAdapter<Date>,\n    private restaurantService: RestaurantService\n  ) {\n    this.minDate = new Date();\n  }\n\n  ngOnInit(): void {\n    this.getOptions();\n\n    this.restaurantService.getRestaurantList().subscribe({\n      next: data => {\n        this.restaurantList = data;\n      }\n    })\n\n    this.generateTimeList();\n  }\n\n  getOptions() {\n    this.options = {\n      gridType: GridType.Fixed,\n      compactType: CompactType.None,\n      emptyCellClickCallback: this.emptyCellClick.bind(this),\n      enableEmptyCellClick: true,\n      pushItems: true,\n      draggable: {\n        enabled: true\n      },\n      resizable: {\n        enabled: true\n      },\n      displayGrid: DisplayGrid.Always\n    };\n  }\n\n  initItem(item: GridsterItem, itemComponent: GridsterItemComponent): void {\n    this.itemToPush = itemComponent;\n  }\n\n  removeItem($event: MouseEvent | TouchEvent, item: any): void {\n    $event.preventDefault();\n    $event.stopPropagation();\n    this.dashboard.splice(this.dashboard.indexOf(item), 1);\n    console.log(this.dashboard)\n  }\n\n  addItem(): void {\n    this.dashboard.push({ x: 0, y: 0, cols: 1, rows: 1 });\n  }\n  emptyCellClick(event: MouseEvent, item: GridsterItem): void {\n    console.info('empty cell click', event, item);\n    this.dashboard.push(item);\n  }\n\n  handleTimeSelection(): void {\n    console.log('Selected time:', this.selectedTime);\n  }\n\n  generateTimeList(): void {\n    const currentTime = new Date();\n    const nextMultipleOf15 = Math.ceil(currentTime.getMinutes() / 15) * 15;\n    currentTime.setMinutes(nextMultipleOf15, 0, 0); // Set to the next multiple of 15 minutes\n\n    const endTime = new Date();\n    endTime.setHours(23, 59, 59); // Set the end time to the end of the day\n\n    while (currentTime < endTime) {\n      this.timeList.push(this.formatTime(currentTime));\n      currentTime.setMinutes(currentTime.getMinutes() + 15);\n    }\n  }\n\n\n  formatTime(date: Date): string {\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    return `${hours}:${minutes}`;\n  }\n\n  getNumberPeopleType(people: PeopleOptions | null) {\n    if (!people) {\n      return 0;\n    }\n\n    if (people === PeopleOptions.LessThan2) return 2;\n    else if (people === PeopleOptions.MoreThan5) return 8;\n    else if (people === PeopleOptions.ThreeToFour) return 4;\n    else return 0;\n  }\n\n  getRestaurantMap(): void {\n    let numberPeople = this.getNumberPeopleType(this.selectedPeople);\n    const formattedDate = this.selectedDate?.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n\n    let selectedRestaurantId = this.findRestaurantId(this.selectedRestaurant);\n\n    const formData: ReservationData = {\n      restaurantId: selectedRestaurantId,\n      numberPeople: numberPeople,\n      reservationDate: formattedDate,\n      reservationTime: this.selectedTime\n    };\n\n    this.restaurantService.getRestaurantMap(formData).subscribe({\n      next: data => {\n        this.dashboard = [];\n        data.forEach(item => {\n          this.dashboard.push({ x: item.positionX, y: item.positionY, cols: item.cols, rows: item.rows });\n        })\n        this.isSelectTable = true;\n      }\n    })\n\n  }\n\n  findRestaurantId(restaurantName: string): number {\n    const foundRestaurant = this.restaurantList.find(item => item.restaurantName === restaurantName);\n\n    if (foundRestaurant) {\n      return foundRestaurant.restaurantId;\n    }\n\n    return 0;\n  }\n\n\n\n  saveMap() {\n    let restaurantMaps: RestaurantMap[] = [];\n    let restaurantId = this.findRestaurantId(this.selectedRestaurant);\n    this.dashboard.forEach(item => {\n      let maps: RestaurantMap = {\n        restaurantId: restaurantId,\n        cols: item.cols,\n        rows: item.rows,\n        positionX: item.x,\n        positionY: item.y\n      };\n\n      restaurantMaps.push(maps);\n    });\n\n    this.restaurantService.createMaps(restaurantMaps).subscribe({\n      next: data => {\n        console.log(data);\n      }\n    })\n  }\n\n  onDateChange(event: any): void {\n    console.log('Selected Date:', event.value);\n   \n  }\n}\n","<div>\n  <mat-form-field>\n    <mat-label>Restaurant</mat-label>\n    <mat-select [(value)]=\"selectedRestaurant\">\n      <mat-option *ngFor=\"let restaurant of restaurantList\" [value]=\"restaurant.restaurantName\">{{\n        restaurant.restaurantName }}</mat-option>\n    </mat-select>\n  </mat-form-field>\n\n  <mat-form-field>\n    <mat-label>People</mat-label>\n    <mat-select [(value)]=\"selectedPeople\">\n      <mat-option [value]=\"peopleOptions.None\">None</mat-option>\n      <mat-option [value]=\"peopleOptions.LessThan2\">\n        < 2 People</mat-option>\n          <mat-option [value]=\"peopleOptions.ThreeToFour\">3-4 People</mat-option>\n          <mat-option [value]=\"peopleOptions.MoreThan5\">> 5 People</mat-option>\n    </mat-select>\n  </mat-form-field>\n\n\n  <mat-form-field>\n    <mat-label>Choose a date</mat-label>\n    <input matInput [matDatepicker]=\"picker\" [min]=\"minDate\" [(ngModel)]=\"selectedDate\">\n    <mat-datepicker-toggle matIconSuffix [for]=\"picker\"></mat-datepicker-toggle>\n    <mat-datepicker #picker (dateChange)=\"onDateChange($event)\"></mat-datepicker>\n  </mat-form-field>\n  \n  \n\n  <mat-form-field>\n    <mat-label>Time</mat-label>\n    <mat-select [(value)]=\"selectedTime\">\n      <mat-option *ngFor=\"let time of timeList\" [value]=\"time\" [disabled]=\"time === 'Not Available'\">{{ time }}</mat-option>\n    </mat-select>\n  </mat-form-field>\n  \n\n  <button (click)=\"getRestaurantMap()\" mat-raised-button color=\"accent\">Find</button>\n</div>\n<div *ngIf=\"isSelectTable\" class=\"gridster-container\">\n  <gridster [options]=\"options\">\n    <gridster-item [item]=\"item\" *ngFor=\"let item of dashboard\">\n      <div class=\"button-holder\">\n        <button mat-mini-fab (mousedown)=\"removeItem($event, item)\" (touchstart)=\"removeItem($event, item)\">\n          <mat-icon>delete</mat-icon>\n        </button>\n      </div>\n    </gridster-item>\n  </gridster>\n  <button (click)=\"saveMap()\" mat-raised-button color=\"accent\">Save</button>\n</div>"],"mappings":"AAIA,SAASA,WAAW,EAAEC,WAAW,EAAEC,QAAQ,QAA6D,mBAAmB;AAK3H,SAASC,aAAa,QAAQ,4BAA4B;;;;;;;;;;;;;;;;ICLpDC,EAAA,CAAAC,cAAA,oBAA0F;IAAAD,EAAA,CAAAE,MAAA,GAC5D;IAAAF,EAAA,CAAAG,YAAA,EAAa;;;;IADWH,EAAA,CAAAI,UAAA,UAAAC,aAAA,CAAAC,cAAA,CAAmC;IAACN,EAAA,CAAAO,SAAA,GAC5D;IAD4DP,EAAA,CAAAQ,iBAAA,CAAAH,aAAA,CAAAC,cAAA,CAC5D;;;;;IA4B9BN,EAAA,CAAAC,cAAA,qBAA+F;IAAAD,EAAA,CAAAE,MAAA,GAAU;IAAAF,EAAA,CAAAG,YAAA,EAAa;;;;IAA5EH,EAAA,CAAAI,UAAA,UAAAK,OAAA,CAAc,aAAAA,OAAA;IAAuCT,EAAA,CAAAO,SAAA,GAAU;IAAVP,EAAA,CAAAQ,iBAAA,CAAAC,OAAA,CAAU;;;;;;IAS3GT,EAAA,CAAAC,cAAA,wBAA4D;IAEnCD,EAAA,CAAAU,UAAA,uBAAAC,iFAAAC,MAAA;MAAA,MAAAC,WAAA,GAAAb,EAAA,CAAAc,aAAA,CAAAC,GAAA;MAAA,MAAAC,OAAA,GAAAH,WAAA,CAAAI,SAAA;MAAA,MAAAC,MAAA,GAAAlB,EAAA,CAAAmB,aAAA;MAAA,OAAanB,EAAA,CAAAoB,WAAA,CAAAF,MAAA,CAAAG,UAAA,CAAAT,MAAA,EAAAI,OAAA,CAAwB;IAAA,EAAC,wBAAAM,kFAAAV,MAAA;MAAA,MAAAC,WAAA,GAAAb,EAAA,CAAAc,aAAA,CAAAC,GAAA;MAAA,MAAAC,OAAA,GAAAH,WAAA,CAAAI,SAAA;MAAA,MAAAM,OAAA,GAAAvB,EAAA,CAAAmB,aAAA;MAAA,OAAenB,EAAA,CAAAoB,WAAA,CAAAG,OAAA,CAAAF,UAAA,CAAAT,MAAA,EAAAI,OAAA,CAAwB;IAAA,EAAvC;IACzDhB,EAAA,CAAAC,cAAA,eAAU;IAAAD,EAAA,CAAAE,MAAA,aAAM;IAAAF,EAAA,CAAAG,YAAA,EAAW;;;;IAHlBH,EAAA,CAAAI,UAAA,SAAAY,OAAA,CAAa;;;;;;IAFhChB,EAAA,CAAAC,cAAA,cAAsD;IAElDD,EAAA,CAAAwB,UAAA,IAAAC,oDAAA,4BAMgB;IAClBzB,EAAA,CAAAG,YAAA,EAAW;IACXH,EAAA,CAAAC,cAAA,gBAA6D;IAArDD,EAAA,CAAAU,UAAA,mBAAAgB,6DAAA;MAAA1B,EAAA,CAAAc,aAAA,CAAAa,IAAA;MAAA,MAAAC,OAAA,GAAA5B,EAAA,CAAAmB,aAAA;MAAA,OAASnB,EAAA,CAAAoB,WAAA,CAAAQ,OAAA,CAAAC,OAAA,EAAS;IAAA,EAAC;IAAkC7B,EAAA,CAAAE,MAAA,WAAI;IAAAF,EAAA,CAAAG,YAAA,EAAS;;;;IAThEH,EAAA,CAAAO,SAAA,GAAmB;IAAnBP,EAAA,CAAAI,UAAA,YAAA0B,MAAA,CAAAC,OAAA,CAAmB;IACmB/B,EAAA,CAAAO,SAAA,GAAY;IAAZP,EAAA,CAAAI,UAAA,YAAA0B,MAAA,CAAAE,SAAA,CAAY;;;ADxB9D,OAAM,MAAOC,oBAAoB;EAsB/BC,YACEC,QAAkB,EACVC,cAA6B,EAC7BC,UAAsB,EACtBC,QAAmB,EACnBC,EAAe,EACfC,WAA8B,EAC9BC,iBAAoC;IALpC,KAAAL,cAAc,GAAdA,cAAc;IACd,KAAAC,UAAU,GAAVA,UAAU;IACV,KAAAC,QAAQ,GAARA,QAAQ;IACR,KAAAC,EAAE,GAAFA,EAAE;IACF,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,iBAAiB,GAAjBA,iBAAiB;IAxB3B,KAAAC,QAAQ,GAAqC;MAAEC,IAAI,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAC,CAAE,CAAC,CAAC;IACrE,KAAAC,QAAQ,GAAqC;MAAEF,IAAI,EAAE,EAAE;MAAEC,MAAM,EAAE;IAAC,CAAE,CAAC,CAAC;IACtE,KAAAE,YAAY,GAAW,EAAE;IAEzB,KAAAC,cAAc,GAAyBhD,aAAa,CAACiD,IAAI;IAEzD,KAAAC,aAAa,GAAGlD,aAAa;IAG7B,KAAAmD,cAAc,GAAiB,EAAE;IACjC,KAAAC,QAAQ,GAAa,EAAE;IAGvB,KAAAC,YAAY,GAAS,IAAIC,IAAI,EAAE;IAE/B,KAAAC,aAAa,GAAG,KAAK;IAWnB,IAAI,CAACC,OAAO,GAAG,IAAIF,IAAI,EAAE;EAC3B;EAEAG,QAAQA,CAAA;IACN,IAAI,CAACC,UAAU,EAAE;IAEjB,IAAI,CAAChB,iBAAiB,CAACiB,iBAAiB,EAAE,CAACC,SAAS,CAAC;MACnDC,IAAI,EAAEC,IAAI,IAAG;QACX,IAAI,CAACX,cAAc,GAAGW,IAAI;MAC5B;KACD,CAAC;IAEF,IAAI,CAACC,gBAAgB,EAAE;EACzB;EAEAL,UAAUA,CAAA;IACR,IAAI,CAAC1B,OAAO,GAAG;MACbgC,QAAQ,EAAEjE,QAAQ,CAACkE,KAAK;MACxBC,WAAW,EAAErE,WAAW,CAACoD,IAAI;MAC7BkB,sBAAsB,EAAE,IAAI,CAACC,cAAc,CAACC,IAAI,CAAC,IAAI,CAAC;MACtDC,oBAAoB,EAAE,IAAI;MAC1BC,SAAS,EAAE,IAAI;MACfC,SAAS,EAAE;QACTC,OAAO,EAAE;OACV;MACDC,SAAS,EAAE;QACTD,OAAO,EAAE;OACV;MACDE,WAAW,EAAE7E,WAAW,CAAC8E;KAC1B;EACH;EAEAC,QAAQA,CAACC,IAAkB,EAAEC,aAAoC;IAC/D,IAAI,CAACC,UAAU,GAAGD,aAAa;EACjC;EAEAzD,UAAUA,CAACT,MAA+B,EAAEiE,IAAS;IACnDjE,MAAM,CAACoE,cAAc,EAAE;IACvBpE,MAAM,CAACqE,eAAe,EAAE;IACxB,IAAI,CAACjD,SAAS,CAACkD,MAAM,CAAC,IAAI,CAAClD,SAAS,CAACmD,OAAO,CAACN,IAAI,CAAC,EAAE,CAAC,CAAC;IACtDO,OAAO,CAACC,GAAG,CAAC,IAAI,CAACrD,SAAS,CAAC;EAC7B;EAEAsD,OAAOA,CAAA;IACL,IAAI,CAACtD,SAAS,CAACuD,IAAI,CAAC;MAAEC,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE,CAAC;MAAEC,IAAI,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAC,CAAE,CAAC;EACvD;EACAxB,cAAcA,CAACyB,KAAiB,EAAEf,IAAkB;IAClDO,OAAO,CAACS,IAAI,CAAC,kBAAkB,EAAED,KAAK,EAAEf,IAAI,CAAC;IAC7C,IAAI,CAAC7C,SAAS,CAACuD,IAAI,CAACV,IAAI,CAAC;EAC3B;EAEAiB,mBAAmBA,CAAA;IACjBV,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAACvC,YAAY,CAAC;EAClD;EAEAgB,gBAAgBA,CAAA;IACd,MAAMiC,WAAW,GAAG,IAAI1C,IAAI,EAAE;IAC9B,MAAM2C,gBAAgB,GAAGC,IAAI,CAACC,IAAI,CAACH,WAAW,CAACI,UAAU,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE;IACtEJ,WAAW,CAACK,UAAU,CAACJ,gBAAgB,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAEhD,MAAMK,OAAO,GAAG,IAAIhD,IAAI,EAAE;IAC1BgD,OAAO,CAACC,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;IAE9B,OAAOP,WAAW,GAAGM,OAAO,EAAE;MAC5B,IAAI,CAAClD,QAAQ,CAACoC,IAAI,CAAC,IAAI,CAACgB,UAAU,CAACR,WAAW,CAAC,CAAC;MAChDA,WAAW,CAACK,UAAU,CAACL,WAAW,CAACI,UAAU,EAAE,GAAG,EAAE,CAAC;;EAEzD;EAGAI,UAAUA,CAACC,IAAU;IACnB,MAAMC,KAAK,GAAGD,IAAI,CAACE,QAAQ,EAAE,CAACC,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IACzD,MAAMC,OAAO,GAAGL,IAAI,CAACL,UAAU,EAAE,CAACQ,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAC7D,OAAO,GAAGH,KAAK,IAAII,OAAO,EAAE;EAC9B;EAEAC,mBAAmBA,CAACC,MAA4B;IAC9C,IAAI,CAACA,MAAM,EAAE;MACX,OAAO,CAAC;;IAGV,IAAIA,MAAM,KAAKhH,aAAa,CAACiH,SAAS,EAAE,OAAO,CAAC,CAAC,KAC5C,IAAID,MAAM,KAAKhH,aAAa,CAACkH,SAAS,EAAE,OAAO,CAAC,CAAC,KACjD,IAAIF,MAAM,KAAKhH,aAAa,CAACmH,WAAW,EAAE,OAAO,CAAC,CAAC,KACnD,OAAO,CAAC;EACf;EAEAC,gBAAgBA,CAAA;IACd,IAAIC,YAAY,GAAG,IAAI,CAACN,mBAAmB,CAAC,IAAI,CAAC/D,cAAc,CAAC;IAChE,MAAMsE,aAAa,GAAG,IAAI,CAACjE,YAAY,EAAEkE,kBAAkB,CAAC,OAAO,EAAE;MACnEC,IAAI,EAAE,SAAS;MACfC,KAAK,EAAE,MAAM;MACbC,GAAG,EAAE;KACN,CAAC;IAEF,IAAIC,oBAAoB,GAAG,IAAI,CAACC,gBAAgB,CAAC,IAAI,CAACC,kBAAkB,CAAC;IAEzE,MAAMC,QAAQ,GAAoB;MAChCC,YAAY,EAAEJ,oBAAoB;MAClCN,YAAY,EAAEA,YAAY;MAC1BW,eAAe,EAAEV,aAAa;MAC9BW,eAAe,EAAE,IAAI,CAAClF;KACvB;IAED,IAAI,CAACL,iBAAiB,CAAC0E,gBAAgB,CAACU,QAAQ,CAAC,CAAClE,SAAS,CAAC;MAC1DC,IAAI,EAAEC,IAAI,IAAG;QACX,IAAI,CAAC7B,SAAS,GAAG,EAAE;QACnB6B,IAAI,CAACoE,OAAO,CAACpD,IAAI,IAAG;UAClB,IAAI,CAAC7C,SAAS,CAACuD,IAAI,CAAC;YAAEC,CAAC,EAAEX,IAAI,CAACqD,SAAS;YAAEzC,CAAC,EAAEZ,IAAI,CAACsD,SAAS;YAAEzC,IAAI,EAAEb,IAAI,CAACa,IAAI;YAAEC,IAAI,EAAEd,IAAI,CAACc;UAAI,CAAE,CAAC;QACjG,CAAC,CAAC;QACF,IAAI,CAACrC,aAAa,GAAG,IAAI;MAC3B;KACD,CAAC;EAEJ;EAEAqE,gBAAgBA,CAACrH,cAAsB;IACrC,MAAM8H,eAAe,GAAG,IAAI,CAAClF,cAAc,CAACmF,IAAI,CAACxD,IAAI,IAAIA,IAAI,CAACvE,cAAc,KAAKA,cAAc,CAAC;IAEhG,IAAI8H,eAAe,EAAE;MACnB,OAAOA,eAAe,CAACN,YAAY;;IAGrC,OAAO,CAAC;EACV;EAIAjG,OAAOA,CAAA;IACL,IAAIyG,cAAc,GAAoB,EAAE;IACxC,IAAIR,YAAY,GAAG,IAAI,CAACH,gBAAgB,CAAC,IAAI,CAACC,kBAAkB,CAAC;IACjE,IAAI,CAAC5F,SAAS,CAACiG,OAAO,CAACpD,IAAI,IAAG;MAC5B,IAAI0D,IAAI,GAAkB;QACxBT,YAAY,EAAEA,YAAY;QAC1BpC,IAAI,EAAEb,IAAI,CAACa,IAAI;QACfC,IAAI,EAAEd,IAAI,CAACc,IAAI;QACfuC,SAAS,EAAErD,IAAI,CAACW,CAAC;QACjB2C,SAAS,EAAEtD,IAAI,CAACY;OACjB;MAED6C,cAAc,CAAC/C,IAAI,CAACgD,IAAI,CAAC;IAC3B,CAAC,CAAC;IAEF,IAAI,CAAC9F,iBAAiB,CAAC+F,UAAU,CAACF,cAAc,CAAC,CAAC3E,SAAS,CAAC;MAC1DC,IAAI,EAAEC,IAAI,IAAG;QACXuB,OAAO,CAACC,GAAG,CAACxB,IAAI,CAAC;MACnB;KACD,CAAC;EACJ;EAEA4E,YAAYA,CAAC7C,KAAU;IACrBR,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEO,KAAK,CAAC8C,KAAK,CAAC;EAE5C;EAAC,QAAAC,CAAA,G;qBAxLU1G,oBAAoB,EAAAjC,EAAA,CAAA4I,iBAAA,CAAA5I,EAAA,CAAA6I,QAAA,GAAA7I,EAAA,CAAA4I,iBAAA,CAAAE,EAAA,CAAAC,aAAA,GAAA/I,EAAA,CAAA4I,iBAAA,CAAA5I,EAAA,CAAAgJ,UAAA,GAAAhJ,EAAA,CAAA4I,iBAAA,CAAA5I,EAAA,CAAAiJ,SAAA,GAAAjJ,EAAA,CAAA4I,iBAAA,CAAAM,EAAA,CAAAC,WAAA,GAAAnJ,EAAA,CAAA4I,iBAAA,CAAAQ,EAAA,CAAAC,WAAA,GAAArJ,EAAA,CAAA4I,iBAAA,CAAAU,EAAA,CAAAC,iBAAA;EAAA;EAAA,QAAAC,EAAA,G;UAApBvH,oBAAoB;IAAAwH,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,8BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QClBjC/J,EAAA,CAAAC,cAAA,UAAK;QAEUD,EAAA,CAAAE,MAAA,iBAAU;QAAAF,EAAA,CAAAG,YAAA,EAAY;QACjCH,EAAA,CAAAC,cAAA,oBAA2C;QAA/BD,EAAA,CAAAU,UAAA,yBAAAuJ,gEAAArJ,MAAA;UAAA,OAAAoJ,GAAA,CAAApC,kBAAA,GAAAhH,MAAA;QAAA,EAA8B;QACxCZ,EAAA,CAAAwB,UAAA,IAAA0I,0CAAA,wBAC2C;QAC7ClK,EAAA,CAAAG,YAAA,EAAa;QAGfH,EAAA,CAAAC,cAAA,qBAAgB;QACHD,EAAA,CAAAE,MAAA,aAAM;QAAAF,EAAA,CAAAG,YAAA,EAAY;QAC7BH,EAAA,CAAAC,cAAA,oBAAuC;QAA3BD,EAAA,CAAAU,UAAA,yBAAAyJ,gEAAAvJ,MAAA;UAAA,OAAAoJ,GAAA,CAAAjH,cAAA,GAAAnC,MAAA;QAAA,EAA0B;QACpCZ,EAAA,CAAAC,cAAA,qBAAyC;QAAAD,EAAA,CAAAE,MAAA,YAAI;QAAAF,EAAA,CAAAG,YAAA,EAAa;QAC1DH,EAAA,CAAAC,cAAA,qBAA8C;QAC5CD,EAAA,CAAAE,MAAA,mBAAU;QAAAF,EAAA,CAAAG,YAAA,EAAa;QACrBH,EAAA,CAAAC,cAAA,qBAAgD;QAAAD,EAAA,CAAAE,MAAA,kBAAU;QAAAF,EAAA,CAAAG,YAAA,EAAa;QACvEH,EAAA,CAAAC,cAAA,qBAA8C;QAAAD,EAAA,CAAAE,MAAA,kBAAU;QAAAF,EAAA,CAAAG,YAAA,EAAa;QAK7EH,EAAA,CAAAC,cAAA,sBAAgB;QACHD,EAAA,CAAAE,MAAA,qBAAa;QAAAF,EAAA,CAAAG,YAAA,EAAY;QACpCH,EAAA,CAAAC,cAAA,gBAAoF;QAA3BD,EAAA,CAAAU,UAAA,2BAAA0J,8DAAAxJ,MAAA;UAAA,OAAAoJ,GAAA,CAAA5G,YAAA,GAAAxC,MAAA;QAAA,EAA0B;QAAnFZ,EAAA,CAAAG,YAAA,EAAoF;QACpFH,EAAA,CAAAqK,SAAA,gCAA4E;QAC5ErK,EAAA,CAAAC,cAAA,4BAA4D;QAApCD,EAAA,CAAAU,UAAA,wBAAA4J,oEAAA1J,MAAA;UAAA,OAAcoJ,GAAA,CAAAvB,YAAA,CAAA7H,MAAA,CAAoB;QAAA,EAAC;QAACZ,EAAA,CAAAG,YAAA,EAAiB;QAK/EH,EAAA,CAAAC,cAAA,sBAAgB;QACHD,EAAA,CAAAE,MAAA,YAAI;QAAAF,EAAA,CAAAG,YAAA,EAAY;QAC3BH,EAAA,CAAAC,cAAA,qBAAqC;QAAzBD,EAAA,CAAAU,UAAA,yBAAA6J,iEAAA3J,MAAA;UAAA,OAAAoJ,GAAA,CAAAlH,YAAA,GAAAlC,MAAA;QAAA,EAAwB;QAClCZ,EAAA,CAAAwB,UAAA,KAAAgJ,2CAAA,wBAAsH;QACxHxK,EAAA,CAAAG,YAAA,EAAa;QAIfH,EAAA,CAAAC,cAAA,iBAAsE;QAA9DD,EAAA,CAAAU,UAAA,mBAAA+J,uDAAA;UAAA,OAAST,GAAA,CAAA7C,gBAAA,EAAkB;QAAA,EAAC;QAAkCnH,EAAA,CAAAE,MAAA,YAAI;QAAAF,EAAA,CAAAG,YAAA,EAAS;QAErFH,EAAA,CAAAwB,UAAA,KAAAkJ,oCAAA,iBAWM;;;;QAhDU1K,EAAA,CAAAO,SAAA,GAA8B;QAA9BP,EAAA,CAAAI,UAAA,UAAA4J,GAAA,CAAApC,kBAAA,CAA8B;QACL5H,EAAA,CAAAO,SAAA,GAAiB;QAAjBP,EAAA,CAAAI,UAAA,YAAA4J,GAAA,CAAA9G,cAAA,CAAiB;QAO1ClD,EAAA,CAAAO,SAAA,GAA0B;QAA1BP,EAAA,CAAAI,UAAA,UAAA4J,GAAA,CAAAjH,cAAA,CAA0B;QACxB/C,EAAA,CAAAO,SAAA,GAA4B;QAA5BP,EAAA,CAAAI,UAAA,UAAA4J,GAAA,CAAA/G,aAAA,CAAAD,IAAA,CAA4B;QAC5BhD,EAAA,CAAAO,SAAA,GAAiC;QAAjCP,EAAA,CAAAI,UAAA,UAAA4J,GAAA,CAAA/G,aAAA,CAAA+D,SAAA,CAAiC;QAE7BhH,EAAA,CAAAO,SAAA,GAAmC;QAAnCP,EAAA,CAAAI,UAAA,UAAA4J,GAAA,CAAA/G,aAAA,CAAAiE,WAAA,CAAmC;QACnClH,EAAA,CAAAO,SAAA,GAAiC;QAAjCP,EAAA,CAAAI,UAAA,UAAA4J,GAAA,CAAA/G,aAAA,CAAAgE,SAAA,CAAiC;QAOnCjH,EAAA,CAAAO,SAAA,GAAwB;QAAxBP,EAAA,CAAAI,UAAA,kBAAAuK,GAAA,CAAwB,QAAAX,GAAA,CAAAzG,OAAA,aAAAyG,GAAA,CAAA5G,YAAA;QACHpD,EAAA,CAAAO,SAAA,GAAc;QAAdP,EAAA,CAAAI,UAAA,QAAAuK,GAAA,CAAc;QAQvC3K,EAAA,CAAAO,SAAA,GAAwB;QAAxBP,EAAA,CAAAI,UAAA,UAAA4J,GAAA,CAAAlH,YAAA,CAAwB;QACL9C,EAAA,CAAAO,SAAA,GAAW;QAAXP,EAAA,CAAAI,UAAA,YAAA4J,GAAA,CAAA7G,QAAA,CAAW;QAOxCnD,EAAA,CAAAO,SAAA,GAAmB;QAAnBP,EAAA,CAAAI,UAAA,SAAA4J,GAAA,CAAA1G,aAAA,CAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}