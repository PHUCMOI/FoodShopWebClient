{"ast":null,"code":"import { geometry as geom } from '@progress/kendo-drawing';\nimport TextBox from './text-box';\nimport Box from './box';\nimport rectToBox from './utils/rect-to-box';\nimport { AXIS_LABEL_CLICK, CENTER, TOP, BOTTOM, LEFT, DEFAULT_PRECISION, X, Y } from '../common/constants';\nimport { eventElement, round, setDefaultOptions } from '../common';\nclass AxisLabel extends TextBox {\n  constructor(value, text, index, dataItem, options) {\n    super(text, options);\n    this.text = text;\n    this.value = value;\n    this.index = index;\n    this.dataItem = dataItem;\n    this.reflow(new Box());\n  }\n  visualContext(targetBox) {\n    const context = super.visualContext(targetBox);\n    context.value = this.value;\n    context.dataItem = this.dataItem;\n    context.format = this.options.format;\n    context.culture = this.options.culture;\n    return context;\n  }\n  click(widget, e) {\n    widget.trigger(AXIS_LABEL_CLICK, {\n      element: eventElement(e),\n      value: this.value,\n      text: this.text,\n      index: this.index,\n      dataItem: this.dataItem,\n      axis: this.parent.options\n    });\n  }\n  rotate() {\n    if (this.options.alignRotation !== CENTER) {\n      const box = this.normalBox.toRect();\n      const transform = this.rotationTransform();\n      this.box = rectToBox(box.bbox(transform.matrix()));\n    } else {\n      super.rotate();\n    }\n    return this.box;\n  }\n  rotationTransform() {\n    const options = this.options;\n    const rotation = options.rotation;\n    if (!rotation) {\n      return null;\n    }\n    if (options.alignRotation === CENTER) {\n      return super.rotationTransform();\n    }\n    const rotationMatrix = geom.transform().rotate(rotation).matrix();\n    const box = this.normalBox.toRect();\n    const rect = this.targetBox.toRect();\n    const rotationOrigin = options.rotationOrigin || TOP;\n    const alignAxis = rotationOrigin === TOP || rotationOrigin === BOTTOM ? X : Y;\n    const distanceAxis = rotationOrigin === TOP || rotationOrigin === BOTTOM ? Y : X;\n    const axisAnchor = rotationOrigin === TOP || rotationOrigin === LEFT ? rect.origin : rect.bottomRight();\n    const topLeft = box.topLeft().transformCopy(rotationMatrix);\n    const topRight = box.topRight().transformCopy(rotationMatrix);\n    const bottomRight = box.bottomRight().transformCopy(rotationMatrix);\n    const bottomLeft = box.bottomLeft().transformCopy(rotationMatrix);\n    const rotatedBox = geom.Rect.fromPoints(topLeft, topRight, bottomRight, bottomLeft);\n    const translate = {\n      [distanceAxis]: rect.origin[distanceAxis] - rotatedBox.origin[distanceAxis]\n    };\n    const distanceLeft = Math.abs(topLeft[distanceAxis] + translate[distanceAxis] - axisAnchor[distanceAxis]);\n    const distanceRight = Math.abs(topRight[distanceAxis] + translate[distanceAxis] - axisAnchor[distanceAxis]);\n    let alignStart, alignEnd;\n    if (round(distanceLeft, DEFAULT_PRECISION) === round(distanceRight, DEFAULT_PRECISION)) {\n      alignStart = topLeft;\n      alignEnd = topRight;\n    } else if (distanceRight < distanceLeft) {\n      alignStart = topRight;\n      alignEnd = bottomRight;\n    } else {\n      alignStart = topLeft;\n      alignEnd = bottomLeft;\n    }\n    const alignCenter = alignStart[alignAxis] + (alignEnd[alignAxis] - alignStart[alignAxis]) / 2;\n    translate[alignAxis] = rect.center()[alignAxis] - alignCenter;\n    return geom.transform().translate(translate.x, translate.y).rotate(rotation);\n  }\n}\nsetDefaultOptions(AxisLabel, {\n  _autoReflow: false\n});\nexport default AxisLabel;","map":{"version":3,"names":["geometry","geom","TextBox","Box","rectToBox","AXIS_LABEL_CLICK","CENTER","TOP","BOTTOM","LEFT","DEFAULT_PRECISION","X","Y","eventElement","round","setDefaultOptions","AxisLabel","constructor","value","text","index","dataItem","options","reflow","visualContext","targetBox","context","format","culture","click","widget","e","trigger","element","axis","parent","rotate","alignRotation","box","normalBox","toRect","transform","rotationTransform","bbox","matrix","rotation","rotationMatrix","rect","rotationOrigin","alignAxis","distanceAxis","axisAnchor","origin","bottomRight","topLeft","transformCopy","topRight","bottomLeft","rotatedBox","Rect","fromPoints","translate","distanceLeft","Math","abs","distanceRight","alignStart","alignEnd","alignCenter","center","x","y","_autoReflow"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-charts/dist/es2015/core/axis-label.js"],"sourcesContent":["import { geometry as geom } from '@progress/kendo-drawing';\n\nimport TextBox from './text-box';\nimport Box from './box';\n\nimport rectToBox from './utils/rect-to-box';\n\nimport { AXIS_LABEL_CLICK, CENTER, TOP, BOTTOM, LEFT, DEFAULT_PRECISION, X, Y } from '../common/constants';\n\nimport { eventElement, round, setDefaultOptions } from '../common';\n\nclass AxisLabel extends TextBox {\n    constructor(value, text, index, dataItem, options) {\n        super(text, options);\n\n        this.text = text;\n        this.value = value;\n        this.index = index;\n        this.dataItem = dataItem;\n        this.reflow(new Box());\n    }\n\n    visualContext(targetBox) {\n        const context = super.visualContext(targetBox);\n\n        context.value = this.value;\n        context.dataItem = this.dataItem;\n        context.format = this.options.format;\n        context.culture = this.options.culture;\n\n        return context;\n    }\n\n    click(widget, e) {\n\n        widget.trigger(AXIS_LABEL_CLICK, {\n            element: eventElement(e),\n            value: this.value,\n            text: this.text,\n            index: this.index,\n            dataItem: this.dataItem,\n            axis: this.parent.options\n        });\n    }\n\n    rotate() {\n        if (this.options.alignRotation !== CENTER) {\n            const box = this.normalBox.toRect();\n            const transform = this.rotationTransform();\n\n            this.box = rectToBox(box.bbox(transform.matrix()));\n        } else {\n            super.rotate();\n        }\n\n        return this.box;\n    }\n\n    rotationTransform() {\n        const options = this.options;\n        const rotation = options.rotation;\n        if (!rotation) {\n            return null;\n        }\n\n        if (options.alignRotation === CENTER) {\n            return super.rotationTransform();\n        }\n\n        const rotationMatrix = geom.transform().rotate(rotation).matrix();\n        const box = this.normalBox.toRect();\n        const rect = this.targetBox.toRect();\n\n        const rotationOrigin = options.rotationOrigin || TOP;\n        const alignAxis = rotationOrigin === TOP || rotationOrigin === BOTTOM ? X : Y;\n        const distanceAxis = rotationOrigin === TOP || rotationOrigin === BOTTOM ? Y : X;\n        const axisAnchor = rotationOrigin === TOP || rotationOrigin === LEFT ? rect.origin : rect.bottomRight();\n\n        const topLeft = box.topLeft().transformCopy(rotationMatrix);\n        const topRight = box.topRight().transformCopy(rotationMatrix);\n        const bottomRight = box.bottomRight().transformCopy(rotationMatrix);\n        const bottomLeft = box.bottomLeft().transformCopy(rotationMatrix);\n        const rotatedBox = geom.Rect.fromPoints(topLeft, topRight, bottomRight, bottomLeft);\n\n        const translate = {\n            [distanceAxis]: rect.origin[distanceAxis] - rotatedBox.origin[distanceAxis]\n        };\n\n        const distanceLeft = Math.abs(topLeft[distanceAxis] + translate[distanceAxis] - axisAnchor[distanceAxis]);\n        const distanceRight = Math.abs(topRight[distanceAxis] + translate[distanceAxis] - axisAnchor[distanceAxis]);\n\n        let alignStart, alignEnd;\n\n        if (round(distanceLeft, DEFAULT_PRECISION) === round(distanceRight, DEFAULT_PRECISION)) {\n            alignStart = topLeft;\n            alignEnd = topRight;\n        } else if (distanceRight < distanceLeft) {\n            alignStart = topRight;\n            alignEnd = bottomRight;\n        } else {\n            alignStart = topLeft;\n            alignEnd = bottomLeft;\n        }\n\n        const alignCenter = alignStart[alignAxis] + (alignEnd[alignAxis] - alignStart[alignAxis]) / 2;\n        translate[alignAxis] = rect.center()[alignAxis] - alignCenter;\n\n        return geom.transform()\n            .translate(translate.x, translate.y)\n            .rotate(rotation);\n    }\n}\n\nsetDefaultOptions(AxisLabel, {\n    _autoReflow: false\n});\n\nexport default AxisLabel;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}