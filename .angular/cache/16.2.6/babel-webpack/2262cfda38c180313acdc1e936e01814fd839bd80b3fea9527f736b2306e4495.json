{"ast":null,"code":"import { drawing as draw, geometry as geom } from '@progress/kendo-drawing';\nimport BoxElement from './box-element';\nimport FloatElement from './float-element';\nimport Text from './text';\nimport Box from './box';\nimport rectToBox from './utils/rect-to-box';\nimport { getSpacing, deepExtend, defined } from '../common';\nimport { X, Y } from '../common/constants';\nconst ROWS_SPLIT_REGEX = /\\n/m;\nclass TextBox extends BoxElement {\n  constructor(content, options, data) {\n    super(options);\n    this.content = content;\n    this.data = data;\n    this._initContainer();\n    if (this.options._autoReflow !== false) {\n      this.reflow(new Box());\n    }\n  }\n  _initContainer() {\n    const options = this.options;\n    const rows = String(this.content).split(ROWS_SPLIT_REGEX);\n    const floatElement = new FloatElement({\n      vertical: true,\n      align: options.align,\n      wrap: false\n    });\n    const textOptions = deepExtend({}, options, {\n      opacity: 1,\n      animation: null\n    });\n    this.container = floatElement;\n    this.append(floatElement);\n    for (let rowIdx = 0; rowIdx < rows.length; rowIdx++) {\n      let text = new Text(rows[rowIdx].trim(), textOptions);\n      floatElement.append(text);\n    }\n  }\n  reflow(targetBox) {\n    const options = this.options;\n    const visualFn = options.visual;\n    this.container.options.align = options.align;\n    if (visualFn && !this._boxReflow) {\n      let visualBox = targetBox;\n      if (!visualBox.hasSize()) {\n        this._boxReflow = true;\n        this.reflow(visualBox);\n        this._boxReflow = false;\n        visualBox = this.box;\n      }\n      const visual = this.visual = visualFn(this.visualContext(visualBox));\n      if (visual) {\n        visualBox = rectToBox(visual.clippedBBox() || new geom.Rect());\n        visual.options.zIndex = options.zIndex;\n      }\n      this.box = this.contentBox = this.paddingBox = visualBox;\n    } else {\n      super.reflow(targetBox);\n      if (options.rotation) {\n        const margin = getSpacing(options.margin);\n        let box = this.box.unpad(margin);\n        this.targetBox = targetBox;\n        this.normalBox = box.clone();\n        box = this.rotate();\n        box.translate(margin.left - margin.right, margin.top - margin.bottom);\n        this.rotatedBox = box.clone();\n        box.pad(margin);\n      }\n    }\n  }\n  createVisual() {\n    const options = this.options;\n    this.visual = new draw.Group({\n      transform: this.rotationTransform(),\n      zIndex: options.zIndex,\n      noclip: options.noclip\n    });\n    if (this.hasBox()) {\n      const box = draw.Path.fromRect(this.paddingBox.toRect(), this.visualStyle());\n      this.visual.append(box);\n    }\n  }\n  renderVisual() {\n    if (!this.options.visible) {\n      return;\n    }\n    if (this.options.visual) {\n      const visual = this.visual;\n      if (visual && !defined(visual.options.noclip)) {\n        visual.options.noclip = this.options.noclip;\n      }\n      this.addVisual();\n      this.createAnimation();\n    } else {\n      super.renderVisual();\n    }\n  }\n  visualContext(targetBox) {\n    const context = {\n      text: this.content,\n      rect: targetBox.toRect(),\n      sender: this.getSender(),\n      options: this.options,\n      createVisual: () => {\n        this._boxReflow = true;\n        this.reflow(targetBox);\n        this._boxReflow = false;\n        return this.getDefaultVisual();\n      }\n    };\n    if (this.data) {\n      Object.assign(context, this.data);\n    }\n    return context;\n  }\n  getDefaultVisual() {\n    this.createVisual();\n    this.renderChildren();\n    const visual = this.visual;\n    delete this.visual;\n    return visual;\n  }\n  rotate() {\n    const options = this.options;\n    this.box.rotate(options.rotation);\n    this.align(this.targetBox, X, options.align);\n    this.align(this.targetBox, Y, options.vAlign);\n    return this.box;\n  }\n  rotationTransform() {\n    const rotation = this.options.rotation;\n    if (!rotation) {\n      return null;\n    }\n    const {\n      x: cx,\n      y: cy\n    } = this.normalBox.center();\n    const boxCenter = this.rotatedBox.center();\n    return geom.transform().translate(boxCenter.x - cx, boxCenter.y - cy).rotate(rotation, [cx, cy]);\n  }\n}\nexport default TextBox;","map":{"version":3,"names":["drawing","draw","geometry","geom","BoxElement","FloatElement","Text","Box","rectToBox","getSpacing","deepExtend","defined","X","Y","ROWS_SPLIT_REGEX","TextBox","constructor","content","options","data","_initContainer","_autoReflow","reflow","rows","String","split","floatElement","vertical","align","wrap","textOptions","opacity","animation","container","append","rowIdx","length","text","trim","targetBox","visualFn","visual","_boxReflow","visualBox","hasSize","box","visualContext","clippedBBox","Rect","zIndex","contentBox","paddingBox","rotation","margin","unpad","normalBox","clone","rotate","translate","left","right","top","bottom","rotatedBox","pad","createVisual","Group","transform","rotationTransform","noclip","hasBox","Path","fromRect","toRect","visualStyle","renderVisual","visible","addVisual","createAnimation","context","rect","sender","getSender","getDefaultVisual","Object","assign","renderChildren","vAlign","x","cx","y","cy","center","boxCenter"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-charts/dist/es2015/core/text-box.js"],"sourcesContent":["import { drawing as draw, geometry as geom } from '@progress/kendo-drawing';\n\nimport BoxElement from './box-element';\nimport FloatElement from './float-element';\nimport Text from './text';\nimport Box from './box';\n\nimport rectToBox from './utils/rect-to-box';\n\nimport { getSpacing, deepExtend, defined } from '../common';\nimport { X, Y } from '../common/constants';\n\nconst ROWS_SPLIT_REGEX = /\\n/m;\n\nclass TextBox extends BoxElement {\n\n    constructor(content, options, data) {\n        super(options);\n        this.content = content;\n        this.data = data;\n\n        this._initContainer();\n        if (this.options._autoReflow !== false) {\n            this.reflow(new Box());\n        }\n    }\n\n    _initContainer() {\n        const options = this.options;\n        const rows = String(this.content).split(ROWS_SPLIT_REGEX);\n        const floatElement = new FloatElement({ vertical: true, align: options.align, wrap: false });\n        const textOptions = deepExtend({ }, options, { opacity: 1, animation: null });\n\n        this.container = floatElement;\n        this.append(floatElement);\n\n        for (let rowIdx = 0; rowIdx < rows.length; rowIdx++) {\n            let text = new Text(rows[rowIdx].trim(), textOptions);\n            floatElement.append(text);\n        }\n    }\n\n    reflow(targetBox) {\n        const options = this.options;\n        const visualFn = options.visual;\n        this.container.options.align = options.align;\n\n        if (visualFn && !this._boxReflow) {\n            let visualBox = targetBox;\n            if (!visualBox.hasSize()) {\n                this._boxReflow = true;\n                this.reflow(visualBox);\n                this._boxReflow = false;\n                visualBox = this.box;\n            }\n            const visual = this.visual = visualFn(this.visualContext(visualBox));\n\n            if (visual) {\n                visualBox = rectToBox(visual.clippedBBox() || new geom.Rect());\n\n                visual.options.zIndex = options.zIndex;\n            }\n\n            this.box = this.contentBox = this.paddingBox = visualBox;\n        } else {\n            super.reflow(targetBox);\n\n            if (options.rotation) {\n                const margin = getSpacing(options.margin);\n                let box = this.box.unpad(margin);\n\n                this.targetBox = targetBox;\n                this.normalBox = box.clone();\n\n                box = this.rotate();\n                box.translate(margin.left - margin.right, margin.top - margin.bottom);\n\n                this.rotatedBox = box.clone();\n\n                box.pad(margin);\n            }\n        }\n    }\n\n    createVisual() {\n        const options = this.options;\n\n        this.visual = new draw.Group({\n            transform: this.rotationTransform(),\n            zIndex: options.zIndex,\n            noclip: options.noclip\n        });\n\n        if (this.hasBox()) {\n            const box = draw.Path.fromRect(this.paddingBox.toRect(), this.visualStyle());\n            this.visual.append(box);\n        }\n    }\n\n    renderVisual() {\n        if (!this.options.visible) {\n            return;\n        }\n\n        if (this.options.visual) {\n            const visual = this.visual;\n            if (visual && !defined(visual.options.noclip)) {\n                visual.options.noclip = this.options.noclip;\n            }\n            this.addVisual();\n            this.createAnimation();\n        } else {\n            super.renderVisual();\n        }\n    }\n\n    visualContext(targetBox) {\n        const context = {\n            text: this.content,\n            rect: targetBox.toRect(),\n            sender: this.getSender(),\n            options: this.options,\n            createVisual: () => {\n                this._boxReflow = true;\n                this.reflow(targetBox);\n                this._boxReflow = false;\n                return this.getDefaultVisual();\n            }\n        };\n        if (this.data) {\n            Object.assign(context, this.data);\n        }\n\n        return context;\n    }\n\n    getDefaultVisual() {\n        this.createVisual();\n        this.renderChildren();\n        const visual = this.visual;\n        delete this.visual;\n        return visual;\n    }\n\n    rotate() {\n        const options = this.options;\n        this.box.rotate(options.rotation);\n        this.align(this.targetBox, X, options.align);\n        this.align(this.targetBox, Y, options.vAlign);\n        return this.box;\n    }\n\n    rotationTransform() {\n        const rotation = this.options.rotation;\n        if (!rotation) {\n            return null;\n        }\n\n        const { x: cx, y: cy } = this.normalBox.center();\n        const boxCenter = this.rotatedBox.center();\n\n        return geom.transform()\n                   .translate(boxCenter.x - cx, boxCenter.y - cy)\n                   .rotate(rotation, [ cx, cy ]);\n    }\n}\n\nexport default TextBox;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}