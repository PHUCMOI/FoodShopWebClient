{"ast":null,"code":"import PieChart from '../pie-chart/pie-chart';\nimport DonutSegment from './donut-segment';\nimport { INITIAL_ANIMATION_DURATION } from '../constants';\nimport { deepExtend, defined, setDefaultOptions, valueOrDefault } from '../../common';\nconst DONUT_SECTOR_ANIM_DELAY = 50;\nclass DonutChart extends PieChart {\n  addValue(value, sector, fields) {\n    const segmentOptions = deepExtend({}, fields.series, {\n      index: fields.index\n    });\n    this.evalSegmentOptions(segmentOptions, value, fields);\n    this.createLegendItem(value, segmentOptions, fields);\n    if (fields.visible === false) {\n      return;\n    }\n    const segment = new DonutSegment(value, sector, segmentOptions);\n    Object.assign(segment, fields);\n    this.append(segment);\n    this.points.push(segment);\n  }\n  reflow(targetBox) {\n    const options = this.options;\n    const box = targetBox.clone();\n    const space = 5;\n    const minWidth = Math.min(box.width(), box.height());\n    const halfMinWidth = minWidth / 2;\n    const defaultPadding = minWidth - minWidth * 0.85;\n    const series = options.series;\n    const seriesCount = series.length;\n    let padding = valueOrDefault(options.padding, defaultPadding);\n    padding = padding > halfMinWidth - space ? halfMinWidth - space : padding;\n    let totalSize = halfMinWidth - padding;\n    let seriesWithoutSize = 0;\n    let holeSize;\n    for (let i = 0; i < seriesCount; i++) {\n      const currentSeries = series[i];\n      if (i === 0) {\n        if (defined(currentSeries.holeSize)) {\n          holeSize = currentSeries.holeSize;\n          totalSize -= currentSeries.holeSize;\n        }\n      }\n      if (defined(currentSeries.size)) {\n        totalSize -= currentSeries.size;\n      } else {\n        seriesWithoutSize++;\n      }\n      if (defined(currentSeries.margin) && i !== seriesCount - 1) {\n        totalSize -= currentSeries.margin;\n      }\n    }\n    if (!defined(holeSize)) {\n      const currentSize = (halfMinWidth - padding) / (seriesCount + 0.75);\n      holeSize = currentSize * 0.75;\n      totalSize -= holeSize;\n    }\n    let innerRadius = holeSize;\n    let margin = 0;\n    let size, radius;\n    this.seriesConfigs = [];\n    for (let i = 0; i < seriesCount; i++) {\n      const currentSeries = series[i];\n      size = valueOrDefault(currentSeries.size, totalSize / seriesWithoutSize);\n      innerRadius += margin;\n      radius = innerRadius + size;\n      this.seriesConfigs.push({\n        innerRadius: innerRadius,\n        radius: radius\n      });\n      margin = currentSeries.margin || 0;\n      innerRadius = radius;\n    }\n    super.reflow(targetBox);\n  }\n  animationDelay(categoryIndex, seriesIndex, seriesCount) {\n    return categoryIndex * DONUT_SECTOR_ANIM_DELAY + INITIAL_ANIMATION_DURATION * (seriesIndex + 1) / (seriesCount + 1);\n  }\n}\nsetDefaultOptions(DonutChart, {\n  startAngle: 90,\n  connectors: {\n    width: 2,\n    color: \"#939393\",\n    padding: 8\n  }\n});\nexport default DonutChart;","map":{"version":3,"names":["PieChart","DonutSegment","INITIAL_ANIMATION_DURATION","deepExtend","defined","setDefaultOptions","valueOrDefault","DONUT_SECTOR_ANIM_DELAY","DonutChart","addValue","value","sector","fields","segmentOptions","series","index","evalSegmentOptions","createLegendItem","visible","segment","Object","assign","append","points","push","reflow","targetBox","options","box","clone","space","minWidth","Math","min","width","height","halfMinWidth","defaultPadding","seriesCount","length","padding","totalSize","seriesWithoutSize","holeSize","i","currentSeries","size","margin","currentSize","innerRadius","radius","seriesConfigs","animationDelay","categoryIndex","seriesIndex","startAngle","connectors","color"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-charts/dist/es2015/chart/donut-chart/donut-chart.js"],"sourcesContent":["import PieChart from '../pie-chart/pie-chart';\nimport DonutSegment from './donut-segment';\n\nimport { INITIAL_ANIMATION_DURATION } from '../constants';\n\nimport { deepExtend, defined, setDefaultOptions, valueOrDefault } from '../../common';\n\nconst DONUT_SECTOR_ANIM_DELAY = 50;\n\nclass DonutChart extends PieChart {\n    addValue(value, sector, fields) {\n        const segmentOptions = deepExtend({}, fields.series, { index: fields.index });\n        this.evalSegmentOptions(segmentOptions, value, fields);\n\n        this.createLegendItem(value, segmentOptions, fields);\n\n        if (fields.visible === false) {\n            return;\n        }\n\n        const segment = new DonutSegment(value, sector, segmentOptions);\n\n        Object.assign(segment, fields);\n        this.append(segment);\n        this.points.push(segment);\n    }\n\n    reflow(targetBox) {\n        const options = this.options;\n        const box = targetBox.clone();\n        const space = 5;\n        const minWidth = Math.min(box.width(), box.height());\n        const halfMinWidth = minWidth / 2;\n        const defaultPadding = minWidth - minWidth * 0.85;\n        const series = options.series;\n        const seriesCount = series.length;\n\n        let padding = valueOrDefault(options.padding, defaultPadding);\n        padding = padding > halfMinWidth - space ? halfMinWidth - space : padding;\n\n        let totalSize = halfMinWidth - padding;\n        let seriesWithoutSize = 0;\n        let holeSize;\n\n        for (let i = 0; i < seriesCount; i++) {\n            const currentSeries = series[i];\n            if (i === 0) {\n                if (defined(currentSeries.holeSize)) {\n                    holeSize = currentSeries.holeSize;\n                    totalSize -= currentSeries.holeSize;\n                }\n            }\n\n            if (defined(currentSeries.size)) {\n                totalSize -= currentSeries.size;\n            } else {\n                seriesWithoutSize++;\n            }\n\n            if (defined(currentSeries.margin) && i !== seriesCount - 1) {\n                totalSize -= currentSeries.margin;\n            }\n        }\n\n        if (!defined(holeSize)) {\n            const currentSize = (halfMinWidth - padding) / (seriesCount + 0.75);\n            holeSize = currentSize * 0.75;\n            totalSize -= holeSize;\n        }\n\n        let innerRadius = holeSize;\n        let margin = 0;\n        let size, radius;\n\n        this.seriesConfigs = [];\n\n        for (let i = 0; i < seriesCount; i++) {\n            const currentSeries = series[i];\n            size = valueOrDefault(currentSeries.size, totalSize / seriesWithoutSize);\n            innerRadius += margin;\n            radius = innerRadius + size;\n            this.seriesConfigs.push({ innerRadius: innerRadius, radius: radius });\n            margin = currentSeries.margin || 0;\n            innerRadius = radius;\n        }\n\n        super.reflow(targetBox);\n    }\n\n    animationDelay(categoryIndex, seriesIndex, seriesCount) {\n        return categoryIndex * DONUT_SECTOR_ANIM_DELAY +\n            (INITIAL_ANIMATION_DURATION * (seriesIndex + 1) / (seriesCount + 1));\n    }\n}\n\n\nsetDefaultOptions(DonutChart, {\n    startAngle: 90,\n    connectors: {\n        width: 2,\n        color: \"#939393\",\n        padding: 8\n    }\n});\n\nexport default DonutChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}