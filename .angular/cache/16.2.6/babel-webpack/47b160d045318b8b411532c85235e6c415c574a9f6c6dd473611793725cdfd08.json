{"ast":null,"code":"import { geometry as g } from '@progress/kendo-drawing';\nimport { Class, setDefaultOptions, limitValue, rad, deg, deepExtend } from '../common';\nimport { Location } from './location';\nimport { datums } from './datums';\nlet math = Math,\n  atan = math.atan,\n  exp = math.exp,\n  pow = math.pow,\n  sin = math.sin,\n  log = math.log,\n  tan = math.tan,\n  Point = g.Point;\nlet PI = math.PI,\n  PI_DIV_2 = PI / 2,\n  PI_DIV_4 = PI / 4,\n  DEG_TO_RAD = PI / 180;\nlet WGS84 = datums.WGS84;\n\n// WGS 84 / World Mercator\nexport class Mercator extends Class {\n  constructor(options) {\n    super();\n    this.initProperties();\n    this._initOptions(options);\n  }\n  _initOptions(options) {\n    this.options = deepExtend({}, this.options, options);\n  }\n  initProperties() {\n    // super.initProperties();\n\n    deepExtend(this, {\n      MAX_LNG: 180,\n      MAX_LAT: 85.0840590501,\n      INVERSE_ITERATIONS: 15,\n      INVERSE_CONVERGENCE: 1e-12\n    });\n  }\n  forward(loc, clamp) {\n    let proj = this,\n      options = proj.options,\n      datum = options.datum,\n      r = datum.a,\n      lng0 = options.centralMeridian,\n      lat = limitValue(loc.lat, -proj.MAX_LAT, proj.MAX_LAT),\n      lng = clamp ? limitValue(loc.lng, -proj.MAX_LNG, proj.MAX_LNG) : loc.lng,\n      x = rad(lng - lng0) * r,\n      y = proj._projectLat(lat);\n    return new Point(x, y);\n  }\n  _projectLat(lat) {\n    let datum = this.options.datum,\n      ecc = datum.e,\n      r = datum.a,\n      y = rad(lat),\n      ts = tan(PI_DIV_4 + y / 2),\n      con = ecc * sin(y),\n      p = pow((1 - con) / (1 + con), ecc / 2);\n\n    // See: http://en.wikipedia.org/wiki/Mercator_projection#Generalization_to_the_ellipsoid\n    return r * log(ts * p);\n  }\n  inverse(point, clamp) {\n    let proj = this,\n      options = proj.options,\n      datum = options.datum,\n      r = datum.a,\n      lng0 = options.centralMeridian,\n      lng = point.x / (DEG_TO_RAD * r) + lng0,\n      lat = limitValue(proj._inverseY(point.y), -proj.MAX_LAT, proj.MAX_LAT);\n    if (clamp) {\n      lng = limitValue(lng, -proj.MAX_LNG, proj.MAX_LNG);\n    }\n    return new Location(lat, lng);\n  }\n  _inverseY(y) {\n    let proj = this,\n      datum = proj.options.datum,\n      r = datum.a,\n      ecc = datum.e,\n      ecch = ecc / 2,\n      ts = exp(-y / r),\n      phi = PI_DIV_2 - 2 * atan(ts),\n      i;\n    for (i = 0; i <= proj.INVERSE_ITERATIONS; i++) {\n      let con = ecc * sin(phi),\n        p = pow((1 - con) / (1 + con), ecch),\n        dphi = PI_DIV_2 - 2 * atan(ts * p) - phi;\n      phi += dphi;\n      if (math.abs(dphi) <= proj.INVERSE_CONVERGENCE) {\n        break;\n      }\n    }\n    return deg(phi);\n  }\n}\nsetDefaultOptions(Mercator, {\n  centralMeridian: 0,\n  datum: WGS84\n});\n\n// WGS 84 / Pseudo-Mercator\n// Used by Google Maps, Bing, OSM, etc.\n// Spherical projection of ellipsoidal coordinates.\nexport class SphericalMercator extends Mercator {\n  initProperties() {\n    super.initProperties();\n    deepExtend(this, {\n      MAX_LAT: 85.0511287798\n    });\n  }\n  _projectLat(lat) {\n    let r = this.options.datum.a,\n      y = rad(lat),\n      ts = tan(PI_DIV_4 + y / 2);\n    return r * log(ts);\n  }\n  _inverseY(y) {\n    let r = this.options.datum.a,\n      ts = exp(-y / r);\n    return deg(PI_DIV_2 - 2 * atan(ts));\n  }\n}\nexport class Equirectangular extends Class {\n  forward(loc) {\n    return new Point(loc.lng, loc.lat);\n  }\n  inverse(point) {\n    return new Location(point.y, point.x);\n  }\n}\n\n// This is the projected coordinate system used for rendering maps in Google Maps, OpenStreetMap, etc\n// Unit: metre\n// Geodetic CRS: WGS 84\n// Scope: Certain Web mapping and visualisation applications. It is not a recognised geodetic system: for that see ellipsoidal Mercator CRS code 3395 (WGS 84 / World Mercator).\n// Remarks: Uses spherical development of ellipsoidal coordinates. Relative to WGS 84 / World Mercator (CRS code 3395) errors of 0.7 percent in scale and differences in northing of up to 43km in the map (equivalent to 21km on the ground) may arise.\n// Area of use: World between 85.06째S and 85.06째N.\n// Coordinate system: Cartesian 2D CS. Axes: easting, northing (X,Y). Orientations: east, north. UoM: m.\n// https://epsg.io/3857\nexport class EPSG3857 extends Class {\n  constructor() {\n    super();\n    let crs = this,\n      proj = crs._proj = new SphericalMercator();\n    let c = this.c = 2 * PI * proj.options.datum.a;\n\n    // transfrom matrix\n    // Scale circumference to 1, mirror Y and shift origin to top left\n    this._tm = g.transform().translate(0.5, 0.5).scale(1 / c, -1 / c);\n\n    // Inverse transform matrix\n    this._itm = g.transform().scale(c, -c).translate(-0.5, -0.5);\n  }\n\n  // Location <-> Point (screen coordinates for a given scale)\n  toPoint(loc, scale, clamp) {\n    let point = this._proj.forward(loc, clamp);\n    return point.transform(this._tm).scale(scale || 1);\n  }\n  toLocation(point, scale, clamp) {\n    let newPoint = point.clone().scale(1 / (scale || 1)).transform(this._itm);\n    return this._proj.inverse(newPoint, clamp);\n  }\n}\n\n// Unit: metre\n// Geodetic CRS: WGS 84\n// Scope: Very small scale mapping.\n// Remarks: Euro-centric view of world excluding polar areas.\n// Area of use: World between 80째S and 84째N.\n// Coordinate system: Cartesian 2D CS. Axes: easting, northing (E,N). Orientations: east, north. UoM: m.\n// https://epsg.io/3395\nexport class EPSG3395 extends Class {\n  constructor() {\n    super();\n    this._proj = new Mercator();\n  }\n  toPoint(loc) {\n    return this._proj.forward(loc);\n  }\n  toLocation(point) {\n    return this._proj.inverse(point);\n  }\n}\n\n// Unit: degree\n// Geodetic CRS: WGS 84\n// Scope: Horizontal component of 3D system. Used by the GPS satellite navigation system and for NATO military geodetic surveying.\n// Area of use: World.\n// Coordinate system: Ellipsoidal 2D CS. Axes: latitude, longitude. Orientations: north, east. UoM: degree\n// https://epsg.io/4326\nexport class EPSG4326 extends Class {\n  constructor() {\n    super();\n    this._proj = new Equirectangular();\n  }\n  toPoint(loc) {\n    return this._proj.forward(loc);\n  }\n  toLocation(point) {\n    return this._proj.inverse(point);\n  }\n}","map":{"version":3,"names":["geometry","g","Class","setDefaultOptions","limitValue","rad","deg","deepExtend","Location","datums","math","Math","atan","exp","pow","sin","log","tan","Point","PI","PI_DIV_2","PI_DIV_4","DEG_TO_RAD","WGS84","Mercator","constructor","options","initProperties","_initOptions","MAX_LNG","MAX_LAT","INVERSE_ITERATIONS","INVERSE_CONVERGENCE","forward","loc","clamp","proj","datum","r","a","lng0","centralMeridian","lat","lng","x","y","_projectLat","ecc","e","ts","con","p","inverse","point","_inverseY","ecch","phi","i","dphi","abs","SphericalMercator","Equirectangular","EPSG3857","crs","_proj","c","_tm","transform","translate","scale","_itm","toPoint","toLocation","newPoint","clone","EPSG3395","EPSG4326"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-charts/dist/es2015/map/crs.js"],"sourcesContent":["import {\n    geometry as g\n} from '@progress/kendo-drawing';\n\nimport {\n    Class,\n    setDefaultOptions,\n    limitValue,\n    rad,\n    deg,\n    deepExtend\n} from '../common';\n\nimport {\n    Location\n} from './location';\n\nimport {\n    datums\n} from './datums';\n\n\nlet math = Math,\n    atan = math.atan,\n    exp = math.exp,\n    pow = math.pow,\n    sin = math.sin,\n    log = math.log,\n    tan = math.tan,\n    Point = g.Point;\n\nlet PI = math.PI,\n    PI_DIV_2 = PI / 2,\n    PI_DIV_4 = PI / 4,\n    DEG_TO_RAD = PI / 180;\n\nlet WGS84 = datums.WGS84;\n\n// WGS 84 / World Mercator\nexport class Mercator extends Class {\n    constructor(options) {\n        super();\n        this.initProperties();\n        this._initOptions(options);\n    }\n\n    _initOptions(options) {\n        this.options = deepExtend({}, this.options, options);\n    }\n\n    initProperties() {\n        // super.initProperties();\n\n        deepExtend(this, {\n            MAX_LNG: 180,\n            MAX_LAT: 85.0840590501,\n            INVERSE_ITERATIONS: 15,\n            INVERSE_CONVERGENCE: 1e-12\n        });\n    }\n\n    forward(loc, clamp) {\n        let proj = this,\n            options = proj.options,\n            datum = options.datum,\n            r = datum.a,\n            lng0 = options.centralMeridian,\n            lat = limitValue(loc.lat, -proj.MAX_LAT, proj.MAX_LAT),\n            lng = clamp ? limitValue(loc.lng, -proj.MAX_LNG, proj.MAX_LNG) : loc.lng,\n            x = rad(lng - lng0) * r,\n            y = proj._projectLat(lat);\n        return new Point(x, y);\n    }\n    _projectLat(lat) {\n        let datum = this.options.datum,\n            ecc = datum.e,\n            r = datum.a,\n            y = rad(lat),\n            ts = tan(PI_DIV_4 + y / 2),\n            con = ecc * sin(y),\n            p = pow((1 - con) / (1 + con), ecc / 2);\n\n        // See: http://en.wikipedia.org/wiki/Mercator_projection#Generalization_to_the_ellipsoid\n        return r * log(ts * p);\n    }\n    inverse(point, clamp) {\n        let proj = this,\n            options = proj.options,\n            datum = options.datum,\n            r = datum.a,\n            lng0 = options.centralMeridian,\n            lng = point.x / (DEG_TO_RAD * r) + lng0,\n            lat = limitValue(proj._inverseY(point.y), -proj.MAX_LAT, proj.MAX_LAT);\n        if (clamp) {\n            lng = limitValue(lng, -proj.MAX_LNG, proj.MAX_LNG);\n        }\n        return new Location(lat, lng);\n    }\n    _inverseY(y) {\n        let proj = this,\n            datum = proj.options.datum,\n            r = datum.a,\n            ecc = datum.e,\n            ecch = ecc / 2,\n            ts = exp(-y / r),\n            phi = PI_DIV_2 - 2 * atan(ts),\n            i;\n        for (i = 0; i <= proj.INVERSE_ITERATIONS; i++) {\n            let con = ecc * sin(phi),\n                p = pow((1 - con) / (1 + con), ecch),\n                dphi = PI_DIV_2 - 2 * atan(ts * p) - phi;\n            phi += dphi;\n            if (math.abs(dphi) <= proj.INVERSE_CONVERGENCE) {\n                break;\n            }\n        }\n        return deg(phi);\n    }\n}\n\nsetDefaultOptions(Mercator, {\n    centralMeridian: 0,\n    datum: WGS84\n});\n\n\n// WGS 84 / Pseudo-Mercator\n// Used by Google Maps, Bing, OSM, etc.\n// Spherical projection of ellipsoidal coordinates.\nexport class SphericalMercator extends Mercator {\n    initProperties() {\n        super.initProperties();\n\n        deepExtend(this, {\n            MAX_LAT: 85.0511287798\n        });\n    }\n\n    _projectLat(lat) {\n        let r = this.options.datum.a,\n            y = rad(lat),\n            ts = tan(PI_DIV_4 + y / 2);\n        return r * log(ts);\n    }\n\n    _inverseY(y) {\n        let r = this.options.datum.a,\n            ts = exp(-y / r);\n        return deg(PI_DIV_2 - 2 * atan(ts));\n    }\n}\n\nexport class Equirectangular extends Class {\n    forward(loc) {\n        return new Point(loc.lng, loc.lat);\n    }\n    inverse(point) {\n        return new Location(point.y, point.x);\n    }\n}\n\n// This is the projected coordinate system used for rendering maps in Google Maps, OpenStreetMap, etc\n// Unit: metre\n// Geodetic CRS: WGS 84\n// Scope: Certain Web mapping and visualisation applications. It is not a recognised geodetic system: for that see ellipsoidal Mercator CRS code 3395 (WGS 84 / World Mercator).\n// Remarks: Uses spherical development of ellipsoidal coordinates. Relative to WGS 84 / World Mercator (CRS code 3395) errors of 0.7 percent in scale and differences in northing of up to 43km in the map (equivalent to 21km on the ground) may arise.\n// Area of use: World between 85.06째S and 85.06째N.\n// Coordinate system: Cartesian 2D CS. Axes: easting, northing (X,Y). Orientations: east, north. UoM: m.\n// https://epsg.io/3857\nexport class EPSG3857 extends Class {\n    constructor() {\n        super();\n        let crs = this,\n            proj = crs._proj = new SphericalMercator();\n        let c = this.c = 2 * PI * proj.options.datum.a;\n\n        // transfrom matrix\n        // Scale circumference to 1, mirror Y and shift origin to top left\n        this._tm = g.transform().translate(0.5, 0.5).scale(1 / c, -1 / c);\n\n        // Inverse transform matrix\n        this._itm = g.transform().scale(c, -c).translate(-0.5, -0.5);\n    }\n\n    // Location <-> Point (screen coordinates for a given scale)\n    toPoint(loc, scale, clamp) {\n        let point = this._proj.forward(loc, clamp);\n        return point.transform(this._tm).scale(scale || 1);\n    }\n    toLocation(point, scale, clamp) {\n        let newPoint = point.clone().scale(1 / (scale || 1)).transform(this._itm);\n        return this._proj.inverse(newPoint, clamp);\n    }\n}\n\n// Unit: metre\n// Geodetic CRS: WGS 84\n// Scope: Very small scale mapping.\n// Remarks: Euro-centric view of world excluding polar areas.\n// Area of use: World between 80째S and 84째N.\n// Coordinate system: Cartesian 2D CS. Axes: easting, northing (E,N). Orientations: east, north. UoM: m.\n// https://epsg.io/3395\nexport class EPSG3395 extends Class {\n    constructor() {\n        super();\n        this._proj = new Mercator();\n    }\n    toPoint(loc) {\n        return this._proj.forward(loc);\n    }\n    toLocation(point) {\n        return this._proj.inverse(point);\n    }\n}\n\n// Unit: degree\n// Geodetic CRS: WGS 84\n// Scope: Horizontal component of 3D system. Used by the GPS satellite navigation system and for NATO military geodetic surveying.\n// Area of use: World.\n// Coordinate system: Ellipsoidal 2D CS. Axes: latitude, longitude. Orientations: north, east. UoM: degree\n// https://epsg.io/4326\nexport class EPSG4326 extends Class {\n    constructor() {\n        super();\n        this._proj = new Equirectangular();\n    }\n    toPoint(loc) {\n        return this._proj.forward(loc);\n    }\n    toLocation(point) {\n        return this._proj.inverse(point);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}