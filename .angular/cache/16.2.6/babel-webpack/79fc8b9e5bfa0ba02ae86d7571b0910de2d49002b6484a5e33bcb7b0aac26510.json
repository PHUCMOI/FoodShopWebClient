{"ast":null,"code":"import { QRDataMode } from './qr-data-mode';\nimport { extend } from '../../utils';\nimport { toBitsString } from '../../utils';\nexport class ByteQRDataMode extends QRDataMode {\n  initProperties() {\n    super.initProperties();\n    extend(this, {\n      bitsInCharacterCount: [8, 16, 16],\n      modeIndicator: \"0100\"\n    });\n  }\n  getValue(character) {\n    let code = character.charCodeAt(0);\n    if (code <= 127 || 160 <= code && code <= 255) {\n      return code;\n    }\n    throw new Error(`Unsupported character in QR Code: \"${character}\".`);\n  }\n  encode(str, version) {\n    let mode = this,\n      result = mode.getModeCountString(str.length, version);\n    for (let i = 0; i < str.length; i++) {\n      result += toBitsString(mode.getValue(str.charAt(i)), 8);\n    }\n    return result;\n  }\n  getStringBitsLength(inputLength, version) {\n    return 4 + this.getBitsCharacterCount(version) + 8 * inputLength;\n  }\n}","map":{"version":3,"names":["QRDataMode","extend","toBitsString","ByteQRDataMode","initProperties","bitsInCharacterCount","modeIndicator","getValue","character","code","charCodeAt","Error","encode","str","version","mode","result","getModeCountString","length","i","charAt","getStringBitsLength","inputLength","getBitsCharacterCount"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-charts/dist/es2015/qrcode/encodings/data-modes/byte-data-mode.js"],"sourcesContent":["import { QRDataMode } from './qr-data-mode';\nimport { extend } from '../../utils';\nimport {\n    toBitsString\n} from '../../utils';\n\nexport class ByteQRDataMode extends QRDataMode {\n    initProperties() {\n        super.initProperties();\n\n        extend(this, {\n            bitsInCharacterCount: [8, 16, 16],\n            modeIndicator: \"0100\"\n        });\n    }\n\n    getValue(character) {\n        let code = character.charCodeAt(0);\n\n        if (code <= 127 || (160 <= code && code <= 255)) {\n            return code;\n        }\n\n        throw new Error(`Unsupported character in QR Code: \"${character}\".`);\n    }\n\n    encode(str, version) {\n        let mode = this,\n            result = mode.getModeCountString(str.length, version);\n\n        for (let i = 0; i < str.length; i++) {\n            result += toBitsString(mode.getValue(str.charAt(i)), 8);\n        }\n\n        return result;\n    }\n\n    getStringBitsLength(inputLength, version) {\n        return 4 + this.getBitsCharacterCount(version) + 8 * inputLength;\n    }\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,MAAM,QAAQ,aAAa;AACpC,SACIC,YAAY,QACT,aAAa;AAEpB,OAAO,MAAMC,cAAc,SAASH,UAAU,CAAC;EAC3CI,cAAcA,CAAA,EAAG;IACb,KAAK,CAACA,cAAc,CAAC,CAAC;IAEtBH,MAAM,CAAC,IAAI,EAAE;MACTI,oBAAoB,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;MACjCC,aAAa,EAAE;IACnB,CAAC,CAAC;EACN;EAEAC,QAAQA,CAACC,SAAS,EAAE;IAChB,IAAIC,IAAI,GAAGD,SAAS,CAACE,UAAU,CAAC,CAAC,CAAC;IAElC,IAAID,IAAI,IAAI,GAAG,IAAK,GAAG,IAAIA,IAAI,IAAIA,IAAI,IAAI,GAAI,EAAE;MAC7C,OAAOA,IAAI;IACf;IAEA,MAAM,IAAIE,KAAK,CAAE,sCAAqCH,SAAU,IAAG,CAAC;EACxE;EAEAI,MAAMA,CAACC,GAAG,EAAEC,OAAO,EAAE;IACjB,IAAIC,IAAI,GAAG,IAAI;MACXC,MAAM,GAAGD,IAAI,CAACE,kBAAkB,CAACJ,GAAG,CAACK,MAAM,EAAEJ,OAAO,CAAC;IAEzD,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,GAAG,CAACK,MAAM,EAAEC,CAAC,EAAE,EAAE;MACjCH,MAAM,IAAId,YAAY,CAACa,IAAI,CAACR,QAAQ,CAACM,GAAG,CAACO,MAAM,CAACD,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAC3D;IAEA,OAAOH,MAAM;EACjB;EAEAK,mBAAmBA,CAACC,WAAW,EAAER,OAAO,EAAE;IACtC,OAAO,CAAC,GAAG,IAAI,CAACS,qBAAqB,CAACT,OAAO,CAAC,GAAG,CAAC,GAAGQ,WAAW;EACpE;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}