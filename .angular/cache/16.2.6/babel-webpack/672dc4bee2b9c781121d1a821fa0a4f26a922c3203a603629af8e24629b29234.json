{"ast":null,"code":"import { Encoding } from './encoding';\nconst extend = Object.assign;\nexport class Ean13 extends Encoding {\n  initProperties() {\n    super.initProperties();\n    extend(this, {\n      name: \"EAN 13\",\n      keyTable: ['000000', '001011', '001101', '001110', '010011', '011001', '011100', '010101', '010110', '011010'],\n      characterMap: {\n        digits: [[3, 2, 1, 1], [2, 2, 2, 1], [2, 1, 2, 2], [1, 4, 1, 1], [1, 1, 3, 2], [1, 2, 3, 1], [1, 1, 1, 4], [1, 3, 1, 2], [1, 2, 1, 3], [3, 1, 1, 2]],\n        start: [1, 1, 1],\n        middle: [1, 1, 1, 1, 1]\n      }\n    });\n  }\n  initValue(value, width, height) {\n    const valueAsString = String(value);\n    if (valueAsString.length !== 12 || /\\D/.test(valueAsString)) {\n      throw new Error('The value of the \"EAN13\" encoding should be 12 symbols');\n    }\n    this.pattern = [];\n    this.options.height = height;\n    this.baseUnit = width / (95 + this.quietZoneLength);\n    this.value = valueAsString;\n    this.checksum = this.calculateChecksum();\n    this.leftKey = valueAsString[0];\n    this.leftPart = valueAsString.substr(1, 6);\n    this.rightPart = valueAsString.substr(7) + this.checksum;\n  }\n  addData() {\n    this.addPieces(this.characterMap.start);\n    this.addSide(this.leftPart, this.leftKey);\n    this.addPieces(this.characterMap.middle);\n    this.addSide(this.rightPart);\n    this.addPieces(this.characterMap.start);\n  }\n  addSide(leftPart, key) {\n    for (let i = 0; i < leftPart.length; i++) {\n      if (key && parseInt(this.keyTable[key].charAt(i), 10)) {\n        this.addPieces(Array.prototype.slice.call(this.characterMap.digits[leftPart.charAt(i)]).reverse(), true);\n      } else {\n        this.addPieces(this.characterMap.digits[leftPart.charAt(i)], true);\n      }\n    }\n  }\n  addPieces(arrToAdd, limitedHeight) {\n    for (let i = 0; i < arrToAdd.length; i++) {\n      if (limitedHeight) {\n        this.pattern.push({\n          y1: 0,\n          y2: this.options.height * 0.95,\n          width: arrToAdd[i]\n        });\n      } else {\n        this.pattern.push(arrToAdd[i]);\n      }\n    }\n  }\n  calculateChecksum() {\n    let odd = 0,\n      even = 0,\n      value = this.value.split(\"\").reverse().join(\"\");\n    for (let i = 0; i < value.length; i++) {\n      if (i % 2) {\n        even += parseInt(value.charAt(i), 10);\n      } else {\n        odd += parseInt(value.charAt(i), 10);\n      }\n    }\n    let checksum = (10 - (3 * odd + even) % 10) % 10;\n    return checksum;\n  }\n}","map":{"version":3,"names":["Encoding","extend","Object","assign","Ean13","initProperties","name","keyTable","characterMap","digits","start","middle","initValue","value","width","height","valueAsString","String","length","test","Error","pattern","options","baseUnit","quietZoneLength","checksum","calculateChecksum","leftKey","leftPart","substr","rightPart","addData","addPieces","addSide","key","i","parseInt","charAt","Array","prototype","slice","call","reverse","arrToAdd","limitedHeight","push","y1","y2","odd","even","split","join"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-charts/dist/es2015/barcode/encodings/ean13.js"],"sourcesContent":["import { Encoding } from './encoding';\n\nconst extend = Object.assign;\n\nexport class Ean13 extends Encoding {\n    initProperties() {\n        super.initProperties();\n\n        extend(this, {\n            name: \"EAN 13\",\n            keyTable: [\n                '000000',\n                '001011',\n                '001101',\n                '001110',\n                '010011',\n                '011001',\n                '011100',\n                '010101',\n                '010110',\n                '011010'\n            ],\n            characterMap: {\n                digits: [\n                    [3, 2, 1, 1],\n                    [2, 2, 2, 1],\n                    [2, 1, 2, 2],\n                    [1, 4, 1, 1],\n                    [1, 1, 3, 2],\n                    [1, 2, 3, 1],\n                    [1, 1, 1, 4],\n                    [1, 3, 1, 2],\n                    [1, 2, 1, 3],\n                    [3, 1, 1, 2]\n                ],\n                start: [1, 1, 1],\n                middle: [1, 1, 1, 1, 1]\n            }\n        });\n    }\n\n    initValue(value, width, height) {\n        const valueAsString = String(value);\n\n        if (valueAsString.length !== 12 || /\\D/.test(valueAsString)) {\n            throw new Error('The value of the \"EAN13\" encoding should be 12 symbols');\n        }\n\n        this.pattern = [];\n        this.options.height = height;\n        this.baseUnit = width / (95 + this.quietZoneLength);\n        this.value = valueAsString;\n        this.checksum = this.calculateChecksum();\n        this.leftKey = valueAsString[0];\n        this.leftPart = valueAsString.substr(1, 6);\n        this.rightPart = valueAsString.substr(7) + this.checksum;\n    }\n\n    addData() {\n        this.addPieces(this.characterMap.start);\n        this.addSide(this.leftPart, this.leftKey);\n        this.addPieces(this.characterMap.middle);\n        this.addSide(this.rightPart);\n        this.addPieces(this.characterMap.start);\n    }\n\n    addSide(leftPart, key) {\n        for (let i = 0; i < leftPart.length; i++) {\n            if (key && parseInt(this.keyTable[key].charAt(i), 10)) {\n                this.addPieces(Array.prototype.slice.call(this.characterMap.digits[leftPart.charAt(i)]).reverse(), true);\n            } else {\n                this.addPieces(this.characterMap.digits[leftPart.charAt(i)], true);\n            }\n        }\n    }\n\n    addPieces(arrToAdd, limitedHeight) {\n        for (let i = 0; i < arrToAdd.length; i++) {\n            if (limitedHeight) {\n                this.pattern.push({\n                    y1: 0,\n                    y2: this.options.height * 0.95,\n                    width: arrToAdd[i]\n                });\n            } else {\n                this.pattern.push(arrToAdd[i]);\n            }\n        }\n    }\n\n    calculateChecksum() {\n        let odd = 0,\n            even = 0,\n            value = this.value.split(\"\").reverse().join(\"\");\n\n        for (let i = 0; i < value.length; i++) {\n            if (i % 2) {\n                even += parseInt(value.charAt(i), 10);\n            } else {\n                odd += parseInt(value.charAt(i), 10);\n            }\n        }\n\n        let checksum = (10 - ((3 * odd + even) % 10)) % 10;\n\n        return checksum;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}