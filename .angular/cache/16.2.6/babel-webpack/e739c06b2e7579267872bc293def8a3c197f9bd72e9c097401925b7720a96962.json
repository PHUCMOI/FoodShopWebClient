{"ast":null,"code":"import SeriesBinder from '../series-binder';\nimport { OBJECT } from '../../common/constants';\nimport { Class, defined, getter, isArray, isNumber } from '../../common';\nconst STD_ERR = \"stderr\";\nconst STD_DEV = \"stddev\";\nconst percentRegex = /percent(?:\\w*)\\((\\d+)\\)/;\nconst standardDeviationRegex = new RegExp(\"^\" + STD_DEV + \"(?:\\\\((\\\\d+(?:\\\\.\\\\d+)?)\\\\))?$\");\nclass ErrorRangeCalculator extends Class {\n  constructor(errorValue, series, field) {\n    super();\n    this.initGlobalRanges(errorValue, series, field);\n  }\n  initGlobalRanges(errorValue, series, field) {\n    const data = series.data;\n    const deviationMatch = standardDeviationRegex.exec(errorValue);\n    if (deviationMatch) {\n      this.valueGetter = this.createValueGetter(series, field);\n      const average = this.getAverage(data);\n      const deviation = this.getStandardDeviation(data, average, false);\n      const multiple = deviationMatch[1] ? parseFloat(deviationMatch[1]) : 1;\n      const errorRange = {\n        low: average.value - deviation * multiple,\n        high: average.value + deviation * multiple\n      };\n      this.globalRange = function () {\n        return errorRange;\n      };\n    } else if (errorValue.indexOf && errorValue.indexOf(STD_ERR) >= 0) {\n      this.valueGetter = this.createValueGetter(series, field);\n      const standardError = this.getStandardError(data, this.getAverage(data));\n      this.globalRange = function (value) {\n        return {\n          low: value - standardError,\n          high: value + standardError\n        };\n      };\n    }\n  }\n  createValueGetter(series, field) {\n    const data = series.data;\n    const binder = SeriesBinder.current;\n    const valueFields = binder.valueFields(series);\n    const item = defined(data[0]) ? data[0] : {};\n    let valueGetter;\n    if (isArray(item)) {\n      const index = field ? valueFields.indexOf(field) : 0;\n      valueGetter = getter(\"[\" + index + \"]\");\n    } else if (isNumber(item)) {\n      valueGetter = getter();\n    } else if (typeof item === OBJECT) {\n      const srcValueFields = binder.sourceFields(series, valueFields);\n      valueGetter = getter(srcValueFields[valueFields.indexOf(field)]);\n    }\n    return valueGetter;\n  }\n  getErrorRange(pointValue, errorValue) {\n    let low, high, value;\n    if (!defined(errorValue)) {\n      return null;\n    }\n    if (this.globalRange) {\n      return this.globalRange(pointValue);\n    }\n    if (isArray(errorValue)) {\n      low = pointValue - errorValue[0];\n      high = pointValue + errorValue[1];\n    } else if (isNumber(value = parseFloat(errorValue))) {\n      low = pointValue - value;\n      high = pointValue + value;\n    } else if (value = percentRegex.exec(errorValue)) {\n      const percentValue = pointValue * (parseFloat(value[1]) / 100);\n      low = pointValue - Math.abs(percentValue);\n      high = pointValue + Math.abs(percentValue);\n    } else {\n      throw new Error(\"Invalid ErrorBar value: \" + errorValue);\n    }\n    return {\n      low: low,\n      high: high\n    };\n  }\n  getStandardError(data, average) {\n    return this.getStandardDeviation(data, average, true) / Math.sqrt(average.count);\n  }\n  getStandardDeviation(data, average, isSample) {\n    const length = data.length;\n    const total = isSample ? average.count - 1 : average.count;\n    let squareDifferenceSum = 0;\n    for (let idx = 0; idx < length; idx++) {\n      const value = this.valueGetter(data[idx]);\n      if (isNumber(value)) {\n        squareDifferenceSum += Math.pow(value - average.value, 2);\n      }\n    }\n    return Math.sqrt(squareDifferenceSum / total);\n  }\n  getAverage(data) {\n    const length = data.length;\n    let sum = 0;\n    let count = 0;\n    for (let idx = 0; idx < length; idx++) {\n      const value = this.valueGetter(data[idx]);\n      if (isNumber(value)) {\n        sum += value;\n        count++;\n      }\n    }\n    return {\n      value: sum / count,\n      count: count\n    };\n  }\n}\nexport default ErrorRangeCalculator;","map":{"version":3,"names":["SeriesBinder","OBJECT","Class","defined","getter","isArray","isNumber","STD_ERR","STD_DEV","percentRegex","standardDeviationRegex","RegExp","ErrorRangeCalculator","constructor","errorValue","series","field","initGlobalRanges","data","deviationMatch","exec","valueGetter","createValueGetter","average","getAverage","deviation","getStandardDeviation","multiple","parseFloat","errorRange","low","value","high","globalRange","indexOf","standardError","getStandardError","binder","current","valueFields","item","index","srcValueFields","sourceFields","getErrorRange","pointValue","percentValue","Math","abs","Error","sqrt","count","isSample","length","total","squareDifferenceSum","idx","pow","sum"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-charts/dist/es2015/chart/error-bars/error-range-calculator.js"],"sourcesContent":["import SeriesBinder from '../series-binder';\n\nimport { OBJECT } from '../../common/constants';\nimport { Class, defined, getter, isArray, isNumber } from '../../common';\n\nconst STD_ERR = \"stderr\";\nconst STD_DEV = \"stddev\";\nconst percentRegex = /percent(?:\\w*)\\((\\d+)\\)/;\nconst standardDeviationRegex = new RegExp(\"^\" + STD_DEV + \"(?:\\\\((\\\\d+(?:\\\\.\\\\d+)?)\\\\))?$\");\n\nclass ErrorRangeCalculator extends Class {\n    constructor(errorValue, series, field) {\n        super();\n\n        this.initGlobalRanges(errorValue, series, field);\n    }\n\n    initGlobalRanges(errorValue, series, field) {\n        const data = series.data;\n        const deviationMatch = standardDeviationRegex.exec(errorValue);\n\n        if (deviationMatch) {\n            this.valueGetter = this.createValueGetter(series, field);\n\n            const average = this.getAverage(data);\n            const deviation = this.getStandardDeviation(data, average, false);\n            const multiple = deviationMatch[1] ? parseFloat(deviationMatch[1]) : 1;\n            const errorRange = { low: average.value - deviation * multiple, high: average.value + deviation * multiple };\n\n            this.globalRange = function() {\n                return errorRange;\n            };\n        } else if (errorValue.indexOf && errorValue.indexOf(STD_ERR) >= 0) {\n            this.valueGetter = this.createValueGetter(series, field);\n            const standardError = this.getStandardError(data, this.getAverage(data));\n\n            this.globalRange = function(value) {\n                return { low: value - standardError, high: value + standardError };\n            };\n        }\n    }\n\n    createValueGetter(series, field) {\n        const data = series.data;\n        const binder = SeriesBinder.current;\n        const valueFields = binder.valueFields(series);\n        const item = defined(data[0]) ? data[0] : {};\n        let valueGetter;\n\n        if (isArray(item)) {\n            const index = field ? valueFields.indexOf(field) : 0;\n            valueGetter = getter(\"[\" + index + \"]\");\n        } else if (isNumber(item)) {\n            valueGetter = getter();\n        } else if (typeof item === OBJECT) {\n            const srcValueFields = binder.sourceFields(series, valueFields);\n            valueGetter = getter(srcValueFields[valueFields.indexOf(field)]);\n        }\n\n        return valueGetter;\n    }\n\n    getErrorRange(pointValue, errorValue) {\n        let low, high, value;\n\n        if (!defined(errorValue)) {\n            return null;\n        }\n\n        if (this.globalRange) {\n            return this.globalRange(pointValue);\n        }\n\n        if (isArray(errorValue)) {\n            low = pointValue - errorValue[0];\n            high = pointValue + errorValue[1];\n        } else if (isNumber(value = parseFloat(errorValue))) {\n            low = pointValue - value;\n            high = pointValue + value;\n        } else if ((value = percentRegex.exec(errorValue))) {\n            const percentValue = pointValue * (parseFloat(value[1]) / 100);\n            low = pointValue - Math.abs(percentValue);\n            high = pointValue + Math.abs(percentValue);\n        } else {\n            throw new Error(\"Invalid ErrorBar value: \" + errorValue);\n        }\n\n        return { low: low, high: high };\n    }\n\n    getStandardError(data, average) {\n        return this.getStandardDeviation(data, average, true) / Math.sqrt(average.count);\n    }\n\n    getStandardDeviation(data, average, isSample) {\n        const length = data.length;\n        const total = isSample ? average.count - 1 : average.count;\n        let squareDifferenceSum = 0;\n\n        for (let idx = 0; idx < length; idx++) {\n            const value = this.valueGetter(data[idx]);\n            if (isNumber(value)) {\n                squareDifferenceSum += Math.pow(value - average.value, 2);\n            }\n        }\n\n        return Math.sqrt(squareDifferenceSum / total);\n    }\n\n    getAverage(data) {\n        const length = data.length;\n        let sum = 0;\n        let count = 0;\n\n        for (let idx = 0; idx < length; idx++) {\n            const value = this.valueGetter(data[idx]);\n            if (isNumber(value)) {\n                sum += value;\n                count++;\n            }\n        }\n\n        return {\n            value: sum / count,\n            count: count\n        };\n    }\n}\n\nexport default ErrorRangeCalculator;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}