{"ast":null,"code":"import { Class } from '../../common';\nimport { Encoding } from './encoding';\nimport deepExtend from '../../common/deep-extend';\nimport inArray from '../../common/in-array';\nconst numberRegex = /^\\d+$/;\nconst alphanumericRegex = /^[a-z0-9]+$/i;\nconst extend = Object.assign;\nexport class State128 extends Class {\n  constructor(encoding) {\n    super();\n    this.encoding = encoding;\n    this.initProperties();\n  }\n  initProperties() {}\n  addStart() {}\n  is() {}\n  isCode() {\n    return false;\n  }\n  move() {}\n  pushState() {}\n}\nexport class State128AB extends State128 {\n  constructor(encoding, states) {\n    super(encoding);\n    this.states = states;\n    this._initMoves(states);\n  }\n  initProperties() {\n    super.initProperties();\n    deepExtend(this, {\n      FNC4: \"FNC4\",\n      SHIFT: 98\n    });\n  }\n  addStart() {\n    this.encoding.addPattern(this.START);\n  }\n  is(value, index) {\n    let code = value.charCodeAt(index);\n    return this.isCode(code);\n  }\n  move(encodingState) {\n    let idx = 0;\n    while (!this._moves[idx].call(this, encodingState) && idx < this._moves.length) {\n      idx++;\n    }\n  }\n  pushState(encodingState) {\n    let states = this.states,\n      value = encodingState.value,\n      maxLength = value.length,\n      code;\n    if (inArray(\"C\", states)) {\n      let numberMatch = value.substr(encodingState.index).match(/\\d{4,}/g);\n      if (numberMatch) {\n        maxLength = value.indexOf(numberMatch[0], encodingState.index);\n      }\n    }\n    while ((code = encodingState.value.charCodeAt(encodingState.index)) >= 0 && this.isCode(code) && encodingState.index < maxLength) {\n      this.encoding.addPattern(this.getValue(code));\n      encodingState.index++;\n    }\n  }\n  _initMoves(states) {\n    this._moves = [];\n    if (inArray(this.FNC4, states)) {\n      this._moves.push(this._moveFNC);\n    }\n    if (inArray(this.shiftKey, states)) {\n      this._moves.push(this._shiftState);\n    }\n    this._moves.push(this._moveState);\n  }\n  _moveFNC(encodingState) {\n    if (encodingState.fnc) {\n      encodingState.fnc = false;\n      return encodingState.previousState === this.key;\n    }\n  }\n  _shiftState(encodingState) {\n    if (encodingState.previousState === this.shiftKey && (encodingState.index + 1 >= encodingState.value.length || this.encoding[this.shiftKey].is(encodingState.value, encodingState.index + 1))) {\n      this.encoding.addPattern(this.SHIFT);\n      encodingState.shifted = true;\n      return true;\n    }\n  }\n  _moveState() {\n    this.encoding.addPattern(this.MOVE);\n    return true;\n  }\n}\nconst states128 = {};\nstates128.A = class State128A extends State128AB {\n  initProperties() {\n    super.initProperties();\n    extend(this, {\n      key: \"A\",\n      shiftKey: \"B\",\n      MOVE: 101,\n      START: 103\n    });\n  }\n  isCode(code) {\n    return 0 <= code && code < 96;\n  }\n  getValue(code) {\n    if (code < 32) {\n      return code + 64;\n    }\n    return code - 32;\n  }\n};\nstates128.B = class State128B extends State128AB {\n  initProperties() {\n    super.initProperties();\n    extend(this, {\n      key: \"B\",\n      shiftKey: \"A\",\n      MOVE: 100,\n      START: 104\n    });\n  }\n  isCode(code) {\n    return 32 <= code && code < 128;\n  }\n  getValue(code) {\n    return code - 32;\n  }\n};\nstates128.C = class State128C extends State128 {\n  initProperties() {\n    super.initProperties();\n    extend(this, {\n      key: \"C\",\n      MOVE: 99,\n      START: 105\n    });\n  }\n  addStart() {\n    this.encoding.addPattern(this.START);\n  }\n  is(value, index) {\n    let next4 = getSubstring(value, index, 4);\n    return (index + 4 <= value.length || value.length === 2) && numberRegex.test(next4);\n  }\n  move() {\n    this.encoding.addPattern(this.MOVE);\n  }\n  pushState(encodingState) {\n    let code;\n    while ((code = getSubstring(encodingState.value, encodingState.index, 2)) && numberRegex.test(code) && code.length === 2) {\n      this.encoding.addPattern(parseInt(code, 10));\n      encodingState.index += 2;\n    }\n  }\n  getValue(code) {\n    return code;\n  }\n};\nstates128.FNC4 = class State128FNC4 extends State128 {\n  constructor(encoding, states) {\n    super(encoding);\n    this._initSubStates(states);\n  }\n  initProperties() {\n    super.initProperties();\n    extend(this, {\n      key: \"FNC4\",\n      dependentStates: [\"A\", \"B\"]\n    });\n  }\n  addStart(encodingState) {\n    let code = encodingState.value.charCodeAt(0) - 128,\n      subState = this._getSubState(code);\n    this.encoding[subState].addStart();\n  }\n  is(value, index) {\n    let code = value.charCodeAt(index);\n    return this.isCode(code);\n  }\n  isCode(code) {\n    return 128 <= code && code < 256;\n  }\n  pushState(encodingState) {\n    let subState = this._initSubState(encodingState),\n      encoding = this.encoding,\n      length = subState.value.length;\n    let code;\n    encodingState.index += length;\n    if (length < 3) {\n      for (; subState.index < length; subState.index++) {\n        code = subState.value.charCodeAt(subState.index);\n        subState.state = this._getSubState(code);\n        if (subState.previousState !== subState.state) {\n          subState.previousState = subState.state;\n          encoding[subState.state].move(subState);\n        }\n        encoding.addPattern(encoding[subState.state].MOVE);\n        encoding.addPattern(encoding[subState.state].getValue(code));\n      }\n    } else {\n      if (subState.state !== subState.previousState) {\n        encoding[subState.state].move(subState);\n      }\n      this._pushStart(subState);\n      encoding.pushData(subState, this.subStates);\n      if (encodingState.index < encodingState.value.length) {\n        this._pushStart(subState);\n      }\n    }\n    encodingState.fnc = true;\n    encodingState.state = subState.state;\n  }\n  _pushStart(subState) {\n    this.encoding.addPattern(this.encoding[subState.state].MOVE);\n    this.encoding.addPattern(this.encoding[subState.state].MOVE);\n  }\n  _initSubState(encodingState) {\n    const subState = {\n      value: this._getAll(encodingState.value, encodingState.index),\n      index: 0\n    };\n    subState.state = this._getSubState(subState.value.charCodeAt(0));\n    subState.previousState = encodingState.previousState === this.key ? subState.state : encodingState.previousState;\n    return subState;\n  }\n  _initSubStates(states) {\n    this.subStates = [];\n    for (let i = 0; i < states.length; i++) {\n      if (inArray(states[i], this.dependentStates)) {\n        this.subStates.push(states[i]);\n      }\n    }\n  }\n  _getSubState(code) {\n    for (let i = 0; i < this.subStates.length; i++) {\n      if (this.encoding[this.subStates[i]].isCode(code)) {\n        return this.subStates[i];\n      }\n    }\n  }\n  _getAll(value, index) {\n    let code;\n    let result = \"\";\n    let i = index;\n    while ((code = value.charCodeAt(i++)) && this.isCode(code)) {\n      result += String.fromCharCode(code - 128);\n    }\n    return result;\n  }\n};\nstates128.FNC1 = class States128FNC1 extends State128 {\n  constructor(encoding, states) {\n    super(encoding);\n    this.states = states;\n  }\n  initProperties() {\n    super.initProperties();\n    extend(this, {\n      key: \"FNC1\",\n      startState: \"C\",\n      startAI: \"(\",\n      endAI: \")\",\n      dependentStates: [\"C\", \"B\"],\n      applicationIdentifiers: {\n        \"22\": {\n          max: 29,\n          type: \"alphanumeric\"\n        },\n        \"402\": {\n          length: 17\n        },\n        \"7004\": {\n          max: 4,\n          type: \"alphanumeric\"\n        },\n        \"242\": {\n          max: 6,\n          type: \"alphanumeric\"\n        },\n        \"8020\": {\n          max: 25,\n          type: \"alphanumeric\"\n        },\n        \"703\": {\n          min: 3,\n          max: 30,\n          type: \"alphanumeric\"\n        },\n        \"8008\": {\n          min: 8,\n          max: 12,\n          type: \"alphanumeric\"\n        },\n        \"253\": {\n          min: 13,\n          max: 17,\n          type: \"alphanumeric\"\n        },\n        \"8003\": {\n          min: 14,\n          max: 30,\n          type: \"alphanumeric\"\n        },\n        multiKey: [{\n          ids: [\"15\", \"17\", \"8005\", \"8100\"],\n          ranges: [[11, 13], [310, 316], [320, 336], [340, 369]],\n          type: {\n            length: 6\n          }\n        }, {\n          ids: [\"240\", \"241\", \"250\", \"251\", \"400\", \"401\", \"403\", \"7002\", \"8004\", \"8007\", \"8110\"],\n          ranges: [[90 - 99]],\n          type: {\n            max: 30,\n            type: \"alphanumeric\"\n          }\n        }, {\n          ids: [\"7001\"],\n          ranges: [[410, 414]],\n          type: {\n            length: 13\n          }\n        }, {\n          ids: [\"10\", \"21\", \"254\", \"420\", \"8002\"],\n          type: {\n            max: 20,\n            type: \"alphanumeric\"\n          }\n        }, {\n          ids: [\"00\", \"8006\", \"8017\", \"8018\"],\n          type: {\n            length: 18\n          }\n        }, {\n          ids: [\"01\", \"02\", \"8001\"],\n          type: {\n            length: 14\n          }\n        }, {\n          ids: [\"422\"],\n          ranges: [[424, 426]],\n          type: {\n            length: 3\n          }\n        }, {\n          ids: [\"20\", \"8102\"],\n          type: {\n            length: 2\n          }\n        }, {\n          ids: [\"30\", \"37\"],\n          type: {\n            max: 8,\n            type: \"alphanumeric\"\n          }\n        }, {\n          ids: [\"390\", \"392\"],\n          type: {\n            max: 15,\n            type: \"alphanumeric\"\n          }\n        }, {\n          ids: [\"421\", \"423\"],\n          type: {\n            min: 3,\n            max: 15,\n            type: \"alphanumeric\"\n          }\n        }, {\n          ids: [\"391\", \"393\"],\n          type: {\n            min: 3,\n            max: 18,\n            type: \"alphanumeric\"\n          }\n        }, {\n          ids: [\"7003\", \"8101\"],\n          type: {\n            length: 10\n          }\n        }]\n      },\n      START: 102\n    });\n  }\n  addStart() {\n    this.encoding[this.startState].addStart();\n  }\n  is() {\n    return inArray(this.key, this.states);\n  }\n  pushState(encodingState) {\n    let encoding = this.encoding,\n      value = encodingState.value.replace(/\\s/g, \"\"),\n      regexSeparators = new RegExp(\"[\" + this.startAI + this.endAI + \"]\", \"g\"),\n      index = encodingState.index,\n      subState = {\n        state: this.startState\n      },\n      current,\n      nextStart,\n      separatorLength;\n    encoding.addPattern(this.START);\n    const trueCondition = true;\n    while (trueCondition) {\n      subState.index = 0;\n      separatorLength = value.charAt(index) === this.startAI ? 2 : 0;\n      current = separatorLength > 0 ? this.getBySeparator(value, index) : this.getByLength(value, index);\n      if (current.ai.length) {\n        nextStart = index + separatorLength + current.id.length + current.ai.length;\n      } else {\n        nextStart = value.indexOf(this.startAI, index + 1);\n        if (nextStart < 0) {\n          if (index + current.ai.max + current.id.length + separatorLength < value.length) {\n            throw new Error(\"Separators are required after variable length identifiers\");\n          }\n          nextStart = value.length;\n        }\n      }\n      subState.value = value.substring(index, nextStart).replace(regexSeparators, \"\");\n      this.validate(current, subState.value);\n      encoding.pushData(subState, this.dependentStates);\n      if (nextStart >= value.length) {\n        break;\n      }\n      index = nextStart;\n      if (subState.state !== this.startState) {\n        encoding[this.startState].move(subState);\n        subState.state = this.startState;\n      }\n      if (!current.ai.length) {\n        encoding.addPattern(this.START);\n      }\n    }\n    encodingState.index = encodingState.value.length;\n  }\n  validate(current, value) {\n    let code = value.substr(current.id.length),\n      ai = current.ai;\n    if (!ai.type && !numberRegex.test(code)) {\n      throw new Error(\"Application identifier \" + current.id + \" is numeric only but contains non numeric character(s).\");\n    }\n    if (ai.type === \"alphanumeric\" && !alphanumericRegex.test(code)) {\n      throw new Error(\"Application identifier \" + current.id + \" is alphanumeric only but contains non alphanumeric character(s).\");\n    }\n    if (ai.length && ai.length !== code.length) {\n      throw new Error(\"Application identifier \" + current.id + \" must be \" + ai.length + \" characters long.\");\n    }\n    if (ai.min && ai.min > code.length) {\n      throw new Error(\"Application identifier \" + current.id + \" must be at least \" + ai.min + \" characters long.\");\n    }\n    if (ai.max && ai.max < code.length) {\n      throw new Error(\"Application identifier \" + current.id + \" must be at most \" + ai.max + \" characters long.\");\n    }\n  }\n  getByLength(value, index) {\n    let id;\n    let applicationIdentifier;\n    for (let i = 2; i <= 4; i++) {\n      id = getSubstring(value, index, i);\n      applicationIdentifier = this.getApplicationIdentifier(id) || this.getApplicationIdentifier(id.substring(0, id.length - 1));\n      if (applicationIdentifier) {\n        return {\n          id: id,\n          ai: applicationIdentifier\n        };\n      }\n    }\n    this.unsupportedAIError(id);\n  }\n  unsupportedAIError(id) {\n    throw new Error(\"'\" + id + \"' is not a supported Application Identifier\");\n  }\n  getBySeparator(value, index) {\n    let start = value.indexOf(this.startAI, index),\n      end = value.indexOf(this.endAI, start),\n      id = value.substring(start + 1, end),\n      ai = this.getApplicationIdentifier(id) || this.getApplicationIdentifier(id.substr(id.length - 1));\n    if (!ai) {\n      this.unsupportedAIError(id);\n    }\n    return {\n      ai: ai,\n      id: id\n    };\n  }\n  getApplicationIdentifier(id) {\n    let applicationIdentifier = this.applicationIdentifiers,\n      multiKey = applicationIdentifier.multiKey;\n    if (applicationIdentifier[id]) {\n      return applicationIdentifier[id];\n    }\n    for (let i = 0; i < multiKey.length; i++) {\n      if (multiKey[i].ids && inArray(id, multiKey[i].ids)) {\n        return multiKey[i].type;\n      } else if (multiKey[i].ranges) {\n        let ranges = multiKey[i].ranges;\n        for (let j = 0; j < ranges.length; j++) {\n          if (ranges[j][0] <= id && id <= ranges[j][1]) {\n            return multiKey[i].type;\n          }\n        }\n      }\n    }\n  }\n};\nexport class Code128Base extends Encoding {\n  constructor(options) {\n    super(options);\n    this._initStates();\n  }\n  initProperties() {\n    super.initProperties();\n    extend(this, {\n      characterMap: [212222, 222122, 222221, 121223, 121322, 131222, 122213, 122312, 132212, 221213, 221312, 231212, 112232, 122132, 122231, 113222, 123122, 123221, 223211, 221132, 221231, 213212, 223112, 312131, 311222, 321122, 321221, 312212, 322112, 322211, 212123, 212321, 232121, 111323, 131123, 131321, 112313, 132113, 132311, 211313, 231113, 231311, 112133, 112331, 132131, 113123, 113321, 133121, 313121, 211331, 231131, 213113, 213311, 213131, 311123, 311321, 331121, 312113, 312311, 332111, 314111, 221411, 431111, 111224, 111422, 121124, 121421, 141122, 141221, 112214, 112412, 122114, 122411, 142112, 142211, 241211, 221114, 413111, 241112, 134111, 111242, 121142, 121241, 114212, 124112, 124211, 411212, 421112, 421211, 212141, 214121, 412121, 111143, 111341, 131141, 114113, 114311, 411113, 411311, 113141, 114131, 311141, 411131, 211412, 211214, 211232, 2331112],\n      STOP: 106\n    });\n  }\n  _initStates() {\n    for (let i = 0; i < this.states.length; i++) {\n      this[this.states[i]] = new states128[this.states[i]](this, this.states);\n    }\n  }\n  initValue(value, width, height) {\n    this.pattern = [];\n    this.value = value;\n    this.width = width;\n    this.height = height;\n    this.checkSum = 0;\n    this.totalUnits = 0;\n    this.index = 0;\n    this.position = 1;\n  }\n  addData() {\n    let encodingState = {\n      value: this.value,\n      index: 0,\n      state: \"\"\n    };\n    if (this.value.length === 0) {\n      return;\n    }\n    encodingState.state = encodingState.previousState = this.getNextState(encodingState, this.states);\n    this.addStart(encodingState);\n    this.pushData(encodingState, this.states);\n    this.addCheckSum();\n    this.addStop();\n    this.setBaseUnit();\n  }\n  pushData(encodingState, states) {\n    const trueCondition = true;\n    while (trueCondition) {\n      this[encodingState.state].pushState(encodingState);\n      if (encodingState.index >= encodingState.value.length) {\n        break;\n      }\n      if (!encodingState.shifted) {\n        encodingState.previousState = encodingState.state;\n        encodingState.state = this.getNextState(encodingState, states);\n        this[encodingState.state].move(encodingState);\n      } else {\n        let temp = encodingState.state;\n        encodingState.state = encodingState.previousState;\n        encodingState.previousState = temp;\n        encodingState.shifted = false;\n      }\n    }\n  }\n  addStart(encodingState) {\n    this[encodingState.state].addStart(encodingState);\n    this.position = 1;\n  }\n  addCheckSum() {\n    this.checksum = this.checkSum % 103;\n    this.addPattern(this.checksum);\n  }\n  addStop() {\n    this.addPattern(this.STOP);\n  }\n  setBaseUnit() {\n    this.baseUnit = this.width / (this.totalUnits + this.quietZoneLength);\n  }\n  addPattern(code) {\n    const pattern = this.characterMap[code].toString();\n    let value;\n    for (let i = 0; i < pattern.length; i++) {\n      value = parseInt(pattern.charAt(i), 10);\n      this.pattern.push(value);\n      this.totalUnits += value;\n    }\n    this.checkSum += code * this.position++;\n  }\n  getNextState(encodingState, states) {\n    for (let i = 0; i < states.length; i++) {\n      if (this[states[i]].is(encodingState.value, encodingState.index)) {\n        return states[i];\n      }\n    }\n    this.invalidCharacterError(encodingState.value.charAt(encodingState.index));\n  }\n}\nexport class Code128a extends Code128Base {\n  initProperties() {\n    super.initProperties();\n    extend(this, {\n      name: \"Code 128 A\",\n      states: [\"A\"]\n    });\n  }\n}\nexport class Code128b extends Code128Base {\n  initProperties() {\n    super.initProperties();\n    extend(this, {\n      name: \"Code 128 B\",\n      states: [\"B\"]\n    });\n  }\n}\nexport class Code128c extends Code128Base {\n  initProperties() {\n    super.initProperties();\n    extend(this, {\n      name: \"Code 128 C\",\n      states: [\"C\"]\n    });\n  }\n}\nexport class Code128 extends Code128Base {\n  initProperties() {\n    super.initProperties();\n    extend(this, {\n      name: \"Code 128\",\n      states: [\"C\", \"B\", \"A\", \"FNC4\"]\n    });\n  }\n}\nexport class CodeGS1128 extends Code128Base {\n  initProperties() {\n    super.initProperties();\n    extend(this, {\n      name: \"Code GS1-128\",\n      states: [\"FNC1\", \"C\", \"B\"]\n    });\n  }\n}\nfunction getSubstring(value, index, count) {\n  return value.substring(index, index + count);\n}","map":{"version":3,"names":["Class","Encoding","deepExtend","inArray","numberRegex","alphanumericRegex","extend","Object","assign","State128","constructor","encoding","initProperties","addStart","is","isCode","move","pushState","State128AB","states","_initMoves","FNC4","SHIFT","addPattern","START","value","index","code","charCodeAt","encodingState","idx","_moves","call","length","maxLength","numberMatch","substr","match","indexOf","getValue","push","_moveFNC","shiftKey","_shiftState","_moveState","fnc","previousState","key","shifted","MOVE","states128","A","State128A","B","State128B","C","State128C","next4","getSubstring","test","parseInt","State128FNC4","_initSubStates","dependentStates","subState","_getSubState","_initSubState","state","_pushStart","pushData","subStates","_getAll","i","result","String","fromCharCode","FNC1","States128FNC1","startState","startAI","endAI","applicationIdentifiers","max","type","min","multiKey","ids","ranges","replace","regexSeparators","RegExp","current","nextStart","separatorLength","trueCondition","charAt","getBySeparator","getByLength","ai","id","Error","substring","validate","applicationIdentifier","getApplicationIdentifier","unsupportedAIError","start","end","j","Code128Base","options","_initStates","characterMap","STOP","initValue","width","height","pattern","checkSum","totalUnits","position","addData","getNextState","addCheckSum","addStop","setBaseUnit","temp","checksum","baseUnit","quietZoneLength","toString","invalidCharacterError","Code128a","name","Code128b","Code128c","Code128","CodeGS1128","count"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-charts/dist/es2015/barcode/encodings/code128.js"],"sourcesContent":["import { Class } from '../../common';\nimport { Encoding } from './encoding';\nimport deepExtend from '../../common/deep-extend';\nimport inArray from '../../common/in-array';\n\nconst numberRegex = /^\\d+$/;\nconst alphanumericRegex = /^[a-z0-9]+$/i;\nconst extend = Object.assign;\n\nexport class State128 extends Class {\n    constructor(encoding) {\n        super();\n        this.encoding = encoding;\n        this.initProperties();\n    }\n\n    initProperties() { }\n\n    addStart() { }\n\n    is() { }\n\n    isCode() {\n        return false;\n    }\n\n    move() { }\n\n    pushState() { }\n}\n\nexport class State128AB extends State128 {\n    constructor(encoding, states) {\n        super(encoding);\n        this.states = states;\n        this._initMoves(states);\n    }\n\n    initProperties() {\n        super.initProperties();\n\n        deepExtend(this, {\n            FNC4: \"FNC4\",\n            SHIFT: 98\n        });\n    }\n\n    addStart() {\n        this.encoding.addPattern(this.START);\n    }\n\n    is(value, index) {\n        let code = value.charCodeAt(index);\n        return this.isCode(code);\n    }\n\n    move(encodingState) {\n        let idx = 0;\n\n        while (!this._moves[idx].call(this, encodingState) && idx < this._moves.length) {\n            idx++;\n        }\n    }\n\n    pushState(encodingState) {\n        let states = this.states,\n            value = encodingState.value,\n            maxLength = value.length,\n            code;\n\n        if (inArray(\"C\", states)) {\n            let numberMatch = value.substr(encodingState.index).match(/\\d{4,}/g);\n\n            if (numberMatch) {\n                maxLength = value.indexOf(numberMatch[0], encodingState.index);\n            }\n        }\n\n        while ((code = encodingState.value.charCodeAt(encodingState.index)) >= 0 &&\n            this.isCode(code) &&\n            encodingState.index < maxLength) {\n            this.encoding.addPattern(this.getValue(code));\n            encodingState.index++;\n        }\n    }\n\n    _initMoves(states) {\n        this._moves = [];\n\n        if (inArray(this.FNC4, states)) {\n            this._moves.push(this._moveFNC);\n        }\n\n        if (inArray(this.shiftKey, states)) {\n            this._moves.push(this._shiftState);\n        }\n\n        this._moves.push(this._moveState);\n    }\n\n    _moveFNC(encodingState) {\n        if (encodingState.fnc) {\n            encodingState.fnc = false;\n            return encodingState.previousState === this.key;\n        }\n    }\n\n    _shiftState(encodingState) {\n        if (encodingState.previousState === this.shiftKey &&\n            (encodingState.index + 1 >= encodingState.value.length ||\n                this.encoding[this.shiftKey].is(encodingState.value, encodingState.index + 1))) {\n            this.encoding.addPattern(this.SHIFT);\n            encodingState.shifted = true;\n            return true;\n        }\n    }\n\n    _moveState() {\n        this.encoding.addPattern(this.MOVE);\n        return true;\n    }\n}\n\nconst states128 = {};\n\nstates128.A = class State128A extends State128AB {\n    initProperties() {\n        super.initProperties();\n\n        extend(this, {\n            key: \"A\",\n            shiftKey: \"B\",\n            MOVE: 101,\n            START: 103\n        });\n    }\n\n    isCode(code) {\n        return 0 <= code && code < 96;\n    }\n\n    getValue(code) {\n        if (code < 32) {\n            return code + 64;\n        }\n\n        return code - 32;\n    }\n};\n\nstates128.B = class State128B extends State128AB {\n    initProperties() {\n        super.initProperties();\n\n        extend(this, {\n            key: \"B\",\n            shiftKey: \"A\",\n            MOVE: 100,\n            START: 104\n        });\n    }\n\n    isCode(code) {\n        return 32 <= code && code < 128;\n    }\n\n    getValue(code) {\n        return code - 32;\n    }\n};\n\nstates128.C = class State128C extends State128 {\n    initProperties() {\n        super.initProperties();\n\n        extend(this, {\n            key: \"C\",\n            MOVE: 99,\n            START: 105\n        });\n    }\n\n    addStart() {\n        this.encoding.addPattern(this.START);\n    }\n\n    is(value, index) {\n        let next4 = getSubstring(value, index, 4);\n        return (index + 4 <= value.length || value.length === 2) && numberRegex.test(next4);\n    }\n\n    move() {\n        this.encoding.addPattern(this.MOVE);\n    }\n\n    pushState(encodingState) {\n        let code;\n\n        while ((code = getSubstring(encodingState.value, encodingState.index, 2)) &&\n            numberRegex.test(code) && code.length === 2) {\n            this.encoding.addPattern(parseInt(code, 10));\n            encodingState.index += 2;\n        }\n    }\n\n    getValue(code) {\n        return code;\n    }\n};\n\nstates128.FNC4 = class State128FNC4 extends State128 {\n    constructor(encoding, states) {\n        super(encoding);\n        this._initSubStates(states);\n    }\n\n    initProperties() {\n        super.initProperties();\n\n        extend(this, {\n            key: \"FNC4\",\n            dependentStates: [\"A\", \"B\"]\n        });\n    }\n\n    addStart(encodingState) {\n        let code = encodingState.value.charCodeAt(0) - 128,\n            subState = this._getSubState(code);\n\n        this.encoding[subState].addStart();\n    }\n\n    is(value, index) {\n        let code = value.charCodeAt(index);\n        return this.isCode(code);\n    }\n\n    isCode(code) {\n        return 128 <= code && code < 256;\n    }\n\n    pushState(encodingState) {\n        let subState = this._initSubState(encodingState),\n            encoding = this.encoding,\n            length = subState.value.length;\n        let code;\n\n        encodingState.index += length;\n\n        if (length < 3) {\n            for (; subState.index < length; subState.index++) {\n                code = subState.value.charCodeAt(subState.index);\n                subState.state = this._getSubState(code);\n\n                if (subState.previousState !== subState.state) {\n                    subState.previousState = subState.state;\n                    encoding[subState.state].move(subState);\n                }\n\n                encoding.addPattern(encoding[subState.state].MOVE);\n                encoding.addPattern(encoding[subState.state].getValue(code));\n            }\n        } else {\n            if (subState.state !== subState.previousState) {\n                encoding[subState.state].move(subState);\n            }\n\n            this._pushStart(subState);\n            encoding.pushData(subState, this.subStates);\n\n            if (encodingState.index < encodingState.value.length) {\n                this._pushStart(subState);\n            }\n        }\n\n        encodingState.fnc = true;\n        encodingState.state = subState.state;\n    }\n\n    _pushStart(subState) {\n        this.encoding.addPattern(this.encoding[subState.state].MOVE);\n        this.encoding.addPattern(this.encoding[subState.state].MOVE);\n    }\n\n    _initSubState(encodingState) {\n        const subState = {\n            value: this._getAll(encodingState.value, encodingState.index),\n            index: 0\n        };\n\n        subState.state = this._getSubState(subState.value.charCodeAt(0));\n        subState.previousState = encodingState.previousState === this.key ?\n            subState.state :\n            encodingState.previousState;\n\n        return subState;\n    }\n\n    _initSubStates(states) {\n        this.subStates = [];\n\n        for (let i = 0; i < states.length; i++) {\n            if (inArray(states[i], this.dependentStates)) {\n                this.subStates.push(states[i]);\n            }\n        }\n    }\n\n    _getSubState(code) {\n        for (let i = 0; i < this.subStates.length; i++) {\n            if (this.encoding[this.subStates[i]].isCode(code)) {\n                return this.subStates[i];\n            }\n        }\n    }\n\n    _getAll(value, index) {\n        let code;\n        let result = \"\";\n        let i = index;\n\n        while ((code = value.charCodeAt(i++)) && this.isCode(code)) {\n            result += String.fromCharCode(code - 128);\n        }\n\n        return result;\n    }\n};\n\nstates128.FNC1 = class States128FNC1 extends State128 {\n    constructor(encoding, states) {\n        super(encoding);\n        this.states = states;\n    }\n\n    initProperties() {\n        super.initProperties();\n\n        extend(this, {\n            key: \"FNC1\",\n            startState: \"C\",\n            startAI: \"(\",\n            endAI: \")\",\n            dependentStates: [\"C\", \"B\"],\n            applicationIdentifiers: {\n                \"22\": { max: 29, type: \"alphanumeric\" },\n                \"402\": { length: 17 },\n                \"7004\": { max: 4, type: \"alphanumeric\" },\n                \"242\": { max: 6, type: \"alphanumeric\" },\n                \"8020\": { max: 25, type: \"alphanumeric\" },\n                \"703\": { min: 3, max: 30, type: \"alphanumeric\" },\n                \"8008\": { min: 8, max: 12, type: \"alphanumeric\" },\n                \"253\": { min: 13, max: 17, type: \"alphanumeric\" },\n                \"8003\": { min: 14, max: 30, type: \"alphanumeric\" },\n                multiKey: [{\n                    ids: [\"15\", \"17\", \"8005\", \"8100\"],\n                    ranges: [\n                        [11, 13],\n                        [310, 316],\n                        [320, 336],\n                        [340, 369]\n                    ],\n                    type: { length: 6 }\n                }, {\n                    ids: [\"240\", \"241\", \"250\", \"251\", \"400\", \"401\", \"403\", \"7002\", \"8004\", \"8007\", \"8110\"],\n                    ranges: [[90 - 99]],\n                    type: { max: 30, type: \"alphanumeric\" }\n                }, {\n                    ids: [\"7001\"],\n                    ranges: [[410, 414]],\n                    type: { length: 13 }\n                }, {\n                    ids: [\"10\", \"21\", \"254\", \"420\", \"8002\"],\n                    type: { max: 20, type: \"alphanumeric\" }\n                }, {\n                    ids: [\"00\", \"8006\", \"8017\", \"8018\"],\n                    type: { length: 18 }\n                }, {\n                    ids: [\"01\", \"02\", \"8001\"],\n                    type: { length: 14 }\n                }, {\n                    ids: [\"422\"],\n                    ranges: [\n                        [424, 426]\n                    ],\n                    type: { length: 3 }\n                }, {\n                    ids: [\"20\", \"8102\"],\n                    type: { length: 2 }\n                }, {\n                    ids: [\"30\", \"37\"],\n                    type: { max: 8, type: \"alphanumeric\" }\n                }, {\n                    ids: [\"390\", \"392\"],\n                    type: { max: 15, type: \"alphanumeric\" }\n                }, {\n                    ids: [\"421\", \"423\"],\n                    type: { min: 3, max: 15, type: \"alphanumeric\" }\n                }, {\n                    ids: [\"391\", \"393\"],\n                    type: { min: 3, max: 18, type: \"alphanumeric\" }\n                }, {\n                    ids: [\"7003\", \"8101\"],\n                    type: { length: 10 }\n                }]\n            },\n            START: 102\n        });\n    }\n\n\n    addStart() {\n        this.encoding[this.startState].addStart();\n    }\n\n    is() {\n        return inArray(this.key, this.states);\n    }\n\n    pushState(encodingState) {\n        let encoding = this.encoding,\n            value = encodingState.value.replace(/\\s/g, \"\"),\n            regexSeparators = new RegExp(\"[\" + this.startAI + this.endAI + \"]\", \"g\"),\n            index = encodingState.index,\n            subState = {\n                state: this.startState\n            },\n            current,\n            nextStart,\n            separatorLength;\n\n        encoding.addPattern(this.START);\n\n        const trueCondition = true;\n\n        while (trueCondition) {\n            subState.index = 0;\n\n            separatorLength = value.charAt(index) === this.startAI ? 2 : 0;\n            current = separatorLength > 0 ? this.getBySeparator(value, index) : this.getByLength(value, index);\n\n            if (current.ai.length) {\n                nextStart = index + separatorLength + current.id.length + current.ai.length;\n            } else {\n                nextStart = value.indexOf(this.startAI, index + 1);\n\n                if (nextStart < 0) {\n                    if (index + current.ai.max + current.id.length + separatorLength < value.length) {\n                        throw new Error(\"Separators are required after variable length identifiers\");\n                    }\n\n                    nextStart = value.length;\n                }\n            }\n\n            subState.value = value.substring(index, nextStart).replace(regexSeparators, \"\");\n            this.validate(current, subState.value);\n            encoding.pushData(subState, this.dependentStates);\n\n            if (nextStart >= value.length) {\n                break;\n            }\n\n            index = nextStart;\n\n            if (subState.state !== this.startState) {\n                encoding[this.startState].move(subState);\n                subState.state = this.startState;\n            }\n\n            if (!current.ai.length) {\n                encoding.addPattern(this.START);\n            }\n        }\n\n        encodingState.index = encodingState.value.length;\n    }\n\n    validate(current, value) {\n        let code = value.substr(current.id.length),\n            ai = current.ai;\n\n        if (!ai.type && !numberRegex.test(code)) {\n            throw new Error(\"Application identifier \" + current.id + \" is numeric only but contains non numeric character(s).\");\n        }\n\n        if (ai.type === \"alphanumeric\" && !alphanumericRegex.test(code)) {\n            throw new Error(\"Application identifier \" + current.id + \" is alphanumeric only but contains non alphanumeric character(s).\");\n        }\n\n        if (ai.length && ai.length !== code.length) {\n            throw new Error(\"Application identifier \" + current.id + \" must be \" + ai.length + \" characters long.\");\n        }\n\n        if (ai.min && ai.min > code.length) {\n            throw new Error(\"Application identifier \" + current.id + \" must be at least \" + ai.min + \" characters long.\");\n        }\n\n        if (ai.max && ai.max < code.length) {\n            throw new Error(\"Application identifier \" + current.id + \" must be at most \" + ai.max + \" characters long.\");\n        }\n    }\n\n    getByLength(value, index) {\n        let id;\n        let applicationIdentifier;\n\n        for (let i = 2; i <= 4; i++) {\n            id = getSubstring(value, index, i);\n            applicationIdentifier = this.getApplicationIdentifier(id) || this.getApplicationIdentifier(id.substring(0, id.length - 1));\n            if (applicationIdentifier) {\n                return {\n                    id: id,\n                    ai: applicationIdentifier\n                };\n            }\n        }\n        this.unsupportedAIError(id);\n    }\n\n    unsupportedAIError(id) {\n        throw new Error(\"'\" + id + \"' is not a supported Application Identifier\");\n    }\n\n    getBySeparator(value, index) {\n        let start = value.indexOf(this.startAI, index),\n            end = value.indexOf(this.endAI, start),\n            id = value.substring(start + 1, end),\n            ai = this.getApplicationIdentifier(id) || this.getApplicationIdentifier(id.substr(id.length - 1));\n\n        if (!ai) {\n            this.unsupportedAIError(id);\n        }\n\n        return {\n            ai: ai,\n            id: id\n        };\n    }\n\n    getApplicationIdentifier(id) {\n        let applicationIdentifier = this.applicationIdentifiers,\n            multiKey = applicationIdentifier.multiKey;\n\n        if (applicationIdentifier[id]) {\n            return applicationIdentifier[id];\n        }\n\n        for (let i = 0; i < multiKey.length; i++) {\n            if (multiKey[i].ids && inArray(id, multiKey[i].ids)) {\n                return multiKey[i].type;\n            } else if (multiKey[i].ranges) {\n                let ranges = multiKey[i].ranges;\n\n                for (let j = 0; j < ranges.length; j++) {\n                    if (ranges[j][0] <= id && id <= ranges[j][1]) {\n                        return multiKey[i].type;\n                    }\n                }\n            }\n        }\n    }\n};\n\nexport class Code128Base extends Encoding {\n    constructor(options) {\n        super(options);\n        this._initStates();\n    }\n\n    initProperties() {\n        super.initProperties();\n\n        extend(this, {\n            characterMap: [\n                212222, 222122, 222221, 121223, 121322, 131222, 122213, 122312, 132212, 221213,\n                221312, 231212, 112232, 122132, 122231, 113222, 123122, 123221, 223211, 221132,\n                221231, 213212, 223112, 312131, 311222, 321122, 321221, 312212, 322112, 322211,\n                212123, 212321, 232121, 111323, 131123, 131321, 112313, 132113, 132311, 211313,\n                231113, 231311, 112133, 112331, 132131, 113123, 113321, 133121, 313121, 211331,\n                231131, 213113, 213311, 213131, 311123, 311321, 331121, 312113, 312311, 332111,\n                314111, 221411, 431111, 111224, 111422, 121124, 121421, 141122, 141221, 112214,\n                112412, 122114, 122411, 142112, 142211, 241211, 221114, 413111, 241112, 134111,\n                111242, 121142, 121241, 114212, 124112, 124211, 411212, 421112, 421211, 212141,\n                214121, 412121, 111143, 111341, 131141, 114113, 114311, 411113, 411311, 113141,\n                114131, 311141, 411131, 211412, 211214, 211232, 2331112\n            ],\n            STOP: 106\n        });\n    }\n\n    _initStates() {\n        for (let i = 0; i < this.states.length; i++) {\n            this[this.states[i]] = new states128[this.states[i]](this, this.states);\n        }\n    }\n\n    initValue(value, width, height) {\n        this.pattern = [];\n        this.value = value;\n        this.width = width;\n        this.height = height;\n        this.checkSum = 0;\n        this.totalUnits = 0;\n        this.index = 0;\n        this.position = 1;\n    }\n\n    addData() {\n        let encodingState = {\n            value: this.value,\n            index: 0,\n            state: \"\"\n        };\n\n        if (this.value.length === 0) {\n            return;\n        }\n\n        encodingState.state =\n            encodingState.previousState = this.getNextState(encodingState, this.states);\n\n        this.addStart(encodingState);\n\n        this.pushData(encodingState, this.states);\n\n        this.addCheckSum();\n        this.addStop();\n        this.setBaseUnit();\n    }\n\n    pushData(encodingState, states) {\n        const trueCondition = true;\n\n        while (trueCondition) {\n            this[encodingState.state].pushState(encodingState);\n\n            if (encodingState.index >= encodingState.value.length) {\n                break;\n            }\n\n            if (!encodingState.shifted) {\n                encodingState.previousState = encodingState.state;\n                encodingState.state = this.getNextState(encodingState, states);\n                this[encodingState.state].move(encodingState);\n            } else {\n                let temp = encodingState.state;\n                encodingState.state = encodingState.previousState;\n                encodingState.previousState = temp;\n                encodingState.shifted = false;\n            }\n        }\n    }\n\n    addStart(encodingState) {\n        this[encodingState.state].addStart(encodingState);\n        this.position = 1;\n    }\n\n    addCheckSum() {\n        this.checksum = this.checkSum % 103;\n        this.addPattern(this.checksum);\n    }\n\n    addStop() {\n        this.addPattern(this.STOP);\n    }\n\n    setBaseUnit() {\n        this.baseUnit = this.width / (this.totalUnits + this.quietZoneLength);\n    }\n\n    addPattern(code) {\n        const pattern = this.characterMap[code].toString();\n        let value;\n\n        for (let i = 0; i < pattern.length; i++) {\n            value = parseInt(pattern.charAt(i), 10);\n            this.pattern.push(value);\n            this.totalUnits += value;\n        }\n        this.checkSum += code * this.position++;\n    }\n\n    getNextState(encodingState, states) {\n        for (let i = 0; i < states.length; i++) {\n            if (this[states[i]].is(encodingState.value, encodingState.index)) {\n                return states[i];\n            }\n        }\n\n        this.invalidCharacterError(encodingState.value.charAt(encodingState.index));\n    }\n}\n\nexport class Code128a extends Code128Base {\n    initProperties() {\n        super.initProperties();\n\n        extend(this, {\n            name: \"Code 128 A\",\n            states: [\"A\"]\n        });\n    }\n}\n\nexport class Code128b extends Code128Base {\n    initProperties() {\n        super.initProperties();\n\n        extend(this, {\n            name: \"Code 128 B\",\n            states: [\"B\"]\n        });\n    }\n}\n\nexport class Code128c extends Code128Base {\n    initProperties() {\n        super.initProperties();\n\n        extend(this, {\n            name: \"Code 128 C\",\n            states: [\"C\"]\n        });\n    }\n}\n\nexport class Code128 extends Code128Base {\n    initProperties() {\n        super.initProperties();\n\n        extend(this, {\n            name: \"Code 128\",\n            states: [\"C\", \"B\", \"A\", \"FNC4\"]\n        });\n    }\n}\n\nexport class CodeGS1128 extends Code128Base {\n    initProperties() {\n        super.initProperties();\n\n        extend(this, {\n            name: \"Code GS1-128\",\n            states: [\"FNC1\", \"C\", \"B\"]\n        });\n    }\n}\n\nfunction getSubstring(value, index, count) {\n    return value.substring(index, index + count);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}