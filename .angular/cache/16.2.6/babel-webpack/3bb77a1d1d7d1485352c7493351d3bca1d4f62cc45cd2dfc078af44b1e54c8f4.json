{"ast":null,"code":"import { QRDataMode } from './qr-data-mode';\nimport { extend } from '../../utils';\nimport { toBitsString, splitInto } from '../../utils';\nexport class NumericQRDataMode extends QRDataMode {\n  initProperties() {\n    super.initProperties();\n    extend(this, {\n      bitsInCharacterCount: [10, 12, 14],\n      modeIndicator: \"0001\"\n    });\n  }\n  getValue(character) {\n    return parseInt(character, 10);\n  }\n  encode(str, version) {\n    let mode = this,\n      parts = splitInto(str, 3),\n      result = mode.getModeCountString(str.length, version);\n    let i;\n    for (i = 0; i < parts.length - 1; i++) {\n      result += toBitsString(parts[i], 10);\n    }\n    return result + toBitsString(parts[i], 1 + 3 * parts[i].length);\n  }\n  getStringBitsLength(inputLength, version) {\n    let mod3 = inputLength % 3;\n    return 4 + this.getBitsCharacterCount(version) + 10 * Math.floor(inputLength / 3) + 3 * mod3 + (mod3 === 0 ? 0 : 1);\n  }\n}","map":{"version":3,"names":["QRDataMode","extend","toBitsString","splitInto","NumericQRDataMode","initProperties","bitsInCharacterCount","modeIndicator","getValue","character","parseInt","encode","str","version","mode","parts","result","getModeCountString","length","i","getStringBitsLength","inputLength","mod3","getBitsCharacterCount","Math","floor"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-charts/dist/es2015/qrcode/encodings/data-modes/numeric-data-mode.js"],"sourcesContent":["import { QRDataMode } from './qr-data-mode';\nimport { extend } from '../../utils';\nimport {\n    toBitsString,\n    splitInto\n} from '../../utils';\n\nexport class NumericQRDataMode extends QRDataMode {\n    initProperties() {\n        super.initProperties();\n\n        extend(this, {\n            bitsInCharacterCount: [10, 12, 14],\n            modeIndicator: \"0001\"\n        });\n    }\n\n    getValue(character) {\n        return parseInt(character, 10);\n    }\n\n    encode(str, version) {\n        let mode = this,\n            parts = splitInto(str, 3),\n            result = mode.getModeCountString(str.length, version);\n        let i;\n\n        for (i = 0; i < parts.length - 1; i++) {\n            result += toBitsString(parts[i], 10);\n        }\n\n        return result + toBitsString(parts[i], 1 + 3 * parts[i].length);\n    }\n\n    getStringBitsLength(inputLength, version) {\n        let mod3 = inputLength % 3;\n        return 4 + this.getBitsCharacterCount(version) + 10 * Math.floor(inputLength / 3) + 3 * mod3 + (mod3 === 0 ? 0 : 1);\n    }\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,MAAM,QAAQ,aAAa;AACpC,SACIC,YAAY,EACZC,SAAS,QACN,aAAa;AAEpB,OAAO,MAAMC,iBAAiB,SAASJ,UAAU,CAAC;EAC9CK,cAAcA,CAAA,EAAG;IACb,KAAK,CAACA,cAAc,CAAC,CAAC;IAEtBJ,MAAM,CAAC,IAAI,EAAE;MACTK,oBAAoB,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;MAClCC,aAAa,EAAE;IACnB,CAAC,CAAC;EACN;EAEAC,QAAQA,CAACC,SAAS,EAAE;IAChB,OAAOC,QAAQ,CAACD,SAAS,EAAE,EAAE,CAAC;EAClC;EAEAE,MAAMA,CAACC,GAAG,EAAEC,OAAO,EAAE;IACjB,IAAIC,IAAI,GAAG,IAAI;MACXC,KAAK,GAAGZ,SAAS,CAACS,GAAG,EAAE,CAAC,CAAC;MACzBI,MAAM,GAAGF,IAAI,CAACG,kBAAkB,CAACL,GAAG,CAACM,MAAM,EAAEL,OAAO,CAAC;IACzD,IAAIM,CAAC;IAEL,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,KAAK,CAACG,MAAM,GAAG,CAAC,EAAEC,CAAC,EAAE,EAAE;MACnCH,MAAM,IAAId,YAAY,CAACa,KAAK,CAACI,CAAC,CAAC,EAAE,EAAE,CAAC;IACxC;IAEA,OAAOH,MAAM,GAAGd,YAAY,CAACa,KAAK,CAACI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAGJ,KAAK,CAACI,CAAC,CAAC,CAACD,MAAM,CAAC;EACnE;EAEAE,mBAAmBA,CAACC,WAAW,EAAER,OAAO,EAAE;IACtC,IAAIS,IAAI,GAAGD,WAAW,GAAG,CAAC;IAC1B,OAAO,CAAC,GAAG,IAAI,CAACE,qBAAqB,CAACV,OAAO,CAAC,GAAG,EAAE,GAAGW,IAAI,CAACC,KAAK,CAACJ,WAAW,GAAG,CAAC,CAAC,GAAG,CAAC,GAAGC,IAAI,IAAIA,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EACvH;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}