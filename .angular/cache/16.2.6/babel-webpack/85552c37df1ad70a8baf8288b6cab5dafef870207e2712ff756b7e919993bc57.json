{"ast":null,"code":"import { Encoding } from './encoding';\nimport { setDefaultOptions } from '../../common';\nconst extend = Object.assign;\nexport class Code11 extends Encoding {\n  initProperties() {\n    super.initProperties();\n    extend(this, {\n      name: \"Code 11\",\n      characterMap: [\"111121\", \"211121\", \"121121\", \"221111\", \"112121\", \"212111\", \"122111\", \"111221\", \"211211\", \"211111\", \"112111\"],\n      cCheckSumTotal: 10,\n      kCheckSumTotal: 9,\n      kCheckSumMinLength: 10,\n      checkSumMod: 11,\n      DASH_VALUE: 10,\n      DASH: \"-\",\n      START: \"112211\",\n      STOP: \"11221\"\n    });\n  }\n  initValue(value, width) {\n    this.pattern = [];\n    this.value = value;\n    this.width = width;\n    this.totalUnits = 0;\n  }\n  addData() {\n    const value = this.value;\n    this.addPattern(this.START);\n    for (let i = 0; i < value.length; i++) {\n      this.addCharacter(value.charAt(i));\n    }\n    if (this.options.addCheckSum) {\n      this.addCheckSum();\n    }\n    this.addPattern(this.STOP);\n    this.setBaseUnit();\n  }\n  setBaseUnit() {\n    this.baseUnit = this.width / (this.totalUnits + this.quietZoneLength);\n  }\n  addCheckSum() {\n    const value = this.value;\n    let length = value.length;\n    const cValue = this.getWeightedSum(value, length, this.cCheckSumTotal) % this.checkSumMod;\n    this.checksum = String(cValue);\n    this.addPattern(this.characterMap[cValue]);\n    length++;\n    if (length >= this.kCheckSumMinLength) {\n      let kValue = (cValue + this.getWeightedSum(value, length, this.kCheckSumTotal)) % this.checkSumMod;\n      this.checksum += kValue;\n      this.addPattern(this.characterMap[kValue]);\n    }\n  }\n  getWeightedSum(value, length, total) {\n    let weightedSum = 0;\n    for (let i = 0; i < value.length; i++) {\n      weightedSum += this.weightedValue(this.getValue(value.charAt(i)), length, i, total);\n    }\n    return weightedSum;\n  }\n  weightedValue(value, length, index, total) {\n    const weight = (length - index) % total || total;\n    return weight * value;\n  }\n  getValue(character) {\n    if (!isNaN(character)) {\n      return parseInt(character, 10);\n    } else if (character !== this.DASH) {\n      this.invalidCharacterError(character);\n    }\n    return this.DASH_VALUE;\n  }\n  addCharacter(character) {\n    const value = this.getValue(character);\n    const pattern = this.characterMap[value];\n    this.addPattern(pattern);\n  }\n  addPattern(pattern) {\n    let value;\n    for (let i = 0; i < pattern.length; i++) {\n      value = parseInt(pattern.charAt(i), 10);\n      this.pattern.push(value);\n      this.totalUnits += value;\n    }\n  }\n}\nsetDefaultOptions(Code11, {\n  addCheckSum: true\n});","map":{"version":3,"names":["Encoding","setDefaultOptions","extend","Object","assign","Code11","initProperties","name","characterMap","cCheckSumTotal","kCheckSumTotal","kCheckSumMinLength","checkSumMod","DASH_VALUE","DASH","START","STOP","initValue","value","width","pattern","totalUnits","addData","addPattern","i","length","addCharacter","charAt","options","addCheckSum","setBaseUnit","baseUnit","quietZoneLength","cValue","getWeightedSum","checksum","String","kValue","total","weightedSum","weightedValue","getValue","index","weight","character","isNaN","parseInt","invalidCharacterError","push"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-charts/dist/es2015/barcode/encodings/code11.js"],"sourcesContent":["import { Encoding } from './encoding';\nimport { setDefaultOptions } from '../../common';\n\nconst extend = Object.assign;\n\nexport class Code11 extends Encoding {\n    initProperties() {\n        super.initProperties();\n\n        extend(this, {\n            name: \"Code 11\",\n            characterMap: [\"111121\", \"211121\", \"121121\", \"221111\", \"112121\", \"212111\", \"122111\", \"111221\", \"211211\", \"211111\", \"112111\"],\n            cCheckSumTotal: 10,\n            kCheckSumTotal: 9,\n            kCheckSumMinLength: 10,\n            checkSumMod: 11,\n            DASH_VALUE: 10,\n            DASH: \"-\",\n            START: \"112211\",\n            STOP: \"11221\"\n        });\n    }\n\n    initValue(value, width) {\n        this.pattern = [];\n        this.value = value;\n        this.width = width;\n        this.totalUnits = 0;\n    }\n\n    addData() {\n        const value = this.value;\n\n        this.addPattern(this.START);\n\n        for (let i = 0; i < value.length; i++) {\n            this.addCharacter(value.charAt(i));\n        }\n\n        if (this.options.addCheckSum) {\n            this.addCheckSum();\n        }\n\n        this.addPattern(this.STOP);\n        this.setBaseUnit();\n    }\n\n    setBaseUnit() {\n        this.baseUnit = this.width / (this.totalUnits + this.quietZoneLength);\n    }\n\n    addCheckSum() {\n        const value = this.value;\n        let length = value.length;\n        const cValue = this.getWeightedSum(value, length, this.cCheckSumTotal) % this.checkSumMod;\n\n        this.checksum = String(cValue);\n        this.addPattern(this.characterMap[cValue]);\n\n        length++;\n\n        if (length >= this.kCheckSumMinLength) {\n            let kValue = (cValue + this.getWeightedSum(value, length, this.kCheckSumTotal)) % this.checkSumMod;\n            this.checksum += kValue;\n            this.addPattern(this.characterMap[kValue]);\n        }\n    }\n\n    getWeightedSum(value, length, total) {\n        let weightedSum = 0;\n\n        for (let i = 0; i < value.length; i++) {\n            weightedSum += this.weightedValue(this.getValue(value.charAt(i)), length, i, total);\n        }\n\n        return weightedSum;\n    }\n\n    weightedValue(value, length, index, total) {\n        const weight = (length - index) % total || total;\n        return weight * value;\n    }\n\n    getValue(character) {\n        if (!isNaN(character)) {\n            return parseInt(character, 10);\n        } else if (character !== this.DASH) {\n            this.invalidCharacterError(character);\n        }\n\n        return this.DASH_VALUE;\n    }\n\n    addCharacter(character) {\n        const value = this.getValue(character);\n        const pattern = this.characterMap[value];\n\n        this.addPattern(pattern);\n    }\n\n    addPattern(pattern) {\n        let value;\n\n        for (let i = 0; i < pattern.length; i++) {\n            value = parseInt(pattern.charAt(i), 10);\n            this.pattern.push(value);\n            this.totalUnits += value;\n        }\n    }\n}\n\nsetDefaultOptions(Code11, {\n    addCheckSum: true\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}