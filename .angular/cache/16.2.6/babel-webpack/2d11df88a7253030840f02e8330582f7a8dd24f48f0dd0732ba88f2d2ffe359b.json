{"ast":null,"code":"import isObject from './is-object';\nimport isPlainObject from './is-plain-object';\nimport isString from './is-string';\nimport deepExtend from './deep-extend';\nimport setDefaultOptions from './set-default-options';\nimport addClass from './add-class';\nimport removeClass from './remove-class';\nconst KICON = 'k-icon';\nconst KI_PREFFIX = 'k-i-';\nconst KSVGICON = 'k-svg-icon';\nconst KSVG_PREFFIX = 'k-svg-i-';\nclass HTMLBaseIcon {\n  constructor(element, options) {\n    this.element = element;\n    this.options = deepExtend({}, this.options, options);\n    this.wrapper();\n  }\n  wrapper() {\n    this.addClasses();\n  }\n  addClasses() {}\n  html() {\n    return this.element.outerHTML;\n  }\n}\nsetDefaultOptions(HTMLBaseIcon, {\n  name: '',\n  size: 'none',\n  themeColor: 'none',\n  flip: 'default',\n  iconClass: '',\n  stylingOptions: ['size', 'themeColor', 'fill']\n});\nclass HTMLFontIcon extends HTMLBaseIcon {\n  constructor(element, options) {\n    super(element, options);\n  }\n  wrapper() {\n    // Find if there is an existing k-i- class appended to the element.\n    let currentIconClass = this.element.className.split(\" \").find(x => x.startsWith(KI_PREFFIX));\n    let className = this.options.icon ? `${this.options.icon.startsWith(KI_PREFFIX) ? \"\" : KI_PREFFIX}${this.options.icon}` : \"\";\n    this._className = className;\n    addClass(this.element, KICON);\n    removeClass(this.element, currentIconClass); // Remove any existing icons.\n    addClass(this.element, className);\n    addClass(this.element, this.options.iconClass || '');\n    super.wrapper();\n  }\n}\nsetDefaultOptions(HTMLFontIcon, {\n  name: 'HTMLFontIcon',\n  icon: null\n});\nclass HTMLSvgIcon extends HTMLBaseIcon {\n  constructor(element, options) {\n    // Ensure that the inner contents of the wrapping span element are always removed for re-rendering purposes.\n    element.innerHTML = \"\";\n    super(element, options);\n  }\n  wrapper() {\n    let icon = this.options.icon;\n    let iconClass = this.options.iconClass;\n    let currentIconClass = this.element.className.split(\" \").find(x => x.startsWith(KSVG_PREFFIX));\n    if (!icon && iconClass) {\n      // match k-i-(some-icon-name)\n      const regex = /k-i-(\\w+(?:-\\w+)*)/;\n      let iconNameMatch = iconClass.match(regex);\n      if (iconNameMatch) {\n        icon = iconNameMatch[1];\n        iconClass = iconClass.replace(iconNameMatch[0], \"\");\n      }\n    }\n    if (isString(icon)) {\n      icon = icon.replace(\"k-i-\", \"\").replace(/-./g, x => x[1].toUpperCase());\n      icon = this.options.svgIcons[icon] || this.options.svgIcons[`${icon}Icon`];\n    }\n    let className = icon && icon.name ? `${KSVG_PREFFIX}${icon.name}` : \"\";\n    this._className = className;\n    addClass(this.element, KSVGICON);\n    removeClass(this.element, currentIconClass);\n    addClass(this.element, className);\n    addClass(this.element, iconClass || \"\");\n    this.element.setAttribute(\"aria-hidden\", \"true\");\n    if (icon && isPlainObject(icon)) {\n      let svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n      svgElement.setAttribute(\"viewBox\", icon.viewBox || \"\");\n      svgElement.setAttribute(\"focusable\", \"false\");\n      svgElement.innerHTML = icon.content || \"\";\n      this.element.appendChild(svgElement);\n    }\n    super.wrapper();\n  }\n}\nsetDefaultOptions(HTMLSvgIcon, {\n  name: 'HTMLSvgIcon',\n  icon: null,\n  svgIcons: {}\n});\nconst ICON_TYPES = {\n  'svg': HTMLSvgIcon,\n  'font': HTMLFontIcon\n};\nexport default function renderIcon(iconElement, iconOptions) {\n  let element = iconElement;\n  let options = iconOptions;\n  if (!element || isObject(element) && !(element instanceof HTMLElement) || isString(element)) {\n    options = element;\n    element = document.createElement(\"span\");\n  }\n  if (isString(options)) {\n    options = {\n      icon: options\n    };\n  }\n  if (!options.type) {\n    options.type = 'svg';\n  }\n  if (!ICON_TYPES[options.type]) {\n    return null;\n  }\n  return new ICON_TYPES[options.type](element, options).html();\n}","map":{"version":3,"names":["isObject","isPlainObject","isString","deepExtend","setDefaultOptions","addClass","removeClass","KICON","KI_PREFFIX","KSVGICON","KSVG_PREFFIX","HTMLBaseIcon","constructor","element","options","wrapper","addClasses","html","outerHTML","name","size","themeColor","flip","iconClass","stylingOptions","HTMLFontIcon","currentIconClass","className","split","find","x","startsWith","icon","_className","HTMLSvgIcon","innerHTML","regex","iconNameMatch","match","replace","toUpperCase","svgIcons","setAttribute","svgElement","document","createElementNS","viewBox","content","appendChild","ICON_TYPES","renderIcon","iconElement","iconOptions","HTMLElement","createElement","type"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-charts/dist/es2015/common/render-icon.js"],"sourcesContent":["import isObject from './is-object';\nimport isPlainObject from './is-plain-object';\nimport isString from './is-string';\nimport deepExtend from './deep-extend';\nimport setDefaultOptions from './set-default-options';\nimport addClass from './add-class';\nimport removeClass from './remove-class';\n\nconst KICON = 'k-icon';\nconst KI_PREFFIX = 'k-i-';\nconst KSVGICON = 'k-svg-icon';\nconst KSVG_PREFFIX = 'k-svg-i-';\n\nclass HTMLBaseIcon {\n    constructor(element, options) {\n        this.element = element;\n        this.options = deepExtend({}, this.options, options);\n\n        this.wrapper();\n    }\n\n    wrapper() {\n        this.addClasses();\n    }\n\n    addClasses() {\n    }\n\n    html() {\n        return this.element.outerHTML;\n    }\n}\n\nsetDefaultOptions(HTMLBaseIcon, {\n    name: '',\n    size: 'none',\n    themeColor: 'none',\n    flip: 'default',\n    iconClass: '',\n    stylingOptions: [ 'size', 'themeColor', 'fill' ]\n});\n\nclass HTMLFontIcon extends HTMLBaseIcon {\n    constructor(element, options) {\n        super(element, options);\n    }\n\n    wrapper() {\n        // Find if there is an existing k-i- class appended to the element.\n        let currentIconClass = this.element.className.split(\" \").find(x => x.startsWith(KI_PREFFIX));\n        let className = this.options.icon ? `${this.options.icon.startsWith(KI_PREFFIX) ? \"\" : KI_PREFFIX}${this.options.icon}` : \"\";\n\n        this._className = className;\n\n        addClass(this.element, KICON);\n        removeClass(this.element, currentIconClass); // Remove any existing icons.\n        addClass(this.element, className);\n        addClass(this.element, this.options.iconClass || '');\n\n        super.wrapper();\n    }\n}\n\nsetDefaultOptions(HTMLFontIcon, {\n    name: 'HTMLFontIcon',\n    icon: null\n});\n\nclass HTMLSvgIcon extends HTMLBaseIcon {\n    constructor(element, options) {\n        // Ensure that the inner contents of the wrapping span element are always removed for re-rendering purposes.\n        element.innerHTML = \"\";\n\n        super(element, options);\n    }\n\n    wrapper() {\n        let icon = this.options.icon;\n        let iconClass = this.options.iconClass;\n        let currentIconClass = this.element.className.split(\" \").find(x => x.startsWith(KSVG_PREFFIX));\n\n        if (!icon && iconClass) {\n            // match k-i-(some-icon-name)\n            const regex = /k-i-(\\w+(?:-\\w+)*)/;\n            let iconNameMatch = iconClass.match(regex);\n            if (iconNameMatch) {\n                icon = iconNameMatch[1];\n                iconClass = iconClass.replace(iconNameMatch[0], \"\");\n            }\n        }\n\n        if (isString(icon)) {\n            icon = icon.replace(\"k-i-\", \"\").replace(/-./g, x => x[1].toUpperCase());\n            icon = this.options.svgIcons[icon] || this.options.svgIcons[`${icon}Icon`];\n        }\n\n        let className = icon && icon.name ? `${KSVG_PREFFIX}${icon.name}` : \"\";\n        this._className = className;\n\n        addClass(this.element, KSVGICON);\n        removeClass(this.element, currentIconClass);\n        addClass(this.element, className);\n        addClass(this.element, iconClass || \"\");\n        this.element.setAttribute(\"aria-hidden\", \"true\");\n\n        if (icon && isPlainObject(icon)) {\n            let svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n            svgElement.setAttribute(\"viewBox\", icon.viewBox || \"\");\n            svgElement.setAttribute(\"focusable\", \"false\");\n            svgElement.innerHTML = icon.content || \"\";\n\n            this.element.appendChild(svgElement);\n        }\n\n        super.wrapper();\n    }\n}\n\nsetDefaultOptions(HTMLSvgIcon, {\n    name: 'HTMLSvgIcon',\n    icon: null,\n    svgIcons: {}\n});\n\nconst ICON_TYPES = {\n    'svg': HTMLSvgIcon,\n    'font': HTMLFontIcon\n};\n\nexport default function renderIcon(iconElement, iconOptions) {\n    let element = iconElement;\n    let options = iconOptions;\n\n    if (!element\n        || (isObject(element) && !(element instanceof HTMLElement))\n        || isString(element)) {\n        options = element;\n        element = document.createElement(\"span\");\n    }\n\n    if (isString(options)) {\n        options = {\n            icon: options\n        };\n    }\n\n    if (!options.type) {\n        options.type = 'svg';\n    }\n\n    if (!ICON_TYPES[options.type]) {\n        return null;\n    }\n\n    return (new ICON_TYPES[options.type](element, options).html());\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}