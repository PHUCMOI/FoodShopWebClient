{"ast":null,"code":"import { drawing as draw } from '@progress/kendo-drawing';\nimport ChartElement from './chart-element';\nimport GRADIENTS from './gradients';\nimport Box from './box';\nimport boxDiff from './utils/box-diff';\nimport { DEFAULT_WIDTH, DEFAULT_HEIGHT, WHITE, BLACK } from '../common/constants';\nimport { getSpacing, objectKey, setDefaultOptions } from '../common';\nclass RootElement extends ChartElement {\n  constructor(options) {\n    super(options);\n    const rootOptions = this.options;\n    rootOptions.width = parseInt(rootOptions.width, 10);\n    rootOptions.height = parseInt(rootOptions.height, 10);\n    this.gradients = {};\n  }\n  reflow() {\n    const {\n      options,\n      children\n    } = this;\n    let currentBox = new Box(0, 0, options.width, options.height);\n    this.box = currentBox.unpad(options.margin);\n    for (let i = 0; i < children.length; i++) {\n      children[i].reflow(currentBox);\n      currentBox = boxDiff(currentBox, children[i].box) || new Box();\n    }\n  }\n  createVisual() {\n    this.visual = new draw.Group();\n    this.createBackground();\n  }\n  createBackground() {\n    const options = this.options;\n    const border = options.border || {};\n    const box = this.box.clone().pad(options.margin).unpad(border.width);\n    const background = draw.Path.fromRect(box.toRect(), {\n      stroke: {\n        color: border.width ? border.color : \"\",\n        width: border.width,\n        dashType: border.dashType\n      },\n      fill: {\n        color: options.background,\n        opacity: options.opacity\n      },\n      zIndex: -10\n    });\n    this.visual.append(background);\n  }\n  getRoot() {\n    return this;\n  }\n  createGradient(options) {\n    const gradients = this.gradients;\n    const hashCode = objectKey(options);\n    const gradient = GRADIENTS[options.gradient];\n    let drawingGradient;\n    if (gradients[hashCode]) {\n      drawingGradient = gradients[hashCode];\n    } else {\n      const gradientOptions = Object.assign({}, gradient, options);\n      if (gradient.type === \"linear\") {\n        drawingGradient = new draw.LinearGradient(gradientOptions);\n      } else {\n        if (options.innerRadius) {\n          gradientOptions.stops = innerRadialStops(gradientOptions);\n        }\n        drawingGradient = new draw.RadialGradient(gradientOptions);\n        drawingGradient.supportVML = gradient.supportVML !== false;\n      }\n      gradients[hashCode] = drawingGradient;\n    }\n    return drawingGradient;\n  }\n  cleanGradients() {\n    const gradients = this.gradients;\n    for (let hashCode in gradients) {\n      gradients[hashCode]._observers = []; //add clear observers method in drawing ObserversMixin\n    }\n  }\n\n  size() {\n    const options = this.options;\n    return new Box(0, 0, options.width, options.height);\n  }\n}\nsetDefaultOptions(RootElement, {\n  width: DEFAULT_WIDTH,\n  height: DEFAULT_HEIGHT,\n  background: WHITE,\n  border: {\n    color: BLACK,\n    width: 0\n  },\n  margin: getSpacing(5),\n  zIndex: -2\n});\nfunction innerRadialStops(options) {\n  const stops = options.stops;\n  const usedSpace = options.innerRadius / options.radius * 100;\n  const length = stops.length;\n  const currentStops = [];\n  for (let i = 0; i < length; i++) {\n    let currentStop = Object.assign({}, stops[i]);\n    currentStop.offset = (currentStop.offset * (100 - usedSpace) + usedSpace) / 100;\n    currentStops.push(currentStop);\n  }\n  return currentStops;\n}\nexport default RootElement;","map":{"version":3,"names":["drawing","draw","ChartElement","GRADIENTS","Box","boxDiff","DEFAULT_WIDTH","DEFAULT_HEIGHT","WHITE","BLACK","getSpacing","objectKey","setDefaultOptions","RootElement","constructor","options","rootOptions","width","parseInt","height","gradients","reflow","children","currentBox","box","unpad","margin","i","length","createVisual","visual","Group","createBackground","border","clone","pad","background","Path","fromRect","toRect","stroke","color","dashType","fill","opacity","zIndex","append","getRoot","createGradient","hashCode","gradient","drawingGradient","gradientOptions","Object","assign","type","LinearGradient","innerRadius","stops","innerRadialStops","RadialGradient","supportVML","cleanGradients","_observers","size","usedSpace","radius","currentStops","currentStop","offset","push"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-charts/dist/es2015/core/root-element.js"],"sourcesContent":["import { drawing as draw } from '@progress/kendo-drawing';\n\nimport ChartElement from './chart-element';\nimport GRADIENTS from './gradients';\nimport Box from './box';\n\nimport boxDiff from './utils/box-diff';\n\nimport { DEFAULT_WIDTH, DEFAULT_HEIGHT, WHITE, BLACK } from '../common/constants';\nimport { getSpacing, objectKey, setDefaultOptions } from '../common';\n\nclass RootElement extends ChartElement {\n    constructor(options) {\n        super(options);\n\n        const rootOptions = this.options;\n        rootOptions.width = parseInt(rootOptions.width, 10);\n        rootOptions.height = parseInt(rootOptions.height, 10);\n\n        this.gradients = {};\n    }\n\n    reflow() {\n        const { options, children } = this;\n        let currentBox = new Box(0, 0, options.width, options.height);\n\n        this.box = currentBox.unpad(options.margin);\n\n        for (let i = 0; i < children.length; i++) {\n            children[i].reflow(currentBox);\n            currentBox = boxDiff(currentBox, children[i].box) || new Box();\n        }\n    }\n\n    createVisual() {\n        this.visual = new draw.Group();\n        this.createBackground();\n    }\n\n    createBackground() {\n        const options = this.options;\n        const border = options.border || {};\n        const box = this.box.clone().pad(options.margin).unpad(border.width);\n\n        const background = draw.Path.fromRect(box.toRect(), {\n            stroke: {\n                color: border.width ? border.color : \"\",\n                width: border.width,\n                dashType: border.dashType\n            },\n            fill: {\n                color: options.background,\n                opacity: options.opacity\n            },\n            zIndex: -10\n        });\n\n        this.visual.append(background);\n    }\n\n    getRoot() {\n        return this;\n    }\n\n    createGradient(options) {\n        const gradients = this.gradients;\n        const hashCode = objectKey(options);\n        const gradient = GRADIENTS[options.gradient];\n        let drawingGradient;\n\n        if (gradients[hashCode]) {\n            drawingGradient = gradients[hashCode];\n        } else {\n            const gradientOptions = Object.assign({}, gradient, options);\n            if (gradient.type === \"linear\") {\n                drawingGradient = new draw.LinearGradient(gradientOptions);\n            } else {\n                if (options.innerRadius) {\n                    gradientOptions.stops = innerRadialStops(gradientOptions);\n                }\n                drawingGradient = new draw.RadialGradient(gradientOptions);\n                drawingGradient.supportVML = gradient.supportVML !== false;\n            }\n            gradients[hashCode] = drawingGradient;\n        }\n\n        return drawingGradient;\n    }\n\n    cleanGradients() {\n        const gradients = this.gradients;\n        for (let hashCode in gradients) {\n            gradients[hashCode]._observers = [];//add clear observers method in drawing ObserversMixin\n        }\n    }\n\n    size() {\n        const options = this.options;\n        return new Box(0, 0, options.width, options.height);\n    }\n}\n\nsetDefaultOptions(RootElement, {\n    width: DEFAULT_WIDTH,\n    height: DEFAULT_HEIGHT,\n    background: WHITE,\n    border: {\n        color: BLACK,\n        width: 0\n    },\n    margin: getSpacing(5),\n    zIndex: -2\n});\n\nfunction innerRadialStops(options) {\n    const stops = options.stops;\n    const usedSpace = ((options.innerRadius / options.radius) * 100);\n    const length = stops.length;\n    const currentStops = [];\n\n    for (let i = 0; i < length; i++) {\n        let currentStop = Object.assign({}, stops[i]);\n        currentStop.offset = (currentStop.offset * (100 - usedSpace) + usedSpace) / 100;\n        currentStops.push(currentStop);\n    }\n\n    return currentStops;\n}\n\nexport default RootElement;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}