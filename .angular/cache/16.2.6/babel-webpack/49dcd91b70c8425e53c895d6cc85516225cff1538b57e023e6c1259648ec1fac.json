{"ast":null,"code":"import CategoricalChart from '../categorical-chart';\nimport LineChartMixin from '../mixins/line-chart-mixin';\nimport ClipAnimationMixin from '../mixins/clip-animation-mixin';\nimport RangeAreaPoint from './range-area-point';\nimport RangeAreaSegment from './range-area-segment';\nimport SplineRangeAreaSegment from './spline-range-area-segment';\nimport StepRangeAreaSegment from './step-range-area-segment';\nimport { Box } from '../../core';\nimport { ZERO } from '../constants';\nimport { MIN_VALUE, MAX_VALUE } from '../../common/constants';\nimport { isNumber } from '../../common';\nimport { deepExtend, isFunction } from '../../common';\nimport { hasValue } from '../utils';\nclass RangeAreaChart extends CategoricalChart {\n  render() {\n    super.render();\n    this.renderSegments();\n  }\n  pointType() {\n    return RangeAreaPoint;\n  }\n  createPoint(data, fields) {\n    const {\n      series,\n      seriesIx\n    } = fields;\n    let value = data.valueFields;\n    if (!hasValue(value.from) && !hasValue(value.to)) {\n      if (this.seriesMissingValues(series) === ZERO) {\n        value = {\n          from: 0,\n          to: 0\n        };\n      } else {\n        return null;\n      }\n    }\n    let pointOptions = this.pointOptions(series, seriesIx);\n    pointOptions = this.evalPointOptions(pointOptions, value, fields);\n    let color = data.fields.color || series.color;\n    if (isFunction(series.color)) {\n      color = pointOptions.color;\n    }\n    const point = new RangeAreaPoint(value, pointOptions);\n    point.color = color;\n    this.append(point);\n    return point;\n  }\n  createSegment(linePoints, currentSeries, seriesIx) {\n    const style = (currentSeries.line || {}).style;\n    let segmentType;\n    if (style === \"smooth\") {\n      segmentType = SplineRangeAreaSegment;\n    } else if (style === \"step\") {\n      segmentType = StepRangeAreaSegment;\n    } else {\n      segmentType = RangeAreaSegment;\n    }\n    return new segmentType(linePoints, currentSeries, seriesIx);\n  }\n  plotRange(point, startValue) {\n    if (!point) {\n      return [startValue, startValue];\n    }\n    return [point.value.from, point.value.to];\n  }\n  valueSlot(valueAxis, plotRange) {\n    const fromSlot = valueAxis.getSlot(plotRange[0], plotRange[0], !this.options.clip);\n    const toSlot = valueAxis.getSlot(plotRange[1], plotRange[1], !this.options.clip);\n    if (fromSlot && toSlot) {\n      return {\n        from: fromSlot,\n        to: toSlot\n      };\n    }\n  }\n  pointSlot(categorySlot, valueSlot) {\n    const {\n      from,\n      to\n    } = valueSlot;\n    let fromSlot, toSlot;\n    if (this.options.invertAxes) {\n      fromSlot = new Box(from.x1, categorySlot.y1, from.x2, categorySlot.y2);\n      toSlot = new Box(to.x1, categorySlot.y1, to.x2, categorySlot.y2);\n    } else {\n      fromSlot = new Box(categorySlot.x1, from.y1, categorySlot.x2, from.y2);\n      toSlot = new Box(categorySlot.x1, to.y1, categorySlot.x2, to.y2);\n    }\n    return {\n      from: fromSlot,\n      to: toSlot\n    };\n  }\n  addValue(data, fields) {\n    const valueFields = data.valueFields;\n    if (!isNumber(valueFields.from)) {\n      valueFields.from = valueFields.to;\n    }\n    if (!isNumber(valueFields.to)) {\n      valueFields.to = valueFields.from;\n    }\n    super.addValue(data, fields);\n  }\n  updateRange(value, fields) {\n    if (value !== null && isNumber(value.from) && isNumber(value.to)) {\n      const axisName = fields.series.axis;\n      const axisRange = this.valueAxisRanges[axisName] = this.valueAxisRanges[axisName] || {\n        min: MAX_VALUE,\n        max: MIN_VALUE\n      };\n      const {\n        from,\n        to\n      } = value;\n      axisRange.min = Math.min(axisRange.min, from, to);\n      axisRange.max = Math.max(axisRange.max, from, to);\n    }\n  }\n  formatPointValue(point, format) {\n    const value = point.value;\n    return this.chartService.format.auto(format, value.from, value.to);\n  }\n  animationPoints() {\n    const points = this.points;\n    const result = [];\n    for (let idx = 0; idx < points.length; idx++) {\n      const point = points[idx];\n      if (point) {\n        result.push((point.fromPoint || {}).marker);\n        result.push((point.toPoint || {}).marker);\n      }\n    }\n    return result.concat(this._segments);\n  }\n}\ndeepExtend(RangeAreaChart.prototype, LineChartMixin, ClipAnimationMixin);\nexport default RangeAreaChart;","map":{"version":3,"names":["CategoricalChart","LineChartMixin","ClipAnimationMixin","RangeAreaPoint","RangeAreaSegment","SplineRangeAreaSegment","StepRangeAreaSegment","Box","ZERO","MIN_VALUE","MAX_VALUE","isNumber","deepExtend","isFunction","hasValue","RangeAreaChart","render","renderSegments","pointType","createPoint","data","fields","series","seriesIx","value","valueFields","from","to","seriesMissingValues","pointOptions","evalPointOptions","color","point","append","createSegment","linePoints","currentSeries","style","line","segmentType","plotRange","startValue","valueSlot","valueAxis","fromSlot","getSlot","options","clip","toSlot","pointSlot","categorySlot","invertAxes","x1","y1","x2","y2","addValue","updateRange","axisName","axis","axisRange","valueAxisRanges","min","max","Math","formatPointValue","format","chartService","auto","animationPoints","points","result","idx","length","push","fromPoint","marker","toPoint","concat","_segments","prototype"],"sources":["C:/Internship/FoodShopUI/node_modules/@progress/kendo-charts/dist/es2015/chart/range-area-chart/range-area-chart.js"],"sourcesContent":["import CategoricalChart from '../categorical-chart';\nimport LineChartMixin from '../mixins/line-chart-mixin';\nimport ClipAnimationMixin from '../mixins/clip-animation-mixin';\nimport RangeAreaPoint from './range-area-point';\nimport RangeAreaSegment from './range-area-segment';\nimport SplineRangeAreaSegment from './spline-range-area-segment';\nimport StepRangeAreaSegment from './step-range-area-segment';\n\nimport { Box } from '../../core';\nimport { ZERO } from '../constants';\nimport { MIN_VALUE, MAX_VALUE } from '../../common/constants';\nimport { isNumber } from '../../common';\nimport { deepExtend, isFunction } from '../../common';\nimport { hasValue } from '../utils';\n\nclass RangeAreaChart extends CategoricalChart {\n\n    render() {\n        super.render();\n\n        this.renderSegments();\n    }\n\n    pointType() {\n        return RangeAreaPoint;\n    }\n\n    createPoint(data, fields) {\n        const { series, seriesIx } = fields;\n        let value = data.valueFields;\n\n        if (!hasValue(value.from) && !hasValue(value.to)) {\n            if (this.seriesMissingValues(series) === ZERO) {\n                value = {\n                    from: 0,\n                    to: 0\n                };\n            } else {\n                return null;\n            }\n        }\n\n        let pointOptions = this.pointOptions(series, seriesIx);\n        pointOptions = this.evalPointOptions(pointOptions, value, fields);\n\n        let color = data.fields.color || series.color;\n        if (isFunction(series.color)) {\n            color = pointOptions.color;\n        }\n\n        const point = new RangeAreaPoint(value, pointOptions);\n        point.color = color;\n\n        this.append(point);\n\n        return point;\n    }\n\n    createSegment(linePoints, currentSeries, seriesIx) {\n        const style = (currentSeries.line || {}).style;\n        let segmentType;\n        if (style === \"smooth\") {\n            segmentType = SplineRangeAreaSegment;\n        } else if (style === \"step\") {\n            segmentType = StepRangeAreaSegment;\n        } else {\n            segmentType = RangeAreaSegment;\n        }\n\n        return new segmentType(linePoints, currentSeries, seriesIx);\n    }\n\n    plotRange(point, startValue) {\n        if (!point) {\n            return [ startValue, startValue ];\n        }\n\n        return [ point.value.from, point.value.to ];\n    }\n\n    valueSlot(valueAxis, plotRange) {\n        const fromSlot = valueAxis.getSlot(plotRange[0], plotRange[0], !this.options.clip);\n        const toSlot = valueAxis.getSlot(plotRange[1], plotRange[1], !this.options.clip);\n        if (fromSlot && toSlot) {\n            return {\n                from: fromSlot,\n                to: toSlot\n            };\n        }\n    }\n\n    pointSlot(categorySlot, valueSlot) {\n        const { from, to } = valueSlot;\n        let fromSlot, toSlot;\n\n        if (this.options.invertAxes) {\n            fromSlot = new Box(from.x1, categorySlot.y1, from.x2, categorySlot.y2);\n            toSlot = new Box(to.x1, categorySlot.y1, to.x2, categorySlot.y2);\n        } else {\n            fromSlot = new Box(categorySlot.x1, from.y1, categorySlot.x2, from.y2);\n            toSlot = new Box(categorySlot.x1, to.y1, categorySlot.x2, to.y2);\n        }\n\n        return {\n            from: fromSlot,\n            to: toSlot\n        };\n    }\n\n    addValue(data, fields) {\n        const valueFields = data.valueFields;\n        if (!isNumber(valueFields.from)) {\n            valueFields.from = valueFields.to;\n        }\n\n        if (!isNumber(valueFields.to)) {\n            valueFields.to = valueFields.from;\n        }\n\n        super.addValue(data, fields);\n    }\n\n    updateRange(value, fields) {\n        if (value !== null && isNumber(value.from) && isNumber(value.to)) {\n            const axisName = fields.series.axis;\n            const axisRange = this.valueAxisRanges[axisName] = this.valueAxisRanges[axisName] || { min: MAX_VALUE, max: MIN_VALUE };\n            const { from, to } = value;\n\n            axisRange.min = Math.min(axisRange.min, from, to);\n            axisRange.max = Math.max(axisRange.max, from, to);\n        }\n    }\n\n    formatPointValue(point, format) {\n        const value = point.value;\n\n        return this.chartService.format.auto(format, value.from, value.to);\n    }\n\n    animationPoints() {\n        const points = this.points;\n        const result = [];\n        for (let idx = 0; idx < points.length; idx++) {\n            const point = points[idx];\n            if (point) {\n                result.push((point.fromPoint || {}).marker);\n                result.push((point.toPoint || {}).marker);\n            }\n        }\n\n        return result.concat(this._segments);\n    }\n}\n\ndeepExtend(RangeAreaChart.prototype, LineChartMixin, ClipAnimationMixin);\n\nexport default RangeAreaChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}